#+PROPERTY: header-args :results silent :tangle ./dotemacs.el 
#+toc: t
#+hugo_base_dir: ~/hugo-sr/
#+hugo_section: docs
#+hugo_auto_set_lastmod: t
#+author: Shreyas Ragavan
#+hugo_tags: Emacs config dotemacs
#+hugo_categories: Emacs
#+hugo_menu: :menu "docs" :weight 2001 :parent "Emacs"
#+hugo_custom_front_matter: :linktitle Dotemacs - Emacs config  :toc true
#+hugo_draft: false
#+TITLE: shrysr's Dotemacs

* Introduction

I've been using my own configuration on top of the excellent Scimax for
the past many years. This is a reboot to reverse the bias, and create my
very own emacs configuration. It obviously includes massive snippets of
code from scimax, as well as other configurations I come across, not to
mention the excellent advice often received from #emacs and other
geniuses lurking in irc channels, and of course the vast
internet.

#+BEGIN_QUOTE
Note that this config is still under a great deal of flux at the
moment and will be for the foreseeable future. I am learning elisp
every (other) day and am rather obsessed like most Emacsers to
optimise the entire toolset. This is an an opinionated setup.

I would recommend studying the setup and using bits and pieces of it
as you require, because one primary power of Emacs is being able to
customise your tool to your needs. However, the eventual goal will
also be to enable using this configuration as a whole for anybody
interested.

#+END_QUOTE

** Overall setup

This file is ~emacs-config.org~. This is the source of truth for the
entire config. It is tangled into 2 files, an init.el and a dotemacs.el.

The init.el file is included in the git commit as it will (eventually)
enable starting up emacs with basic libraries, and loading (and if
necessary tangling) this config if one is starting from scratch on a new
machine.

Due to the above - it is important to be careful with using header
arguments for source blocks. As per current Org mode features,
specifying the header arguments, even a ~:tangle yes~, will over-ride
the file settings specified elsewhere and thus parts of the config will
never get inserted into the el files that are loaded during init.

The better method to disable tangling of specific blocks would be to
comment out Org headings. It should also be possible to have a setup
wherein headings with specific tags are not tangled, similar to the
noexport tag option with typical org exports. The caveat of using this
option is that these headings will be neglected in an export to say,
something like a Hugo document. 

Package management is done via the interesting straight.el. There are
other approaches like borg, using quelpa and so on that I have not
tried. However, the point is that it is better to rely on git to draw
packages rather than MELPA, which can be frustrating at times.

The last 2 headlines contain a 'Testing Area' and 'Disabled'
headline. This contains all the packages that are yet to be a part of my
main setup, or packages that I use occasionally and activate when I
need to. These are available in the raw org file in the repository of
the configuration.

General notes:
- I was initially using a single init.org file that tangled to an
  init.el file. This kind of setup makes it hard to make meaningful
  commits, especially if the init.el is also a part of the visible
  commits. After all one caveat here is still that ~some external
  library is necessary to tangle these org files into elisp files for
  loading emacs.
- I would prefer not using git hooks for the tangling because my commit
  workflow is still erratic. Sometimes, there is no change in code, but
  just some additional notes to the configuration. 

** Inspirations (and other literate configurations)

This is a growing and non-comprehensive list of configurations that I
admire and have liberally copied from in constructing my own.

- [[http://doc.norang.ca/org-mode.html][Bernt Hansen's very detailed Org-mode config]]
- [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
- [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][Mathieu Marques]]
- [[https://writequit.org/org/][Lee Hinman]]
- [[https://karl-voit.at/2017/06/03/emacs-org/][Karl Voit]]
- [[https://dustinlacewell.github.io/emacs.d/][Dustin Lacewell]]
- [[https://github.com/wasamasa/dotemacs][GitHub - wasamasa/dotemacs: Literate Emacs configuration]]
- [[https://github.com/IvanMalison/dotfiles][GitHub - IvanMalison/dotfiles: Configuration files for XMonad, Emacs, NixOS, Taffybar and more.]]

In general - code and snippet source references are added as and when
possible though this is a tedius task for those with configurations
under a great rate of flux.

** TODO Packages I've found very useful

Though I'm using a huge number of packages - this list reflects the
absolute core that I consider to be essential to my current /daily/
workflow. This list is being formulated so that I can develop a minimal
Emacs config that can be used for a rapid setup on a headless server.

1. org-download
2. org-web-tools
3. org-ref
4. treemacs
5. eyebrowse
6. projectile
7. org-projectile
8. counsel + ivy + swiper
9. Helm (some functions)
10. magit
11. hydra (and other variants)
12. straight.el

* Init setup
:PROPERTIES:
:header-args: :tangle ./init.el
:END:

This part of the config has to be tangled to init.el so that straight
and use-package can be setup. This is a separate init file as it is
expected to remain stable and will be the only .el file that is in git
commit.

** Lexical Scope and binding
:PROPERTIES:
:ID:       3CBA7F73-C58D-4B9F-9B9E-3E02B52F6890
:END:

A reasonable explanation of the importance of lexical binding is available [[info:elisp#Lexical%20Binding][in the elisp manual]]. This is essentially similar to the quoted or unquoted variables in R.

#+BEGIN_QUOTE
A lexically-bound variable has lexical scope, meaning that any reference to the variable must be located textually within the binding
construct.
#+END_QUOTE


   #+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
(setq-default lexical-binding t)
   #+END_SRC

** Garbage collection
- Note taken on [2020-04-09 Thu 18:09] \\
  As the doom emacs FAQ states - the GC collection has to be set back to
  normal as well.
- Note taken on [2020-04-02 Thu 22:11] \\
  Just increasing teh gc threshold seems to have reduced my init time by
  50% ! From ~7 seconds to 3.5s at the moment. This is found from
  (emacs-init-time). This is probably the fastest init time I have ever
  had.

References:
- [[https://github.com/wasamasa/dotemacs/blob/master/init.org#memory-management][dotemacs/init.org at master 路 wasamasa/dotemacs 路 GitHub]]
- [[https://github.com/hlissner/doom-emacs/blob/665b627b7c07c8d29ec8d334588cecc2ba308248/docs/faq.org#how-does-doom-start-up-so-quickly][doom-emacs/faq.org  路 hlissner/doom-emacs 路 GitHub]]

- [ ] There are additional options that can be tried on this
  subject. Like garbage collection when focus is lost from
  Emacs. The doom docs claim this is done via the gcmh package.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum ; 2^61 bytes
      gc-cons-percentage 0.6)

(add-hook 'emacs-startup-hook
  (lambda ()
    (setq gc-cons-threshold 16777216 ; 16mb
          gc-cons-percentage 0.1)))

;; Raising gc-cons threshold when the minibuffer is active

(defun doom-defer-garbage-collection-h ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun doom-restore-garbage-collection-h ()
  ;; Defer it so that commands launched immediately after will enjoy the
  ;; benefits.
  (run-at-time
   1 nil (lambda () (setq gc-cons-threshold 16777216 ; 16mb
          gc-cons-percentage 0.1) )))

(add-hook 'minibuffer-setup-hook #'doom-defer-garbage-collection-h)
(add-hook 'minibuffer-exit-hook #'doom-restore-garbage-collection-h)
#+END_SRC

#+RESULTS:
| doom-restore-garbage-collection-h | pl/minibuffer-exit |

** Package management

*** Straight
:PROPERTIES:
:ID:       A1B35506-B602-4344-9F49-2BD76C932C78
:END:

This snippet essentially bootstraps straight.el, which has several advantages over use-package, along with the ability to seamlessly work with use-package as well.

 By bootsrapping, this means that the straight package is downloaded to the user's emacs directory and compiled and installed. Unless set otherwise, the user's emacs directory is =~/.emacs.d=

 #+BEGIN_SRC emacs-lisp
 (let ((bootstrap-file (concat user-emacs-directory "straight/repos/straight.el/bootstrap.el"))
 (bootstrap-version 3))
 (unless (file-exists-p bootstrap-file)
 (with-current-buffer
 (url-retrieve-synchronously
 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
 'silent 'inhibit-cookies)
 (goto-char (point-max))
 (eval-print-last-sexp)))
 (load bootstrap-file nil 'nomessage))
 #+END_SRC

 #+RESULTS:
 : t

*** Use-package integration with straight
:PROPERTIES:
:ID:       A970A1D7-083C-4982-A7A0-E026B9BFFE57
:END:

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
(use-package git) ;; ensure we can install from git sources

#+END_SRC

 #+RESULTS:

** Some basic directory definitions 
:PROPERTIES:
:ID:       52D8055A-D99B-463C-8F97-056C068EDACD
:END:

#+BEGIN_SRC emacs-lisp
;; Base function to create the home directory
(defun sr/fun/homedir (foldername)
"Function to extract the home directory path"
  (expand-file-name foldername (getenv "HOME")))

;; Emacs directory defauling to .emacs.d
(defun sr/fun/emacs-dir (foldername)
"Function to prepend the project directory path to any folder. Starts from the home directory."
  (expand-file-name foldername (sr/fun/homedir ".emacs.d" )))
#+END_SRC

** Shorten yes or no
:PROPERTIES:
:ID:       4A052D85-5CA0-4703-94BD-693A88D89926
:END:

It is infuriating that this is not a default in emacs. Therefore this minor snippet is included in the init.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

#+RESULTS:
: y-or-n-p

** Load main config
:PROPERTIES:
:ID:       CEBFC8FA-011A-4836-A815-9B00746EF8AE
:END:

#+BEGIN_SRC emacs-lisp
(load (sr/fun/emacs-dir "dotemacs.el"))
#+END_SRC

* .gitignore 
- Note taken on [2020-03-26 Thu 11:38] \\
  In this process, I realised that as long as there is a .gitignore file present (and not in a commit) and the specified files have never been in a commit - git automatically ignores these files. i.e there is no need to commit a .gitignore file.

#+BEGIN_SRC txt :tangle ./.gitignore
auto-save-list
autosaves
elpa
eshell
recentf
smex-items
sr-secrets.org.el
projectile-bookmarks.eld
bookmarks
ac-comphist.dat
.mc-lists.el
transient
elpy
tramp
url
dotemacs.el
org-journal.cache
request/
.cache/
var/
.lsp-session*
#+END_SRC

* Tangle Emacs config on save 
:PROPERTIES:
:ID:       EE52585C-C1D6-4759-94AE-CCECA01E5D41
:END:
** TODO Tangle on save without async
:PROPERTIES:
:ID:       47CCBB72-667B-4710-AF6F-32B9DEA32E89
:END:

As such the tangling hardly takes any time. [[https://thewanderingcoder.com/2015/02/literate-emacs-configuration/][Literate Emacs Configuration | Sean Miller: The Wandering Coder]] provides an example of setting up a function. This uses the buffer file name to tangle for the emacs config file. A hook is added to the save function to check. 

- [ ] Add a force tangle option if files do not exist. This is because, if for troubleshooting purposes, the el files are deleted, and there is no change in the org file, then the tangling does not take place at all. In general, it may be better to ensure the el files are deleted and tangled again.

#+BEGIN_SRC emacs-lisp
(defun sr/fun/tangle-on-save-init ()
(when (string= buffer-file-name (file-truename "~/.emacs.d/emacs-config.org"))
(org-babel-tangle)))

(add-hook 'after-save-hook 'sr/fun/tangle-on-save-init)

#+END_SRC

#+RESULTS:
| rmail-after-save-hook | backup-each-save | sr/fun/tangle-on-save-init |

** Local file variables

One way to do this is via local file variables, adding the following to the init file (or any file). However, it seems that this is not 'activated' by default.

#+BEGIN_EXAMPLE
# Local variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) t t)
# end:
#+END_EXAMPLE

** TODO Async function to tangle org file on save.

This is inspired from [[https://www.reddit.com/r/emacs/comments/5ej8by/asynchronous_tangle_and_compile_of_configorg/][Asynchronous tangle and compile of config.org(question/issue) : emacs]] on reddit and a work in progress. Since I am using straight.el, the byte compilation of packages is not necessary (or already taken care of). It is probably worth noting that the tangling process is almost instant and maybe this effort is not warranted.

(sr/fun/async-tangle-init)

#+BEGIN_SRC emacs-lisp :tangle no
(defun sr/fun/async-tangle-init () 
  (async-start
   (lambda ()
     (org-babel-tangle))
(message "Tangle async done")))

#+END_SRC

#+RESULTS:
: sr/fun/async-tangle-init

* Various directories
:PROPERTIES:
:ID:       252B8837-EE16-41C1-96C1-3F6C05D156BF
:END:

#+BEGIN_SRC emacs-lisp


(defun sr/fun/project-dir (foldername)
"Function to prepend the project directory path to any folder. Starts from the home directory."
  (expand-file-name foldername (sr/fun/homedir "my_projects" )))

(defun sr/fun/org-dir (foldername)
"Function to prepend the org directory path to any folder. Starts from the home directory."
  (expand-file-name foldername (sr/fun/homedir "my_org" )))

#+END_SRC

#+RESULTS:
: sr/fun/emacs-dir

* Auto-save
:PROPERTIES:
:ID:       6BBBB542-2501-4516-A138-692EC000CBC3
:END:

Copied from ldleworth's config. I think this makes sense for me at the moment. Here is a summary: 

- Setup auto-save for every file that is visited.
- Set the auto-save directory explicitly to save all the auto-saves in a single location.
  - The directory will be created if not available, and will be ignored for
    git.
- Use the autosave directory for backups as well. 
- [ ] Save every +20+ 60 seconds (experiment with the time frame)
  - This causes too much lag and has been disabled. 
- [ ] Backup on each save.
  - [ ] This uses a package. I am not sure whether this is necessary.
- Backup files even if version controlled
- [ ] Copy files to avoid various problems.
  - [ ] check whether this causes any lag with operating emacs.
- keep 10 versions of old backups and delete old backups.


#+BEGIN_SRC emacs-lisp
(setq auto-save-default t)
(setq auto-save-timeout 20
      auto-save-interval 60)

(defvar emacs-autosave-directory
(concat user-emacs-directory "autosaves/"))

(unless (file-exists-p emacs-autosave-directory)
(make-directory emacs-autosave-directory))

(setq auto-save-file-name-transforms
`((".*" ,emacs-autosave-directory t)))

(setq backup-directory-alist `((".*" . ,emacs-autosave-directory)))

(use-package backup-each-save
:straight t
:config (add-hook 'after-save-hook 'backup-each-save))

(setq vc-make-backup-files t)

(setq backup-by-copying t)

(setq kept-new-versions 10
kept-old-verisons 0
delete-old-versions t)

#+END_SRC

* OS Level variables
:PROPERTIES:
:ID:       BE6ABB97-4B9A-4E2F-9D74-83F6AECF8A4D
:END:

Since I switch between a Linux machine and a Mac frequently, it is better to define variables that can be used to set other variables depending on the OS.

#+BEGIN_SRC emacs-lisp
;; Get current system's name
(defun insert-system-name()
  (interactive)
  "Get current system's name"
  (insert (format "%s" system-name))
  )

;; Get current system type
(defun insert-system-type()
  (interactive)
  "Get current system type"
  (insert (format "%s" system-type))
  )

;; Check if system is Darwin/Mac OS X
(defun system-type-is-darwin ()
  (interactive)
  "Return true if system is darwin-based (Mac OS X)"
  (string-equal system-type "darwin")
  )

;; Check if system is GNU/Linux
(defun system-type-is-gnu ()
  (interactive)
  "Return true if system is GNU/Linux-based"
  (string-equal system-type "gnu/linux")
  )

#+END_SRC

* Org-mode related

These have packages and settings that are mostly related to org-mode though there may be other settings that bleed in. org-babel has been given it's own section though it is org-mode related.

** Installing org and org plus contrib via straight
:PROPERTIES:
:ID:       1D103003-0690-4DD0-964C-2E5DCDEC1937
:END:
*** COMMENT Old
Reference: [[https://github.crookster.org/switching-to-straight.el-from-emacs-26-builtin-package.el/][Crookster's blog post]]

#+BEGIN_SRC emacs-lisp
;;______________________________________________________________________
;;;;  Installing Org with straight.el
;;; https://github.com/raxod502/straight.el/blob/develop/README.md#installing-org-with-straightel
(require 'subr-x)
(straight-use-package 'git)

(defun org-git-version ()
  "The Git version of 'org-mode'.
Inserted by installing 'org-mode' or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (git-run "describe"
              "--match=release\*"
              "--abbrev=6"
              "HEAD"))))

(defun org-release ()
  "The release version of 'org-mode'.
Inserted by installing 'org-mode' or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (string-remove-prefix
      "release_"
      (git-run "describe"
               "--match=release\*"
               "--abbrev=0"
               "HEAD")))))

(provide 'org-version)

;; (straight-use-package 'org) ; or org-plus-contrib if desired

(use-package org-plus-contrib
   :mode (("\\.org$" . org-mode))
   :bind
   ("C-c l" . org-store-link)
   ("C-c a" . org-agenda))
#+END_SRC

*** ldlework's alternative
- Note taken on [2020-03-30 Mon 20:24] \\
  The only addition is the installation of org-plus-contrib and setting the shortcuts for the agenda and link.
**** Fix org-git version
:PROPERTIES:
:ID:       9E872705-E3CD-4A1F-98B2-63406665656B
:END:

#+BEGIN_SRC emacs-lisp
(defun fix-org-git-version ()
"The Git version of org-mode.
Inserted by installing org-mode or when a release is made."
(require 'git)
(let ((git-repo (expand-file-name
"straight/repos/org/" user-emacs-directory)))
(string-trim
(git-run "describe"
"--match=release\*"
"--abbrev=6"
"HEAD"))))
#+END_SRC

**** Fix org release
:PROPERTIES:
:ID:       88C7834B-F216-43C5-A88A-0CA1A82D3365
:END:

#+BEGIN_SRC emacs-lisp
(defun fix-org-release ()
"The release version of org-mode.
Inserted by installing org-mode or when a release is made."
(require 'git)
(let ((git-repo (expand-file-name
"straight/repos/org/" user-emacs-directory)))
(string-trim
(string-remove-prefix
"release_"
(git-run "describe"
"--match=release\*"
"--abbrev=0"
"HEAD")))))
#+END_SRC

**** Install org
:PROPERTIES:
:ID:       44D0A1FB-C1F2-4522-B493-9411297195D5
:END:

#+BEGIN_SRC emacs-lisp
(use-package org
:demand t
:mode ("\\.org\\'" . org-mode)
:config
;; these depend on the 'straight.el fixes' above
(defalias #'org-git-version #'fix-org-git-version)
(defalias #'org-release #'fix-org-release)
(require 'org-habit)
(require 'org-capture)
(require 'org-tempo))

(use-package org-plus-contrib
   :mode (("\\.org$" . org-mode))
   :bind
   ("C-c l" . org-store-link)
   ("C-c a" . org-agenda))
#+END_SRC

** Collection of hooks for org mode 
:PROPERTIES:
:ID:       AA8706FA-0B26-4F0A-B6F8-2E2EDA551375
:END:
This is intended to be a collection of hooks loaded after org mode. It may be more convenient to add such hooks in the package configurations since the hooks will not work if the package is not available. 

However, hooks have the potential to slow down search, opening multiple files like in org-agenda, tramp files and so on. Therefore, the idea is to try collect the hooks here and include logic to discard hooks if the mode or package is not installed. 

- [ ] Maybe work on a method to switch off all the hooks after org mode since this mode is being used extensively.

List of hooks 
- [ ] Org indent mode
- [ ] Flyspell mode
- [ ] 

#+BEGIN_SRC emacs-lisp
;; Indent by header level 

(with-eval-after-load 'org
   (add-hook 'org-mode-hook #'org-indent-mode))

;; Enable flyspell mode

(add-hook 'org-mode-hook 'flyspell-mode)

#+END_SRC

** Exports
*** Markdown export
:PROPERTIES:
:ID:       A7FBD8B1-5C55-407A-8409-65EB85C8FDD4
:END:

#+BEGIN_SRC emacs-lisp
(require 'ox-md)
#+END_SRC

*** ox-pandoc
:PROPERTIES:
:ID:       1B23050A-3ABD-48C9-A0B1-6294414748E0
:END:

#+BEGIN_SRC emacs-lisp
(use-package ox-pandoc
  :ensure t
  :straight t
  :defer 5)
#+END_SRC

#+RESULTS:
** Agenda mechanics
*** Weekday starts on Monday
    :PROPERTIES:
    :ID:       d9f341b0-ad88-40ca-a19a-9ca710b2d681
    :END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-on-weekday 1)
#+end_src

*** Display heading tags farther to the right
    :PROPERTIES:
    :ID:       4d9c3678-f06d-49c5-9f80-184c0e2fac4e
    :END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-tags-column -150)
#+end_src

*** Default org directory and agenda file directory
:PROPERTIES:
:ID:       be1c3eed-5e7d-4f62-a5f4-127c0ee30a73
:END:

#+begin_src emacs-lisp
(setq
 org-directory "~/my_org/"
 org-agenda-files '("~/my_org/")
 )
 #+end_src

 #+RESULTS:
 | ~/my_org/ |

*** TODO Agenda customisation
    :PROPERTIES:
    :ID:       0b93631b-5a2d-4764-92b0-f5cdf42fffe7
    :END:

- Note taken on [2019-02-07 Thu 08:26]  \\
  Need to clear up the search functions, enabling complete search in journal files. Archive and some external directories are included, since they are explictly in org mode.

#+BEGIN_SRC emacs-lisp

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "recurr"
		((org-agenda-overriding-header "Recurring Tasks")))
          (agenda "")
          (todo "")))
        ("o" agenda "Office mode" ((org-agenda-tag-filter-preset '("-course" "-habit" "-someday" "-book" "-emacs"))))
        ("qc" tags "+commandment")
	("e" tags "+org")
	("w" agenda "Today" ((org-agenda-tag-filter-preset '("+work"))))
	("W" todo-tree "WAITING")
	("q" . "Custom queries") ;; gives label to "q"
	("d" . "ds related")	 ;; gives label to "d"
	("ds" agenda "Datascience" ((org-agenda-tag-filter-preset '("+datascience"))))
	("qw" agenda "MRPS" ((org-agenda-tag-filter-preset '("+canjs"))))
	("qa" "Archive tags search" org-tags-view ""
         ((org-agenda-files (file-expand-wildcards "~/my_org/*.org*"))))
        ("j" "Journal Search" search ""
         ''((org-agenda-text-search-extra-files (file-expand-wildcards "~/my_org/journal/"))))
        ("S" search ""
	 ((org-agenda-files '("~/my_org/"))
	  (org-agenda-text-search-extra-files )))
	)
      )
#+end_src

*** TEST Include gpg files in agenda generation
    :PROPERTIES:
    :ID:       4c1a0a00-d123-4b6a-a209-219872d43ca1
    :END:

Source: https://emacs.stackexchange.com/questions/36542/include-org-gpg-files-in-org-agenda
Note that this must be set first and then the agenda files specified.

#+BEGIN_SRC emacs-lisp :tangle no
(unless (string-match-p "\\.gpg" org-agenda-file-regexp)
  (setq org-agenda-file-regexp
        (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                                  org-agenda-file-regexp)))

;;(setq org-agenda-file-regexp "\\`\\\([^.].*\\.org\\\|[0-9]\\\{8\\\}\\\(\\.gpg\\\)?\\\)\\'")
#+end_src

#+RESULTS:

*** TEST Expanding search locations
    :PROPERTIES:
    :ID:       63a20a98-6090-4087-889d-7398df5b6bb9
    :END:

I initially included my journal location to the agenda search. However it is very slow compared to using grep/rgrep/ag. Therefore, the agenda full text search is now limited to the project directory and the org-brain directory. The snippet below enables searching recursively within folders.

#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-text-search-extra-files '(agenda-archives))

(setq org-agenda-text-search-extra-files (apply 'append
						(mapcar
						 (lambda (directory)
						   (directory-files-recursively
						    directory org-agenda-file-regexp))
						 '("~/my_projects/" "~/my_org/brain/"))))
#+end_src

*** TODO Adding org archive for text search. Optimise this
:PROPERTIES:
:CREATED:  <2019-02-07 Thu 08:29>
:ID:       D8743646-BD5B-463C-AB4B-CAB8AF8AA535
:END:

- Note taken on [2020-02-22 Sat 13:25] \\
  I don't really use this anymore. I prefer grep or ag for searching through all my text files. The caveat is that the files have to under a single root directory.
#+BEGIN_SRC emacs-lisp
(setq org-agenda-text-search-extra-files '(agenda-archives))
#+end_src

#+RESULTS:
| agenda-archives |

*** Enable default fuzzy search like in google
    :PROPERTIES:
    :ID:       a8012ca5-8f07-419f-8aed-11d43651bcca
    :END:

#+BEGIN_SRC emacs-lisp
(setq org-agenda-search-view-always-boolean t)
#+end_src

*** Hooks for org-agenda
:PROPERTIES:
:ID:       821CDF30-9FBA-40AB-99F4-B01A8CCBDE1F
:END:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-mode-hook
          '(lambda ()
 	     (hl-line-mode 1)))
#+END_SRC

*** DONE org-habit
CLOSED: [2019-02-12 Tue 13:21]
:PROPERTIES:
:ID:       951e7ed9-783d-44b9-869d-fe048e41e93f
:END:
- Note taken on [2019-02-12 Tue 13:20] \\
  Adding a require has brought org-habit back on track.
- Note taken on [2019-02-07 Thu 09:50] \\
  Appears the use-package config for org-habit is not correct and there is some issue in downloading it as a package.

I want to shift the org habit graph in the agenda further out right so as to leave enough room for the headings to be visible.

#+BEGIN_SRC emacs-lisp
(require 'org-habit)
(setq org-habit-graph-column 90)
#+end_src

#+RESULTS:
: 90
** Archiving mechanics

- Note taken on [2020-04-06 Mon 23:27] \\
  I prefer to keep my archived files in a separate folder to promote a
  cleaner look and less files in the main org directory. The earlier
  archive file used to replicate the structure of the file where the entry
  was archived from. However, I have realised that the properties of
  archived entries provide all the information that I would need from an
  archived file. 
  
  Projects may require a separate approach. Perhaps archived subtrees
  would help in that case. For general GTD based workflows, the simple
  approach of archiving under a 'Archive' heading seems sufficient. This
  will also mark the difference between using this approach and the
  earlier complete replication.

#+BEGIN_SRC emacs-lisp
(setq org-archive-mark-done nil)
(setq org-archive-location (sr/fun/org-dir "archive/%s_archive::* Archive"))
#+END_SRC

** TODO Capture mechanics
Over time I've found an efficient capture mechanism to be important to
nurture productivity while accounting for interruptions. I think the
process of gathering templates takes time, and can be facilitated by
keenly observing the typical repetitive capture-like tasks that are
performed through the day. Needless to say, this has to be integrated
into GTD. The ideal method seems to be to capture quickly ~somewhere and
then review and refile, as well as schedule a time block for the
tasks. Musa Al-hassy's [[https://alhassy.github.io/init/][A Life Configuring Emacs]] talks about the
above. Some other good starting points are:
- [[http://doc.norang.ca/org-mode.html][Bernt Hansen's config]]
- [[http://pragmaticemacs.com/category/org/][org | Pragmatic Emacs]]
- [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]

*** TODO Doct for org capture templates

[[https://github.com/progfolio/doct][DOCT]] makes it a lot easier to define capture templates in a clean manner. At the moment, I am interested in adding hooks to specific functions and improving the entire capture process.

**** Install doct
:PROPERTIES:
:ID:       687BA330-0F53-4335-9609-50925ECA58D0
:END:

#+BEGIN_SRC emacs-lisp
(straight-use-package 'doct)
#+END_SRC

#+RESULTS:
: t

**** doct functions 
:PROPERTIES:
:ID:       CC7C84DE-AFEF-4E44-9B5B-056DFA58AF5B
:END:

- Note taken on [2020-04-12 Sun 11:42] \\
  It seems easier to prompt for a date with respect to active dates. The
  default date is today, and there requires just another RET to select
  today. The prompt ensures being able to cater to tasks that definitely
  belong tomorrow or another date down the line. Without a template, an
  additional refile, or schedule, or manipulation in the capture window
  is required. This approach seems to cater to more situations in a
  standard manner.

#+BEGIN_SRC emacs-lisp  
(defun sr/fun/todo-act-today ()
'("* %{todo-state} %?"
":PROPERTIES:"
":CREATED: %<%Y-%m-%d %a %H:%M>"
":PLANNED: %t"
":END:"))

(defun sr/fun/todo-act-date ()
'("* %{todo-state} %?"
":PROPERTIES:"
":CREATED: %<%Y-%m-%d %a %H:%M>"
":PLANNED: %^t"
":END:"))

(defun sr/fun/todo-passive ()
'("* %{todo-state} %?"
":PROPERTIES:"
":CREATED: %U"
":END:"))

(defun sr/fun/todo-link-act-today ()
'("* %{todo-state} %a"
":PROPERTIES:"
":CREATED: %<%Y-%m-%d %a %H:%M>"
":PLANNED: %t"
":END:"
"%?"))

(defun sr/fun/todo-link-act-date ()
'("* %{todo-state} %a"
":PROPERTIES:"
":CREATED: %<%Y-%m-%d %a %H:%M>"
":PLANNED: %^t"
":END:"
"%?"))

(defun sr/fun/todo-file-link-act-date ()
'("* %{todo-state} [[file:%F][%f]]"
":PROPERTIES:"
":CREATED: %<%Y-%m-%d %a %H:%M>"
":PLANNED: %^t"
":END:"
"%?"))

(defun sr/fun/todo-file-ext-link-act-date ()
'("* %{todo-state} %(org-web-tools--get-url %x)"
":PROPERTIES:"
":CREATED: %<%Y-%m-%d %a %H:%M>"
":PLANNED: %^t"
":END:"
"%?"))

(defun sr/fun/todo-link-passive ()
'("* %a"
":PROPERTIES:"
":CREATED: %U"
":END:"
"%?"))

(defun sr/fun/note-passive ()
'("* %?"
":PROPERTIES:"
":CREATED: %U"
":END:"))

#+END_SRC

#+RESULTS:
: sr/fun/note-passive

**** doct templates

- [X] Created inactive date for all entries
- [X] Mail : Active date + mu4e link
- [X] Mail : Passive date + mu4e link. Meant for general notes and archive.
- [X] Note : passive date. Generally not refiled.
- [ ] Note : With active date to be refiled or acted upon.
  - I am not sure if this makes sense. If action is required, it should
    be a task.
- [ ] Link : 
- [ ] Capture to today's journal
- [ ] Capture to tomorrow's journal
- [ ] Capture to current clocked task

#+BEGIN_SRC emacs-lisp 
(setq org-capture-templates
      (doct '(("capture" :keys "c"
               :file "~/my_org/todo-global.org"
               :prepend t
	       :children (("inbox"  
			   :keys "t"
			   :type entry
	                   :file "~/my_org/refile.org"
			   :headline "inbox"
			   :todo-state "TODO"
			   :template sr/fun/todo-passive)
			  ("mail"  
			   :keys "m"
			   :type entry
	                   :file "~/my_org/refile.org"
			   :todo-state "TODO"
			   :headline "mail"
			   :template sr/fun/todo-link-passive)
                          ("reading" :keys "r"
                           :headline   "reading"
                           :todo-state "TODO"
			   :template sr/fun/todo-link-passive)
			  ("emacs" :keys "e"
                           :headline   "emacs"
                           :todo-state "TODO"
			   :template sr/fun/todo-link-passive)))
	      ("Todo" :keys "t"
               :file "~/my_org/todo-global.org"
               :prepend t
	       :children (("inbox"  
			   :keys "t"
			   :type entry
			   :headline "@inbox"
			   :todo-state "TODO"
			   :template sr/fun/todo-act-date)
			  ("mail"  
			   :keys "m"
			   :type entry
			   :headline "@mail"
			   :todo-state "TODO"
			   :template sr/fun/todo-link-act-date)
			  ("article"  
			   :keys "r"
			   :type entry
			   :headline "@reading"
			   :todo-state "TODO"
			   :template sr/fun/todo-link-act-date)
			  ("File link"  
			   :keys "f"
			   :type entry
			   :headline "@inbox"
			   :todo-state "TODO"
			   :clock-in t
			   :template sr/fun/todo-file-link-act-date)
			  ("External link"  
			   :keys "e"
			   :type entry
			   :headline "@reading"
			   :todo-state "TODO"
			   :template sr/fun/todo-file-ext-link-act-date)))
	      ("Notes" :keys "n"
               :file "~/my_org/notes.org"
               :prepend t
               :template sr/fun/note-passive
               :children (("Fast note"  
			   :keys "n"
			   :type entry	                       
			   :headline   "@Notes"
			   )
			  ("Mail note"
			   :template sr/fun/todo-link-passive
			   :keys "m"
			   :type entry
			   :headline "@Mail archive"
			   :file "~/my_org/notes.org")
			  ("DS Link note"  :keys "d"
			         :file "~/my_org/datascience.org"
                           :headline   "@Datascience @Notes"
                           :todo-state "TODO"
			   :template sr/fun/todo-link-passive)))
	      ;; ("Project" :keys "p"
              ;;  :file "~/my_org/project-tasks.org"
              ;;  :template sr/fun/todo-link-active)
	      )))

#+END_SRC

*** COMMENT Old Capture templates
    :PROPERTIES:
    :ID:       50f2b318-d9e6-4403-af24-875c662d888d
    :END:
    - Note taken on [2020-04-02 Thu 01:38] \\
      This section will be retired soon in favor of using the doct package.

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Task entry")
        ("tt" "Todo - Fast Now" entry (file+headline "~/my_org/todo-global.org" "@Inbox")
	 "** TODO %?")
        ("tj" "Todo -Job journal" entry (file+olp+datetree "~/my_org/ds-jobs.org" "Job Search Journal")
	 "** TODO %?")
        ("te" "Todo - Emacs" entry (file+headline "~/my_org/todo-global.org" "@Emacs notes and tasks")
         "** TODO %?")
        ("td" "Datascience inbox" entry (file+headline "~/my_org/datascience.org" "@Datascience @Inbox")
         "** TODO %?")
	("tm" "Mail Link Todo" entry (file+headline "~/my_org/todo-global.org" "@Inbox")
	 "** TODO Mail: %a ")
        ("l" "Link/Snippet" entry (file+headline "~/my_org/link_database.org" ".UL Unfiled Links")
         "** %? %a ")
        ("e" "Protocol info" entry ;; 'w' for 'org-protocol'
         (file+headline "~/my_org/link_database.org" ".UL Unfiled Links")
         "*** %a, \n %:initial")
        ("n" "Notes")
        ("ne" "Emacs note" entry (file+headline "~/my_org/todo-global.org" "@Emacs notes and tasks")
         "** %?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:")
        ("nn" "General note" entry (file+headline "~/my_org/notes.org" "@NOTES")
         "** %?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:")
        ("nd" "Datascience note" entry (file+headline "~/my_org/datascience.org" "@Datascience @Notes")
         "** %?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:")
        ("g" "BGR stuff")
        ("gi" "Inventory project")
        ("gil" "Daily log" entry (file+olp+datetree "~/my_org/bgr.org" "Inventory management Project") "** %? %i")
        ("C" "Commandment" entry (file+datetree "~/my_org/lifebook.org" "")
         "** %? %i :commandment:")
        ("J" "Job search" entry (file+headline "~/my_org/mrps_canjs.org" "MRPS #CANJS")
         "** TODO %? %i ")
        ("w" "Website" plain
         (function org-website-clipper)
         "* %a %T\n" :immediate-finish t)
        ("j" "Journal entry" entry (function org-journal-find-location)
         "* %(format-time-string org-journal-time-format) %?")
        ("i" "Whole article capture" entry
         (file+headline "~/my_org/full_article_archive.org" "" :empty-lines 1)
         "** %a, %T\n %:initial" :empty-lines 1)
        ("c" "Clocking capture")
        ("ct" "Clock TODO" entry (clock) "** TODO %?")
        ("cn" "Clock Note" entry (clock) "** %?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:")
        ("r" "Review note" entry (file+weektree "~/my_org/lifebook.org" "#Personal #Reviews")
         "** %?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:")
         ))
#+end_src

#+RESULTS:
| t  | Task entry        |       |                                                                 |                  |
| tt | Todo - Fast Now   | entry | (file+headline ~/my_org/todo-global.org @Inbox)                 | ** TODO %?       |
| tj | Todo -Job journal | entry | (file+olp+datetree ~/my_org/ds-jobs.org Job Search Journal)     | ** TODO %?       |
| te | Todo - Emacs      | entry | (file+headline ~/my_org/todo-global.org @Emacs notes and tasks) | ** TODO %?       |
| td | Datascience inbox | entry | (file+headline ~/my_org/datascience.org @Datascience @Inbox)    | ** TODO %?       |
| tm | Mail Link Todo    | entry | (file+headline ~/my_org/todo-global.org @Inbox)                 | ** TODO Mail: %a |
| l  | Link/Snippet      | entry | (file+headline ~/my_org/link_database.org .UL Unfiled Links)    | ** %? %a         |
| e  | Protocol info     | entry | (file+headline ~/my_org/link_database.org .UL Unfiled Links)    | *** %a,          |

*** Closing org-capture frame on abort
    :PROPERTIES:
    :ID:       1f79f2ff-2185-451d-8485-8f11c7b1de41
    :END:
- Note taken on [2019-03-13 Wed 07:35] \\
  This basically ensures a clean exit in case of aborting a capture, and
  also maintains buffer configuration on going ahead with the capture.
- Note taken on [2019-02-07 Thu 08:53]  \\
  Needs further review.

Source: [[http://stackoverflow.com/questions/23517372/hook-or-advice-when-aborting-org-capture-before-template-selection][emacs - hook or advice when aborting org-capture before template selection? - Stack Overflow]]

#+BEGIN_SRC emacs-lisp
(defadvice org-capture
    (after make-full-window-frame activate)
  "Advise capture to be the only window when used as a popup"
  (if (equal "emacs-capture" (frame-parameter nil 'name))
      (delete-other-windows)))

(defadvice org-capture-finalize
    (after delete-capture-frame activate)
  "Advise capture-finalize to close the frame"
  (if (equal "emacs-capture" (frame-parameter nil 'name))))

#+end_src

#+RESULTS:
: org-capture-finalize

*** TODO Controlling org-capture buffers
:PROPERTIES:
:ID:       FB3E4494-6AAA-4CA3-8A43-726E9E7143A7
:END:
- Note taken on [2019-03-13 Wed 08:01] \\
  This interferes with org-journal's capture format.

I dislike the way org-capture disrupts my current window, and shows me
the capture buffer, and the target buffer as well. I would prefer a
small pop up window, and then a revert back to the existing windows once
the capture is completed or aborted. However this does not seem possible
without modifying Org-mode's source code. This is a workaround described
at
https://stackoverflow.com/questions/54192239/open-org-capture-buffer-in-specific-Window
,which partially resolves the issue by enabling just a single capture
buffer.

#+BEGIN_SRC emacs-lisp :tangle no

(defun my-org-capture-place-template-dont-delete-windows (oldfun args)
  (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
    (apply oldfun args)))

(with-eval-after-load "org-capture"
  (advice-add 'org-capture-place-template :around 'my-org-capture-place-template-dont-delete-windows))
#+END_SRC

#+RESULTS:

** TODO Refile mechanics

*** Refile target level

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets
      '((nil :maxlevel . 3)
        (org-agenda-files :maxlevel . 2)))
#+END_SRC

*** General refiling settings

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq org-reverse-note-order t)
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

** Clocking mechanics
*** Continuous clocking + punch in/out approach
This approach and code snippets are adapted (and shamelessly borrowed)
from [[http://doc.norang.ca/org-mode.html][Bernt Hansen's approach]]. While Bernt follows a complex approach of
clocking into parent tasks - my current workflow favors clocking in
directly to set clocking headlines within projects, which are placed in
my org-projectile todo task file.

I have a default continuous clock after punching in (defined by org-id)
which will cater to general re-organisation, including capturing notes,
refiling , email etc. Other tasks or even mini projects can be directly
clocked into when required. These mini-projets are often just located
within my org-agenda files and not as a separate git repositoy. Every
time I am on my computer, whether on Emacs or not, I would like the
automatic clock to capture time, unless it is being clocked to a
specific project.

**** Defining default Task

#+BEGIN_SRC emacs-lisp
(defvar sr/var/organization-task-id "a8712a47-a648-477f-bdbf-d6004a0cc70b")

(defun sr/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find sr/var/organization-task-id 'marker)
    (org-clock-in '(16))))
#+END_SRC

#+RESULTS:
: sr/clock-in-organization-task-as-default

**** Punch in

Bernt Hansen shares that he has a default punch in and punch out task that keeps the clock on all day. I think this will work for me as well. Other than work and projects, most of the time I am tinkering with Emacs, or writing a journal note or trying to re-organise my stuff. By using a punch in and out, I can track how much time I am engaged with a computer, other than specific projects.

#+BEGIN_SRC emacs-lisp
(defun sr/punch-in (arg)
    (interactive "p")
  (setq sr/keep-clock-running t)
  (sr/clock-in-organization-task-as-default))
#+END_SRC

#+RESULTS:
: sr/punch-in

**** Punch Out

#+BEGIN_SRC emacs-lisp
(defun sr/punch-out ()
  (interactive)
  (setq sr/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out)))
#+END_SRC

#+RESULTS:
: sr/punch-out
**** Advising clock Out

#+BEGIN_SRC emacs-lisp
(defun sr/clock-out-maybe ()
  (when (and sr/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (sr/clock-in-organization-task-as-default)))

(add-hook 'org-clock-out-hook 'sr/clock-out-maybe 'append)
#+END_SRC

#+RESULTS:
| org-clock-remove-empty-clock-drawer | sr/clock-out-maybe |
**** Shortcuts for punch in and punch out

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<f9>") 'sr/punch-in)
(global-set-key (kbd "M-<f9>") 'sr/punch-out)
#+END_SRC

*** set idle timer for clocked task

#+BEGIN_SRC emacs-lisp
;; setting idle timer to 15 minutes
(setq org-clock-idle-time 15)
#+END_SRC
*** No zero clocks

#+BEGIN_SRC emacs-lisp
(setq org-clock-out-remove-zero-time-clocks t)
#+END_SRC
*** Clocking accuracy

This is borrowed off Bernt Hansen's method.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-clock-consistency-checks
      (quote (:max-duration "4:00"
              :min-duration 0
              :max-gap 0
              :gap-ok-around ("4:00"))))
#+END_SRC

*** org-mru-clock 
- [ ] use the functions included to capture to the current clocked tasks.
- [ ] method to jump to recent clocked task instead of starting the clock

This is a handy package to quickly select past tasks which have been clocked in.
#+BEGIN_SRC emacs-lisp
(use-package org-mru-clock
  :ensure t
  :bind (("M-s 1" . org-mru-clock-in)
          ("C-c C-x C-j" . org-mru-clock-select-recent-task))
  :init
  (setq org-mru-clock-how-many 100
        org-mru-clock-completing-read #'ivy-completing-read))
#+END_SRC

*** counsel-org-clock

Here is a comparison of counsel-org-clock and org-mru-clock: [[http://mbork.pl/2018-04-28_org-mru-clock][Marcin
Borkowski: 2018-04-28 org-mru-clock]]. As mentioned, one main advantage of
this package are the extension via ivy actions, though these can be
defined for =org-mru-clock=. Since I want to jump around previously
clocked tasks and examine them, these functions are useful to
me. However, the advantage of org-mru-clock is the list of all the
clocked tasks from the agenda.

#+BEGIN_SRC emacs-lisp
(use-package counsel-org-clock)

#+END_SRC

** Task state sequences

The difference between cancelled and failed would be that -

failed: things I could have planned and done, and it would have been a
good thing to do - but I did not. These kind of tasks are worth tracking
in a general sense, and that is why a failed tag would be useful. The
agenda can then be used to filter failed tasks to see whether there have
been repeated failures in the past.

Cancelled tasks - these are tasks that do not require to be done. The
reason could be that they were pre-emptive tasks that were superceded by
events, or simply deemed unnecessary at all levels. Such tasks would not
warrant a detailed review in general. 

Looking at Bernt Hansen's documentation - it also makes sense to have
some more key words for filtering. Summary of sequences that make sense
at this point: 

- TODO
- Next
- Done

This sequence will include a note as to why the state is being set. 

- Waiting
- Hold
- Cancelled
- Failed

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "FAILED(f@/!)"))))
#+END_SRC

** org-source-window split setup
:PROPERTIES:
:ID:       34171B48-C042-4CB4-959A-75DECE5F4DC2
:END:

#+BEGIN_SRC emacs-lisp
(setq org-src-window-setup 'split-window-right)
#+END_SRC

** Log done

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

** TODO Shortcuts (to be replaced via hydra)

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c d") 'org-time-stamp)
(global-set-key (kbd "M-s s") 'org-save-all-org-buffers)
#+END_SRC

** TODO org-ql
- Note taken on [2020-04-24 Fri 09:59] \\
  This is an interesting package that I want to master using
  effectively.

#+BEGIN_SRC emacs-lisp
(use-package org-ql
:straight t)

#+END_SRC


* Temporary package list
- Note taken on [2020-03-30 Mon 07:58] \\
  A lot of these are borrowed from scimax and will be slowly whittled down to the essentials.

#+BEGIN_SRC emacs-lisp
      ;; (use-package helm-bibtex)

      ;; Functions for working with hash tables
      (use-package ht)

      (use-package hy-mode)

      (use-package hydra
        :init
        (setq hydra-is-helpful t)
        :config
        (require 'hydra-ox))

      (use-package jedi)

      (use-package diminish)

    (use-package rainbow-mode)

    ;; Provides functions for working with files
    (use-package f)


    (use-package auto-complete
      :diminish auto-complete-mode
      :config (ac-config-default))

  (straight-use-package 'ggtags)
  (straight-use-package 'ibuffer-projectile)
#+END_SRC

: t

* Org journal
- Note taken on [2020-04-10 Fri 17:29] \\
  Scimax journal has the benefit of being well integrated with Scimax. The
  other benefit is being able to have journal files within a
  folder. However, for the journal to be included into GTD workflow and
  not just a scratch pad, the org-journal package offers a lot more out of
  the box. I see from the documentation that is also possible now to have
  a weekly, daily or yearly journal. In addition, the agenda integration
  simplifies things in terms of tracking what I am doing and then refiling
  the entries into appropriate locations.
- Note taken on [2020-02-22 Sat 10:58] \\
  I've been using scimax journal for several months now, as it has some
  defaults which suit my current workflow. However, org-journal does
  have a bunch of nifty features that I want to try and port to scimax.

** Base config


#+BEGIN_SRC emacs-lisp
(use-package org-journal
  :ensure t
  :defer t
  :config
  (defun org-journal-file-header-func (time)
    "Custom function to create journal header."
    (concat
     (pcase org-journal-file-type
       (`daily "#+TITLE: Daily Journal\n#+STARTUP: showeverything")
       (`weekly "#+TITLE: Weekly Journal\n#+STARTUP: folded")
       (`monthly "#+TITLE: Monthly Journal\n#+STARTUP: folded")
       (`yearly "#+TITLE: Yearly Journal\n#+STARTUP: folded"))))
  :custom
  (org-journal-dir "~/my_org/journal/")
  (org-journal-file-format "%Y/%m/%Y-%m-%d.org")
  (org-journal-enable-agenda-integration t)
  (org-journal-date-format "%A, %d %B %Y")
  (org-journal-file-type 'daily) ;; Set this explicitly, even though the default is daily.
  (org-journal-file-header 'org-journal-file-header-func)
  ;; Carrying over items though useful, sometimes results in duplication
  ;; and a loss of items, especially if journalling is carried out at
  ;; 12PM or when the day is changing.
  ;; New idea: Do not carry over clocked items. The remaining can be carried over
  ;; (org-journal-carryover-items "TODO")
  (org-journal-skip-carryover-drawers (list "LOGBOOK")))
#+end_src

#+RESULTS:
: t

** TODO org-capture template for Journal
 
#+BEGIN_SRC emacs-lisp :tangle no
(defun org-journal-find-location ()
  ;; Open today's journal, but specify a non-nil prefix argument in order to
  ;; inhibit inserting the heading; org-capture will insert the heading.
  (org-journal-new-entry t)
  ;; Position point on the journal's top-level heading so that org-capture
  ;; will add the new entry as a child entry.
  (goto-char (point-min)))
#+END_SRC

#+RESULTS:
: org-journal-find-location

** TODO Figure out easy encryption approach for org journal
:PROPERTIES:
:CREATED:  <2019-02-07 Thu 13:51>
:END:

* Crypto

** Basic crypto
:PROPERTIES:
   :ID:       B4CA6F66-7CD6-4905-A3B0-B4FCB763ADE9
   :END:

#+BEGIN_SRC emacs-lisp
(setq epa-file-encrypt-to "shreyas@fastmail.com")
#+end_src

#+RESULTS:
: Loaded crypto setup

** TEST org-crypt

#+BEGIN_SRC emacs-lisp :tangle no
(require 'org-crypt)
(add-to-list 'org-modules 'org-crypt)
                                        ; Encrypt all entries before saving
(org-crypt-use-before-save-magic)
;;(setq org-tags-exclude-from-inheritance (quote ("crypt")))
                                        ; GPG key to use for encryption. nil for symmetric encryption
;;(setq org-crypt-key nil)
(setq org-crypt-disable-auto-save t)
;;(setq org-crypt-tag-matcher "locked")

#+END_SRC

** Setting auth sources
   :PROPERTIES:
   :ID:       4c87f5e8-70ca-4719-a550-cfcd32076ee0
   :END:

This was prompted by this discussion https://emacs.stackexchange.com/questions/10207/how-to-get-org2blog-to-use-authinfo-gpg

I have modified it to my own file names.

#+BEGIN_SRC emacs-lisp
(require 'auth-source)
(setq auth-sources
      '((:source "~/.authinfo.gpg"
		 "~/.bitly-access.token.gpg")))

(setq epa-file-cache-passphrase-for-symmetric-encryption t)

#+END_SRC

#+RESULTS:
: t

* git related
** TODO Git gutter
:PROPERTIES:
   :ID:       a30f51f4-8c96-4e89-a692-9df36e5278a7
   :END:
- Note taken on [2019-02-07 Thu 09:30]  \\
  Started using this today. It is actually very convenient to quickly view the changes made in the document. There is a function to pop up the changes at that location. I need to learn more about using this tool effectively.

#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :config
    (global-git-gutter-mode 't)
    :diminish git-gutter-mode)
#+end_src

#+RESULTS:
: t

** magit settings
   :PROPERTIES:
   :ID:       55d1b554-f224-41fa-a4ae-5c2e2c1024be
   :END:

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init (setq magit-completing-read-function 'ivy-completing-read)
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-revert-buffers 'silent)
  (setq magit-process-find-password-functions '(magit-process-password-auth-source)))
#+END_SRC

#+RESULTS:
: t

** TODO Time machine for git
:PROPERTIES:
:ID:       eeb65d68-8c6d-4896-b9e4-cdf06bd3f81d
:END:
- Note taken on [2019-02-08 Fri 13:21] \\
  Launched by =M-x git-timemachine=, this lets you navigate through the commit history with a single key press! This is especially awesome for tracking changes to a particular snippet of code.
- Note taken on [2019-02-07 Thu 09:30]  \\
  Need to evaluate this. The purpose is for stepping through the history of a file recorded in git. This should be very interesting.

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :ensure t)
#+END_SRC

* PDF related
** STABLE PDF Tools
CLOSED: [2019-10-23 Wed 09:26]
:PROPERTIES:
:ID:       50da84f6-3fb3-4e30-b4b0-e293f3bb1b72
:END:
  - Note taken on [2019-10-23 Wed 09:26] \\
    This appears to be setup via scimax already. Disabling for now.
  - Note taken on [2019-02-18 Mon 14:30] \\
    [[https://emacs.stackexchange.com/questions/13314/install-pdf-tools-on-emacs-macosx][osx - Install Pdf-Tools on Emacs MacOSX - Emacs Stack Exchange]]
  

#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (custom-set-variables
   '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead in the mac
  (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
  (pdf-tools-install)
)

#+END_SRC

#+RESULTS:
: t

** org-noter
   :PROPERTIES:
   :ID:       adfce132-a15d-4b1e-bda5-7d1248a9c4d5
   :END:

#+BEGIN_QUOTE
Org-noter's purpose is to let you create notes that are kept in sync when you scroll through the document, but that are external to it - the notes themselves live in an Org-mode file. As such, this leverages the power of Org-mode (the notes may have outlines, latex fragments, babel, etc) acting like notes that are made inside the document. Also, taking notes is very simple: just press i and annotate away!

[[https://github.com/weirdNox][Goncalo Santos]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :ensure t
  :defer t
  :config
  (setq org-noter-set-auto-save-last-location t)
  )
#+end_src

#+RESULTS:

* Window, frame and buffer management
** winum
:PROPERTIES:
:ID:       80A2FA09-6120-44C4-A1B4-3FB3645C269A
:END:

This package makes it easy to switch between frames, and is particularly useful in a multi screen setup of emacs.

#+BEGIN_SRC emacs-lisp
(use-package winum
  :defer nil
  :init
  ;; ;;(define-key map (kbd "C-`") 'winum-select-window-by-number)
  ;; (define-key winum-keymap (kbd "C-0") 'winum-select-window-0-or-10)
  ;; (define-key winum-keymap (kbd "C-1") 'winum-select-window-1)
  ;; (define-key winum-keymap (kbd "C-2") 'winum-select-window-2)
  ;; (define-key winum-keymap (kbd "C-3") 'winum-select-window-3)
  ;; (define-key winum-keymap (kbd "C-4") 'winum-select-window-4)
  ;; (define-key winum-keymap (kbd "C-5") 'winum-select-window-5)
  ;; (define-key winum-keymap (kbd "C-6") 'winum-select-window-6)
  ;; (define-key winum-keymap (kbd "C-7") 'winum-select-window-7)
  ;; (define-key winum-keymap (kbd "C-8") 'winum-select-window-8)
  :ensure t
  :config
  ;;(winum-set-keymap-prefix (kbd "C-"))'
  (global-set-key (kbd "C-0") 'winum-select-window-0-or-10)
  (global-set-key (kbd "C-1") 'winum-select-window-1)
  (global-set-key (kbd "C-2") 'winum-select-window-2)
  (global-set-key (kbd "C-3") 'winum-select-window-3)
  (global-set-key (kbd "C-4") 'winum-select-window-4)
  (global-set-key (kbd "C-5") 'winum-select-window-5)
  (global-set-key (kbd "C-6") 'winum-select-window-6)
  (global-set-key (kbd "C-7") 'winum-select-window-7)
  (global-set-key (kbd "C-8") 'winum-select-window-8)
  (setq
   window-numbering-scope            'global
   winum-ignored-buffers             '(" *which-key*")
   winum-ignored-buffers-regexp      '(" \\*Treemacs-.*"))
  (winum-mode))
#+END_SRC

#+RESULTS:
: t
** Winner mode
:PROPERTIES:
:ID:       E7F63E2C-F5F7-4BF6-A5E3-C3E3AD82F4B7
:END:
Enabling winner mode. This is convenient to switch between temporary window configurations in conjunction with somewhat more permanent configurations in eyebrowse.

#+BEGIN_SRC emacs-lisp
(winner-mode)
#+END_SRC

#+RESULTS:
: t

** TEST eyebrowse
:PROPERTIES:
:ID:       2a73c1c9-9438-478a-881a-e2f61c803929
:END:

This has to be combined with desktop.el or some other method to enable persistence across sessions. However, this does work well for a single session.

#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :ensure t
  :config
  (setq eyebrowse-mode-line-separator " "
        eyebrowse-new-workspace t)
  (eyebrowse-mode 1)
  )
#+END_SRC

** TODO Bufler
:PROPERTIES:
:ID:       33032A84-CCB0-481A-A622-E30B1B823ED5
:END:

For the few occassions that I use the buffer-list command, I think the bufler
package provides a more functional interface. 

- [ ] explore the workspace configuration format. Can this restricted on a
  frame basis like eyebrowse? Does that even make sense? 

#+BEGIN_SRC emacs-lisp
(use-package bufler
  :straight (bufler :host github :repo "alphapapa/bufler.el")
:bind ("C-x C-b" . bufler-list))
#+END_SRC

** Frame settings
:PROPERTIES:
:ID:       5ACDA41D-D680-46ED-A1AD-28C614E9BBCB
:END:

I'm often running emacsclient with a daemon and have found that specific settings need to be set for each frame that is created, like the window size, and the visual fill column and line settings.

1. [X] Full screen and windows on Mac OS
2. [X] Enable global visual line mode and visual fill column mode. Apparently this was fixed without frame settings. 

#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . fullboth)) 
#+END_SRC

#+RESULTS:
: ((fullscreen . fullboth) (vertical-scroll-bars))

** crux
:PROPERTIES:
:ID:       BF85E4B9-231B-4FC6-BBB1-5C1A686F0E27
:END:

Crux has a handle re-open and root function that will open a file as root if the permissions are set so. 

#+BEGIN_SRC emacs-lisp
(use-package crux
  :straight t
  :defer 10
  :bind (("C-c C-s" . crux-sudo-edit)
         ("C-c C-r" . crux-eval-and-replace)
         ("C-c o" . crux-open-with))
  :config
  (progn
    (crux-reopen-as-root-mode)))

#+END_SRC

#+RESULTS:
: crux-open-with

* Emacs information
** which key
:PROPERTIES:
:ID:       5646C3F4-06BE-4754-8A7B-DED5EA8CD7B7
:END:

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer 5
    :diminish which-key-mode
    :straight t
    :config
    (which-key-mode))
#+END_SRC

: t

* Project management
** TODO org-projectile

- Note taken on [2019-02-07 Thu 08:42]  \\
  need to optimise further and convert to use-package style. Also need a way to capture Notes from projects, in addition to tasks.

Starting off with the basic configuration posted in org-projectile github repo.

#+BEGIN_SRC emacs-lisp
(use-package org-projectile
  :straight t
  :bind (("C-c n p" . org-projectile-project-todo-completing-read)
         ("C-c c" . org-capture))
  :config
  (setq org-projectile-projects-file
        "~/my_org/project-tasks.org")
  ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files))) ;; Not necessary as my task projects are a part of the main org folder
  (setq org-projectile-capture-template "* TODO %?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:\n")
  (push (org-projectile-project-todo-entry) org-capture-templates))
  

#+end_src

: org-capture

** projectile
- [ ] Add a variable for the emacs_meta directory.

#+BEGIN_SRC emacs-lisp
;; https://github.com/bbatsov/projectile
(use-package projectile
  :init (setq projectile-cache-file
	      (expand-file-name "emacs_meta/projectile.cache" org-directory)
	      projectile-known-projects-file
	      (expand-file-name "emacs_meta/projectile-bookmarks.eld" org-directory))
  :bind
  ("C-c pp" . projectile-switch-project)
  ("C-c pb" . projectile-switch-to-buffer)
  ("C-c pf" . projectile-find-file)
  ("C-c pg" . projectile-grep)
  ("C-c pk" . projectile-kill-buffers)
  ;; nothing good in the modeline to keep.
  :diminish ""
  :config
  (define-key projectile-mode-map (kbd "H-p") 'projectile-command-map)
  (setq projectile-sort-order 'recently-active)
  (projectile-global-mode))

#+END_SRC

* Knowledge management
** COMMENT org-brain

#+begin_src emacs-lisp 
  (use-package org-brain
    :straight (org-brain :type git :host github :repo "Kungsgeten/org-brain")
    ;; :straight (org-brain :type git :host github :repo "Kungsgeten/org-brain"
    ;; 			 :fork (:host github :repo "dustinlacewell/org-brain"))
    :after org
    :bind ("M-s v" . org-brain-visualize)
    :config
    ;; this unbinds all default org-brain bindings
    (setcdr org-brain-visualize-mode-map nil)
    (setq
     ;; org-brain-path (f-join path-of-this-repo "brain")
     org-brain-visualize-default-choices 'all
     org-brain-include-file-entries t
     org-brain-scan-for-header-entries t
     org-brain-file-entries-use-title t
     org-brain-show-full-entry t
     org-brain-show-text t
     org-id-track-globally t
     org-brain-vis-current-title-append-functions '(org-brain-entry-tags-string)
     org-brain-title-max-length 24)
    ;; (push '("b" "Brain" plain (function org-brain-goto-end)
    ;;         "* %i%?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:ID: [%(org-id-get-create)]\n:END:" :empty-lines 1
    ;;       org-capture-templates))
)
    ;; (add-hook 'org-brain-refile 'org-id-get-create)))
#+end_src

#+RESULTS:
: org-brain-visualize


*** Navigation Helpers

#+begin_src emacs-lisp
  (defun my/org-brain-visualize-parent ()
    (interactive)
    (when (org-brain-parents (org-brain-entry-at-pt)) (org-brain-visualize-parent (org-brain-entry-at-pt))))

  (defun my/org-brain-visualize-child (entry &optional all)
    (interactive (list (org-brain-entry-at-pt)))
    (when (org-brain-children entry)
      (let* ((entries (if all (org-brain-children entry)
                      (org-brain--linked-property-entries
                       entry org-brain-children-property-name)))
           (child (cond
                   ((equal 1 (length entries)) (car-safe entries))
                   ((not entries) (error (concat entry " has no children")))
                   (t (org-brain-choose-entry "Goto child: " entries nil t)))))
        (org-brain-visualize child))))

  (defun my/next-button-with-category (category)
    (let ((original-point (point))
          (first-result (text-property-search-forward 'brain-category category t t)))
      (when first-result
            (goto-char (prop-match-beginning first-result)))
      (when (eq original-point (point))
        (beginning-of-buffer)
        (let ((second-result (text-property-search-forward 'brain-category category t t)))
          (when second-result
            (goto-char (prop-match-beginning second-result))))
        (when (eq 0 (point))
          (goto-char original-point))
        )
      ))

  (defun my/previous-button-with-category (category)
    (let ((result (text-property-search-backwards 'brain-category category nil t)))))

  (defun my/next-brain-child ()
    (interactive)
    (my/next-button-with-category 'child))

  (defun my/next-brain-history ()
    (interactive)
    (my/next-button-with-category 'history))

  (defun my/avy-brain-jump (category)
    (avy-jump "\\<." :pred (lambda () (and (eq category (get-text-property (point) 'brain-category))
                                      (eq (- (point) 1) (button-start (button-at (point))))))
              :action (lambda (p) (goto-char (+ 1 p)) (push-button))))

  (defun my/avy-brain-jump-history ()
    (interactive)
    (my/avy-brain-jump 'history))

  (defun my/avy-brain-jump-child ()
    (interactive)
    (my/avy-brain-jump 'child))

  (defun my/avy-brain-jump-parent ()
    (interactive)
    (my/avy-brain-jump 'parent))

  (defun my/avy-brain-jump-friend ()
    (interactive)
    (my/avy-brain-jump 'friend))

  (defun my/avy-brain-jump-sibling ()
    (interactive)
    (my/avy-brain-jump 'sibling))
#+end_src

#+RESULTS:
: my/avy-brain-jump-sibling
** define-word

#+BEGIN_SRC emacs-lisp
(straight-use-package 'define-word)
#+END_SRC
** Wiktionary lookup
From [[https://www.reddit.com/r/emacs/comments/3yjzmu/dictionary_and_thesaurus_in_emacs/][Dictionary and thesaurus in Emacs : emacs]], this does not seem to
work. 

#+BEGIN_SRC emacs-lisp
(defun lookup-word (word)
  (interactive (list (save-excursion (car (ispell-get-word nil)))))
  (browse-url (format "http://en.wiktionary.org/wiki/%s" word)))
#+END_SRC
** merriam-webster
The advantage of this is that synonyms and other definitions are shown,
and they are apparently within Emacs. Note that it is possible and may
even be necessary to register an API key with merriam-webster. 

#+BEGIN_SRC emacs-lisp
(straight-use-package 'mw-thesaurus)
#+END_SRC

** COMMENT polybrain

#+name: polybrain
#+begin_src emacs-lisp :noweb t
  (use-package polybrain
    :defer nil
    :after org-brain
    :straight (polybrain :type git :host github :repo "dustinlacewell/polybrain.el")
    :bind (:map org-brain-visualize-mode-map
           ("m" . org-brain-visualize-mind-map)
           ("<tab>" . backward-button)
           ("S-<tab>" . forward-button)
           ("DEL" . org-brain-visualize-back)
           ("r" . org-brain-open-resource)
           ("v" . org-brain-visualize)

           ("i" . org-brain-pin)
           ("T" . org-brain-set-title)
           ("t" . org-brain-set-tags)
           ("d" . org-brain-delete-entry)
           ("R" . org-brain-visualize-add-resource)
           ("o" . org-brain-goto-current)
           ("O" . org-brain-goto)

           ("c" . org-brain-add-child)
           ("C" . org-brain-remove-child)

           ("p" . org-brain-add-parent)
           ("P" . org-brain-remove-parent)

           ("f" . org-brain-add-friendship)
           ("F" . org-brain-remove-friendship)

           ("e" . org-brain-annotate-edge)


           ("M-p" . my/avy-brain-jump-parent)
           ("M-c" . my/avy-brain-jump-child)
           ("M-s" . my/avy-brain-jump-sibling)
           ("M-f" . my/avy-brain-jump-friend)
           ("M-h" . my/avy-brain-jump-history)

           :map poly-brain-mode-map
           ("C-x C-s" . polybrain-save)
           ("<M-SPC>" . polybrain-switch))
    :config 
    (require 'polybrain))
#+end_src

#+RESULTS: polybrain
: polybrain-switch

** COMMENT deflayer

This will help with different settings for different brains. Eventually, it can
also be used for different settings for say the org agenda or other
components. 

#+BEGIN_SRC emacs-lisp 

  (use-package deflayer
    :straight (deflayer :type git :host github :repo "dustinlacewell/deflayer.el")
    :config
    ;; for some reason map seems to be required first. 
    (require 'map)
    (require 'deflayer))

  (deflayer sr-brain org-brain
    ((org-brain-path (sr/fun/org-dir "brain"))))


  (deflayer episteme org-brain
    ((org-brain-path (sr/fun/project-dir "episteme/brain/"))))

#+END_SRC

#+RESULTS:
: deflayer-activate-episteme

** org-web-tools
:PROPERTIES:
:ID:       CE6402C3-BDF9-4B59-A01A-DC7EF461CC5A
:END:

This package contains a bunch of useful tools which can cut down a lot of work

#+BEGIN_SRC emacs-lisp
(use-package org-web-tools
:defer 5
:ensure nil
:config
(global-set-key (kbd "H-y") 'org-web-tools-insert-link-for-url))
#+END_SRC

** org-download
:PROPERTIES:
:ID:       A61C506A-FE8A-4051-ACCC-A2F28E8FE4EB
:END:

#+BEGIN_SRC emacs-lisp
(use-package org-download
  :defer nil
  :ensure t
  ;;:after org
  :config
    ;; Drag-and-drop to `dired`
  (add-hook 'dired-mode-hook 'org-download-enable)
  ;; For some reason this still seems required, despite using defer nil
  (require 'org-download)
  )
#+END_SRC

** COMMENT Epubs in emacs 

#+BEGIN_SRC emacs-lisp
(use-package nov
:straight t
:config
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC
* Dired
:PROPERTIES:
:ID:       62B42FB8-61E2-4EFB-A51A-D6BA13E31EB2
:END:

- Note taken on [2020-03-28 Sat 15:10] \\
  Apparently, dired is not available in to be installed via MELPA.

These are settings dervied from the configuration of [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][Angry Bacon]]. Also adapted from a [[http://pragmaticemacs.com/emacs/tree-style-directory-views-in-dired-with-dired-subtree/][pragmatic emacs article]].

Note that =C-x C-q= for =dired-toggle-read= only.

#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
:straight t
:config
(bind-keys :map dired-mode-map
           ("i" . dired-subtree-insert)
             (";" . dired-subtree-toggle)))

;; Show directories first
 (defun me/dired-directories-first ()
    "Sort dired listings with directories first before adding marks."
    (save-excursion
      (let (buffer-read-only)
        (forward-line 2)
        (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
      (set-buffer-modified-p nil)))

(advice-add 'dired-readin :after #'me/dired-directories-first)

(add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode) 
			     (setq visual-fill-column-mode 'nil)))

(setq dired-auto-revert-buffer t
   dired-dwim-target t
   dired-hide-details-hide-symlink-targets nil
   dired-listing-switches "-alh"
   dired-ls-F-marks-symlinks nil
   dired-recursive-copies 'always)

#+END_SRC

#+RESULTS:
: always
* Treemacs [0/3]
  :PROPERTIES:
  :ID:       2571745f-97de-4fa9-8d56-0e6599bdc489
  :CREATED:  [2020-01-21 Tue]
  :PLANNED:
  :END:

- [ ] Learn about treemacs projectile
- [ ] Learn about treemacs-magit

As such most of these

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t

  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs
          (if (executable-find "python3") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          ttreemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  "~/my_org/emacs_meta/.treemacs-persist"
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    ;;(treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("M-s t t" . treemacs)
        ("M-s t w" . treemacs-switch-workspace)
        ;; ("C-x t 1"   . treemacs-delete-other-windows)
        ;; ("C-x t t"   . treemacs)
        ;; ("C-x t B"   . treemacs-bookmark)
        ;; ("C-x t C-t" . treemacs-find-file)
        ;; ("C-x t M-t" . treemacs-find-tag)
        )
  )

#+END_SRC

#+RESULTS:
: treemacs-switch-workspace

#+BEGIN_SRC emacs-lisp
;; (use-package treemacs-evil
;;   :after treemacs evil
;;   :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC

#+RESULTS:

* Selection, search, navigation and jumps
** smex
:PROPERTIES:
:ID:       09F22945-25AA-4DAE-B1E0-AD309E6FA1DD
:END:
#+BEGIN_SRC emacs-lisp
(straight-use-package 'smex)
#+END_SRC

** Counsel 
:PROPERTIES:
:ID:       4F05CB2A-C98A-433E-AF50-D120F4376192
:END:
- Note taken on [2020-03-30 Mon 18:08] \\
  Apparently, swiper, counsel, ivy are contained in the same repository and not as separate packages. Though I would prefer using counsel for everything with the minibuffer style, rather than helm - there are undoubtedly several advantages and built-in features in helm whereas counsel would need these carefully constructed. For example, it appears that the multiple select and action operation has to be separately defined for =counsel-find-file= and =counsel-switch-buffer=. While =counsel-M-x= seems generally more responsive than =helm-M-x=, helm offers a useful partition of the results in general based on recent commands/files and others. =helm-apropos= offers a list of commands and variables 

This configuration is picked up from scimax.

- [X] Figure out which of these functions benefit from helm rather than counsel.
  - [X] helm-switch-buffer
  - [X] helm-find-file
  - [X] helm-appropos

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :straight t
    :init
    (require 'ivy)
    (require 'smex)
    ;; switching to using helm for projectile completion
    ;;(setq projectile-completion-system 'ivy)
    (setq ivy-use-virtual-buffers t)
    (define-prefix-command 'counsel-prefix-map)
    (global-set-key (kbd "H-c") 'counsel-prefix-map)

    ;; default pattern ignores order.
    (setf (cdr (assoc t ivy-re-builders-alist))
          'ivy--regex-ignore-order)
    :bind
    (;; ("M-x" . counsel-M-x)
     ;; ("C-x b" . ivy-switch-buffer)
     ;; ("C-x C-f" . counsel-find-file)
     ("C-x l" . counsel-locate)
     ;; ("C-h f" . counsel-describe-function)
     ("C-h v" . counsel-describe-variable)
     ("C-h i" . counsel-info-lookup-symbol)
     ("H-c r" . ivy-resume)
     ("H-c l" . counsel-load-library)
     ("H-c f" . counsel-git)
     ("H-c g" . counsel-git-grep)
     ("H-c a" . counsel-ag)
     ("H-c p" . counsel-pt))
    :diminish ""
    :config
    (progn
      (counsel-mode)
      (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
      (define-key ivy-minibuffer-map (kbd "M-<SPC>") 'ivy-dispatching-done)

      ;; C-RET call and go to next
      (define-key ivy-minibuffer-map (kbd "C-<return>")
        (lambda ()
          "Apply action and move to next/previous candidate."
          (interactive)
          (ivy-call)
          (ivy-next-line)))

      ;; M-RET calls action on all candidates to end.
      (define-key ivy-minibuffer-map (kbd "M-<return>")
        (lambda ()
          "Apply default action to all candidates."
          (interactive)
          (ivy-beginning-of-buffer)
          (loop for i from 0 to (- ivy--length 1)
                do
                (ivy-call)
                (ivy-next-line)
                (ivy--exhibit))
          (exit-minibuffer)))

      ;; s-RET to quit
      (define-key ivy-minibuffer-map (kbd "s-<return>")
        (lambda ()
          "Exit with no action."
          (interactive)
          (ivy-exit-with-action
           (lambda (x) nil))))

      ;; Show keys
      (define-key ivy-minibuffer-map (kbd "?")
        (lambda ()
          (interactive)
          (describe-keymap ivy-minibuffer-map)))

      (define-key ivy-minibuffer-map (kbd "<left>") 'ivy-backward-delete-char)
      (define-key ivy-minibuffer-map (kbd "<right>") 'ivy-alt-done)
      (define-key ivy-minibuffer-map (kbd "C-d") 'ivy-backward-delete-char)))
#+END_SRC

#+RESULTS:
: counsel-pt

** ripgrep

The ripgrep package for the system can be installed via brew or possibly
apt-get on Linux systems.

#+BEGIN_SRC sh :tangle no
brew install ripgrep
#+END_SRC

However, it appears an emacs package is required to interface with the
system installed ripgrep package via Emacs. In addition, there is a
separate helm-rg package to use helm for the interface. The latter is
preferred.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'ripgrep)
#+END_SRC

** Expand region package
   :PROPERTIES:
   :ID:       046c8e8c-a6c0-451e-9e7e-61de54ab0945
   :END:
- Note taken on [2019-02-07 Thu 09:27]  \\
  Explore how this works, and customise it.

This can be set to intelligently expand the selection of text. For example, Using the designated binding, the first expansionh would cover say the content between quotes, and then expand outwards.

#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-=" . er/expand-region))

(message "Loaded easier selection")
#+end_src

#+RESULTS:
: Loaded easier selection
** Hippie Expand
:PROPERTIES:
:ID:       C2CE1B2C-9935-4D7B-BEA2-96AC344360DE
:END:

This is a nifty little package that makes expansion of selection at point more customised, and is handy for expanding into variable names and function names in the same buffer, especially for a long snippet of code.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") (make-hippie-expand-function
			     '(try-expand-dabbrev-visible
			       try-expand-dabbrev
			       try-expand-dabbrev-all-buffers) t))
#+END_SRC

#+RESULTS:
| lambda | (arg) | Try to expand text before point, using the following functions: |
** Browse kill ring
:PROPERTIES:
:ID:       91183327-CDC5-482B-8A21-303467ED1AE3
:END:
- Note taken on [2020-03-30 Mon 18:20] \\
  This command allows an interactive browsing and insertion from the kill ring. However it does not allow a search. For enabling a search of the kill ring in addition to marking and insertion =helm-king-ring= can be used. However the latter method does not offer a preview of the material being yanked.

#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring
:bind ("M-y" . browse-kill-ring)
  :ensure t
)
#+END_SRC

#+RESULTS:
: browse-kill-ring
** Multiple Cursors
:PROPERTIES:
:ID:       06039005-b802-43bd-92f5-05439cebc759
:END:

#+begin_src emacs-lisp
(use-package multiple-cursors
  :ensure t
  :config
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  )

(message "Loaded MC")
#+end_src

#+RESULTS:
: Loaded MC

** Undo tree
:PROPERTIES:
:ID:       1E24E30A-6578-4AA4-8655-4E6EED49ECE5
:END:
Reference: https://github.com/alhassy/emacs.d
This is an indispensable tool. The additional options of showing the timestamp and diff would be.

#+BEGIN_SRC emacs-lisp
;; Allow tree-semantics for undo operations.
(use-package undo-tree
  :diminish undo-tree-mode                      ;; Don't show an icon in the modeline
  :config
    ;; Always have it on
    (global-undo-tree-mode)

    ;; Each node in the undo tree should have a timestamp.
    (setq undo-tree-visualizer-timestamps t)

    ;; Show a diff window displaying changes between undo nodes.
;; Execute (undo-tree-visualize) then navigate along the tree to witness
;; changes being made to your file live!
)
#+END_SRC

#+RESULTS:
: t
** yasnippet and ivy-yasnippet
:PROPERTIES:
:ID:       2BEDC957-9D0A-4BEC-AE97-CCD186A98724
:END:

- [ ] setup the shortcut 'H-,' as desinged in scimax default for ivy-yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :straight t
    :config
    (setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/.emacs.d/private-snippets/")))
  (yas-global-mode 1))

(use-package ivy-yasnippet
  :bind ("M-s i" . ivy-yasnippet))
#+END_SRC

#+RESULTS:
: ivy-yasnippet

** swiper
:PROPERTIES:
:ID:       2DEA32C7-F18C-4DC0-B924-450C45F351A6
:END:
- Note taken on [2020-03-30 Mon 18:05] \\
  I had this to counsel-swiper-or-grep. However at times, the grep result would show as a binary file even though the file was clearly not binary. I have switched to using only swiper without counsel.

#+BEGIN_SRC emacs-lisp
(use-package swiper
  :bind
  ("C-s" . swiper)
  ("H-s" . swiper-all)
  :diminish ivy-mode
  :config
  (ivy-mode))
#+END_SRC

#+RESULTS:
: swiper-all

** avy
:PROPERTIES:
:ID:       F9CBA6DB-15F3-45E9-94AB-5E92C3F62AB3
:END:

#+BEGIN_SRC emacs-lisp
(use-package avy)
#+END_SRC
** Super and Hyper key setting
:PROPERTIES:
:ID:       97DFBDF2-BD73-4DAA-9CA0-2A1D39855CF6
:END:

#+BEGIN_SRC emacs-lisp
(if (system-type-is-darwin)
    (progn
      (setq mac-left-command-modifier 'super)
      (setq mac-right-option-modifier 'hyper)))
#+END_SRC
** Helm packages and functions

I am of the opinion that both helm and counsel/ivy have their advantages
for different workflows and mindsets. My configuration will attempt to
use both based on what I find useful.

*** Helm notes

Despite using these command frequently, I find that I forget some of
them. This is an attempt to note down useful commands for ready
reference.

=C-u C-c C-k= using helm-find-file will copy the absolute path of the
file to the kill ring. Not using the modifier will copy only the
filename. =C-c C-i= or =C-c TAB= for copying the path to the current
buffer.

While browsing directories, use =C-j= to go into a directory and =C-l= to
move up.

=C-space= to select multiple files and open them with =RET=. This is useful when
switching to a project. Add a modifier =C-u RET= to open the files in an
alternate vertically split buffers. 

Find file as root =C-c r= does not require the Tramp syntax!

*** Setting helm for some basic functions
:PROPERTIES:
:ID:       BC827A7A-D190-4CC6-95D5-0C80740CB94C
:END:

#+BEGIN_SRC emacs-lisp
(use-package helm
:config
(helm-mode 1)
(require 'helm-config)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-h f") 'helm-apropos)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-c y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x C-r") 'helm-recentf))

#+END_SRC

: helm-find-file

*** General settings for helm

There are some useful tips in the reddit thread [[https://www.reddit.com/r/emacs/comments/bsc8pc/why_did_you_stop_using_helm/][Why did you stop using
Helm? : emacs]]. The [[https://tuhdo.github.io/helm-intro.html][helm-intro]] is a good resource. The documentation is
the best guide as always.

#+BEGIN_SRC emacs-lisp
;; Don't have helm do window management for me
(setq helm-display-function 'pop-to-buffer)

;; optimising highlight speed of token matches
(setq helm-mp-highlight-delay 0.3)

;; from the reddit thread above
(setq helm-use-undecorated-frame-option t)
(setq helm-display-buffer-reuse-frame t)

;; These are required to prevent crazy jumps in the helm buffer size
(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)

(setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-echo-input-in-header-line t)

#+END_SRC

*** Helm bibtex and projectile
#+BEGIN_SRC emacs-lisp
(straight-use-package 'helm-bibtex)

(straight-use-package 'helm-projectile)
#+END_SRC

*** helm-ag
:PROPERTIES:
:ID:       B4E26FDE-BA84-4BDB-AA94-B4706E47C64B
:END:

- [ ] [[https://emacs.stackexchange.com/questions/30204/how-to-tell-helm-to-ignore-certain-files][How to tell Helm to ignore certain files? - Emacs Stack Exchange]]
  - This needs to be explored further for code project files and the
    specific options needed for different situations. I need to expand
    on this with more clarity.
  - One method of ignoring certain patterns is using --ignore=*.csv
    - Some specific patterns could be saved as prefixed options and
      added as optional search functions depending on the occassion. 

#+BEGIN_QUOTE
I'm not sure when this functionality was introduced, but you can exclude
files from helm-find-files by setting helm-ff-skip-boring-files to t and
making sure the ignored pattern is on helm-boring-file-regexp-list. From
its documentation:


   > Non--nil to skip files matching regexps in
   helm-boring-file-regexp-list. This take effect in helm-find-files and
   file completion used by helm-mode i.e helm-read-file-name.

And the documentation for helm-boring-file-regexp-list says that by
default it is built from completion-ignored-extensions.
#+END_QUOTE


Another option is to use [[https://github.com/emacsorphanage/helm-ag#helm-ag-use-agignoredefault-nil][.agignore]] at the project root. This is set to
nil by default. This kind of ignore option needs to be used carefully,
or it will exclude important results. 


#+BEGIN_SRC emacs-lisp
(straight-use-package 'helm-ag)
(setq helm-ag-use-agignore 1)
#+END_SRC

*** helm-rg

#+BEGIN_SRC emacs-lisp
(straight-use-package 'helm-rg)
#+END_SRC

*** helm-org-rifle 
:PROPERTIES:
:ID:       510AB91F-1520-487B-9CE3-FF4C69AC09FA
:END:

#+BEGIN_SRC emacs-lisp
(use-package helm-org-rifle
  :straight t
  :config
  (global-set-key (kbd "C-c C-w") #'helm-org-rifle--refile))
#+END_SRC

*** Helm swoop
:PROPERTIES:
:ID:       6539A414-F78C-4926-86D3-12C076D567FF
:END:

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure t
  :bind (("M-i" . helm-swoop)
         ("M-I" . helm-swoop-back-to-last-point)
         ("C-c M-i" . helm-multi-swoop))
  :config
  ;; When doing isearch, hand the word over to helm-swoop
  (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;; From helm-swoop to helm-multi-swoop-all
  (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;; Save buffer when helm-multi-swoop-edit complete
  (setq helm-multi-swoop-edit-save t
        ;; If this value is t, split window inside the current window
        helm-swoop-split-with-multiple-windows t
        ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
        helm-swoop-split-direction 'split-window-vertically
        ;; If nil, you can slightly boost invoke speed in exchange for text color
        helm-swoop-speed-or-color nil))
#+END_SRC

: helm-multi-swoop
** TODO Projectile and helm
Since implementing the Doom GC optimisation, the slight lag I
experienced while typing really fast in helm commands has
subsided. /However, there seems to be a slight lag in calling
describe-variable and describe-functions, which was not there
earlier/. The solution I am currently using is to switch to
=helm-appropos=, which apparently has some kind of mechanism to concat
large lists of commands, variables, functions. I think there is some
benefit in switching over to Helm for general options. This is an
experimental section to try this out. The article [[https://tuhdo.github.io/helm-projectile.html][Exploring large
projects with Projectile and Helm Projectile]] contains a large number of
tips in setting up projectile with helm.

#+BEGIN_SRC emacs-lisp
(setq projectile-completion-system 'helm)
(setq projectile-indexing-method 'alien)
(setq projectile-switch-project-action 'helm-projectile)
(helm-projectile-on)
#+END_SRC

** COMMENT ace-isearch
- Note taken on [2020-04-04 Sat 16:46] \\
  While the concept is clear, I am not yet sure how the function is
  getting activated or whether it will work as I think it might. I am
  generally more comfortable using a specific function for a specific
  purpose. THis requires further investigation.

#+BEGIN_SRC emacs-lisp
(use-package ace-isearch
:after helm-swoop avy
:config
(global-ace-isearch-mode +1))
#+END_SRC
** Copy simple without breaks

#+BEGIN_SRC emacs-lisp
;; http://emacs.stackexchange.com/questions/1051/copy-region-from-emacs-without-newlines
;; https://gist.github.com/xahlee/d364cbbff9b3abd12d29
(defun my-copy-simple (&optional beg end)
  "Save the current region (or line) to the `kill-ring' after stripping extra whitespace and new lines"
  (interactive
   (if (region-active-p)
       (list (region-beginning) (region-end))
     (list (line-beginning-position) (line-end-position))))
  (let ((my-text (buffer-substring-no-properties beg end)))
    (with-temp-buffer 
      (insert my-text)
      (goto-char 1)
      (while (looking-at "[ \t\n]")
        (delete-char 1))
      (let ((fill-column 9333999))
        (fill-region (point-min) (point-max)))
      (kill-region (point-min) (point-max)))))
#+END_SRC


* Email
** TODO mu4e via use-package
:PROPERTIES:
:ID:       658B1502-41E1-487A-B0CF-5F1D1A366368
:END:

-  [ ] Transfer all the settings for mu4e into a use-package layout with hooks.

#+BEGIN_SRC emacs-lisp
(use-package mu4e
:straight t
:ensure nil
:hook
  ((mu4e-compose-mode . (lambda ()
                          (visual-line-mode)
                          (use-hard-newlines -1)
                          (flyspell-mode)
			  (turn-off-auto-fill)))
   (mu4e-view-mode . (lambda() ;; try to emulate some of the eww key-bindings
                       (local-set-key (kbd "<tab>") 'shr-next-link)
                       (local-set-key (kbd "<backtab>") 'shr-previous-link)
		       (fill-paragraph)
		       (visual-line-mode)))
   (mu4e-headers-mode . (lambda ()
                          (interactive)
                          (setq mu4e-headers-fields
                                `((:human-date . 25) ;; alternatively, use :date
                                  (:flags . 6)
                                  (:from . 22)
                                  (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject
                                  (:size . 7))))))
  :config
  (require 'mu4e)
  (require 'mu4e-contrib)
  (require 'org-mu4e)

  (setq
   mail-user-agent 'mu4e-user-agent
   mue4e-headers-skip-duplicates  t
   mu4e-view-show-images t
   mu4e-view-show-addresses 't
   mu4e-compose-format-flowed t
   ;;mu4e-update-interval 200
   message-ignored-cited-headers 'nil
   mu4e-date-format "%y/%m/%d"
   mu4e-headers-date-format "%Y/%m/%d"
   mu4e-change-filenames-when-moving t
   mu4e-attachments-dir "~/Downloads/Mail-Attachments/"
   mu4e-maildir (expand-file-name "~/my_mail/fmail")
   message-citation-line-format "On %Y-%m-%d at %R %Z, %f wrote..."
   mu4e-index-lazy-check t
   ;; After Years. I've finally found you.
   mu4e-compose-dont-reply-to-self t
   mu4e-headers-auto-update t
   message-kill-buffer-on-exit t
   mu4e-update-interval 300
   )

  ;; mu4e email refiling loations
  (setq
   mu4e-refile-folder "/Archive"
   mu4e-trash-folder  "/Trash"
   mu4e-sent-folder   "/Sent"
   mu4e-drafts-folder "/Drafts")

  ;; setup some handy shortcuts
  (setq mu4e-maildir-shortcuts
	'(("/INBOX"   . ?i)
	  ("/Sent"    . ?s)
	  ("/Archive" . ?a)
	  ("/Trash"   . ?t)))

  ;;store link to message if in header view, not to header query
  (setq org-mu4e-link-query-in-headers-mode nil
	org-mu4e-convert-to-html t) ;; org -> html


  (autoload 'mu4e "mu4e" "mu for Emacs." t)

  ;; Earlier Config for sending email
  ;; (setq
  ;;  message-send-mail-function 'message-send-mail-with-sendmail
  ;;  send-mail-function 'sendmail-send-it
  ;;  message-kill-buffer-on-exit t
  ;;  )

  ;; allow for updating mail using 'U' in the main view:
  (setq mu4e-get-mail-command  "mbsync -q fins")

  ;; Stolen from https://github.com/djcb/mu/issues/1431 and found thanks to parsnip in #emacs
  (defun my-mu4e-mbsync-current-maildir (msg)
    (interactive)
    (let* ((maildir (downcase (substring (plist-get msg :maildir) 1)))
	   (mu4e-get-mail-command (format "mbsync %s" maildir)))
      (mu4e-update-mail-and-index t)))

  ;; Enabling view in browser for HTML heavy emails that don't render well
  (add-to-list 'mu4e-view-actions
	       '("ViewInBrowser" . mu4e-action-view-in-browser) t)
  (add-to-list 'mu4e-view-actions
	       '("mbsync maildir of mail at point" . my-mu4e-mbsync-current-maildir) t)

  (setq mu4e-view-use-gnus t)

  ;; Don't keep asking for confirmation for every action
  (defun my-mu4e-mark-execute-all-no-confirm ()
    "Execute all marks without confirmation."
    (interactive)
    (mu4e-mark-execute-all 'no-confirm))
  ;; mapping x to above function
  (define-key mu4e-headers-mode-map "x" #'my-mu4e-mark-execute-all-no-confirm)

  ;; source: http://matt.hackinghistory.ca/2016/11/18/sending-html-mail-with-mu4e/

  ;; this is stolen from John but it didn't work for me until I
  ;; made those changes to mu4e-compose.el
  (defun htmlize-and-send ()
    "When in an org-mu4e-compose-org-mode message, htmlize and send it."
    (interactive)
    (when
	(member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
      (org-mime-htmlize)
      (org-mu4e-compose-org-mode)
      (mu4e-compose-mode)
      (message-send-and-exit)))

  ;; This overloads the amazing C-c C-c commands in org-mode with one more function
  ;; namely the htmlize-and-send, above.
  (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)


  ;; Config for queued sending of emails
  ;; Reference  :https://vxlabs.com/2017/02/07/mu4e-0-9-18-e-mailing-with-emacs-now-even-better/https://vxlabs.com/2017/02/07/mu4e-0-9-18-e-mailing-with-emacs-now-even-better/

  ;; when switch off queue mode, I still prefer async sending
  (use-package async
    :ensure t
    :defer nil
    :config (require 'smtpmail-async))

  (setq
   send-mail-function 'async-smtpmail-send-it
   message-send-mail-function 'async-smtpmail-send-it
   ;; replace with your email provider's settings
   smtpmail-smtp-server "smtp.fastmail.com"
   smtpmail-smtp-service 465
   smtpmail-stream-type 'ssl
   ;; if you need offline mode, set to true -- and create the queue dir
   ;; with 'mu mkdir', i.e:
   ;; mu mkdir /home/user/Mail/queue && touch ~/Maildir/queue/.noindex
   ;; https://www.djcbsoftware.nl/code/mu/mu4e/Queuing-mail.html
   smtpmail-queue-mail  nil
   smtpmail-queue-dir  (expand-file-name "~/my_mail/fmail/Queue/cur")))

#+END_SRC

#+RESULTS:
| (lambda nil (interactive) (setq mu4e-headers-fields `((:human-date . 25) (:flags . 6) (:from . 22) (:thread-subject , (- (window-body-width) 70)) (:size . 7)))) | (lambda nil (interactive) (setq mu4e-headers-fields (cons '(:human-date . 25) (cons '(:flags . 6) (cons '(:from . 22) (cons (cons ':thread-subject (- (window-body-width) 70)) '((:size . 7)))))))) | #[0 \301\300!\210\302\211\207 [bookmark-make-record-function make-local-variable mu4e-view-bookmark-make-record] 2] |

** COMMENT mu4e alerts
:PROPERTIES:
:ID:       C488CFF8-F77B-4AF6-98ED-9CF5BDC792F2
:END:

#+BEGIN_SRC emacs-lisp
(use-package mu4e-alert
  :config
  (when (executable-find "notify-send")
    (mu4e-alert-set-default-style 'libnotify))
  ;; This is required for mac-os which does not ship with libnotif
(when (executable-find "terminal-notifier")
    (mu4e-alert-set-default-style 'notifier))
  :hook
  ((after-init . mu4e-alert-enable-notifications)
   (after-init . mu4e-alert-enable-mode-line-display)))
#+END_SRC

** TEST org-msg
:PROPERTIES:
:ID:       DA714BCF-BB6B-478C-92B2-6D8388961019
:END:

*** Basic setup
:PROPERTIES:
:ID:       03261375-9996-490F-BE46-31D3A93E62A4
:END:

#+BEGIN_SRC emacs-lisp
(use-package org-msg
  :ensure t
  :defer 5
  :config

  (require 'org-msg)
  (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil"
	org-msg-startup "hidestars indent inlineimages"
	org-msg-greeting-fmt "\nHi %s,\n\n"
	org-msg-greeting-name-limit 3
	org-msg-signature "

 Regards,

 ,#+begin_signature
 -- \\\\
 ,*Shreyas Ragavan* \\\\
 E: shreyas@fastmail.com \\\\
 W: https://shreyas.ragavan.co \\\\
 M: +1 647-671-1851 \\\\
 ,#+end_signature")
  (org-msg-mode))
;; Attempt to solve the problem of forwarding emails especailly with attachments.
;(advice-add '(org-msg-mode) :after #'mu4e-compose-forward))
#+END_SRC

#+RESULTS:
: t

*** Compose CSS
:PROPERTIES:
:ID:       531433C5-5BE0-4377-BBC0-1D6B8EDCA686
:END:
- Note taken on [2020-03-25 Wed 23:33] \\
  For some reason, the basic CSS does not look good. Even though some customisation is done below, it does not appear the font choice is respected. In any case, the size and line height are now acceptable.
#+BEGIN_SRC emacs-lisp
(defconst sr/org-msg-style
  (let* ((font-family '(font-family . "\"Calibri\""))
	 (font-size '(font-size . "12pt"))
	 (font `(,font-family ,font-size))
	 (line-height '(line-height . "1.5em"))
	 (bold '(font-weight . "bold"))
	 (theme-color "#0071c5")
	 (color `(color . ,theme-color))
	 (table `(,@font (margin-top . "0px")))
	 (ftl-number `(,@font ,color ,bold (text-align . "left")))
	 (inline-modes '(asl c c++ conf cpp csv diff ditaa emacs-lisp
			     fundamental ini json makefile man org plantuml
			     python sh xml R))
	 (inline-src `((color . ,(face-foreground 'default))
		       (background-color . ,(face-background 'default))))
	 (code-src
	  (mapcar (lambda (mode)
		    `(code ,(intern (concat "src src-" (symbol-name mode)))
			   ,inline-src))
		  inline-modes)))
  `((del nil (,@font (color . "grey") (border-left . "none")
	      (text-decoration . "line-through") (margin-bottom . "0px")
	      (margin-top . "10px") (line-height . "11pt")))
    (a nil (,color))
    (a reply-header ((color . "black") (text-decoration . "none")))
    (div reply-header ((padding . "3.0pt 0in 0in 0in")
		       (border-top . "solid #e1e1e1 1.0pt")
		       (margin-bottom . "20px")))
    (span underline ((text-decoration . "underline")))
    (li nil (,@font ,line-height (margin-bottom . "0px")
	     (margin-top . "2px")))
    (nil org-ul ((list-style-type . "square")))
    (nil org-ol (,@font ,line-height (margin-bottom . "0px")
		 (margin-top . "0px") (margin-left . "30px")
		 (padding-top . "0px") (padding-left . "5px")))
    (nil signature (,@font (margin-bottom . "20px")))
    (blockquote nil ((padding-left . "5px") (margin-left . "10px")
		     (margin-top . "20px") (margin-bottom . "0")
		     (border-left . "3px solid #ccc") (font-style . "italic")
		     (background . "#f9f9f9")))
    (code nil (,font-size (font-family . "monospace") (background . "#f9f9f9")))
    ,@code-src
    (nil linenr ((padding-right . "1em")
		 (color . "black")
		 (background-color . "#aaaaaa")))
    (pre nil ((line-height . "12pt")
	      ,@inline-src
	      (margin . "0px")
	      (font-size . "9pt")
	      (font-family . "monospace")))
    (div org-src-container ((margin-top . "10px")))
    (nil figure-number ,ftl-number)
    (nil table-number)
    (caption nil ((text-align . "left")
		  (background . ,theme-color)
		  (color . "white")
		  ,bold))
    (nil t-above ((caption-side . "top")))
    (nil t-bottom ((caption-side . "bottom")))
    (nil listing-number ,ftl-number)
    (nil figure ,ftl-number)
    (nil org-src-name ,ftl-number)

    (table nil (,@table ,line-height (border-collapse . "collapse")))
    (th nil ((border . "1px solid white")
	     (background-color . ,theme-color)
	     (color . "white")
	     (padding-left . "10px") (padding-right . "10px")))
    (td nil (,@table (padding-left . "10px") (padding-right . "10px")
		     (background-color . "#f9f9f9") (border . "1px solid white")))
    (td org-left ((text-align . "left")))
    (td org-right ((text-align . "right")))
    (td org-center ((text-align . "center")))

    (div outline-text-4 ((margin-left . "15px")))
    (div outline-4 ((margin-left . "10px")))
    (h4 nil ((margin-bottom . "0px") (font-size . "11pt")
	     ,font-family))
    (h3 nil ((margin-bottom . "0px") (text-decoration . "underline")
	     ,color (font-size . "12pt")
	     ,font-family))
    (h2 nil ((margin-top . "20px") (margin-bottom . "20px")
	     (font-style . "italic") ,color (font-size . "13pt")
	     ,font-family))
    (h1 nil ((margin-top . "20px")
	     (margin-bottom . "0px") ,color (font-size . "12pt")
	     ,font-family))
    (p nil ((text-decoration . "none") (margin-bottom . "0px")
	    (margin-top . "10px") (line-height . "11pt") ,font-size
	    ,font-family (max-width . "100ch")))
    (div nil (,@font (line-height . "11pt"))))))
#+END_SRC

#+RESULTS:
: sr/org-msg-style

*** Set the css to the above custom function
:PROPERTIES:
:ID:       BA4A13BA-632B-4AC9-80DB-64E1CE560F14
:END:

#+BEGIN_SRC emacs-lisp
(setq org-msg-enforce-css 'sr/org-msg-style)
#+END_SRC

#+RESULTS:
: sr/org-msg-style

* Programming customisations
** emmet-mode 
:PROPERTIES:
:ID:       8BB48A4C-E7D2-4167-B210-5B732A0280E9
:END:

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
:straight t
:config

;; Auto-start on any markup modes
(add-hook 'sgml-mode-hook 'emmet-mode) 
;; enable Emmet's css abbreviation.
(add-hook 'css-mode-hook  'emmet-mode) 
;; enable HTML 
(add-hook 'html-mode-hook  'emmet-mode)
;; Enable cursor to be placed within quotes
(setq emmet-move-cursor-between-quotes t)
)

#+END_SRC

#+RESULTS:
: t

** web-mode 
:PROPERTIES:
:ID:       D678D668-F061-42C7-8859-B22E195F57C5
:END:

#+BEGIN_SRC emacs-lisp :results silent
(straight-use-package 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
#+END_SRC

Forcing django engine for now

#+BEGIN_SRC emacs-lisp
(setq web-mode-engines-alist
      '(("django"    . "\\.html\\'")))
#+END_SRC

#+RESULTS:
: ((django . \.html\'))

** ESS configuration
:PROPERTIES:
:ID:       867736B8-D21A-4734-9FCD-73D10997E192
:END:

#+BEGIN_SRC emacs-lisp
(use-package ess
  :ensure t
  :config
  (require 'ess)
  (show-paren-mode)
  (use-package ess-R-data-view)
  (use-package polymode)
  (setq ess-describe-at-point-method nil)
  (setq ess-switch-to-end-of-proc-buffer t)
  (setq ess-rutils-keys +1)
  (setq ess-eval-visibly 'nil)
  (setq ess-use-flymake "lintr::default_linters()")
   (setq ess-use-company t)
  (setq ess-history-file "~/.Rhistory")
  (setq ess-use-ido t)
  (setq ess-roxy-hide-show-p t)
  ;;(speedbar-add-supported-extension ".R")
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)

;;setting up eldoc
(setq ess-use-eldoc t)
(setq ess-eldoc-show-on-symbol t)
(setq ess-doc-abbreviation-style 'aggresive)
  )

;; The following chunk is taken from: https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Blang/ess/packages.el
;;; Follow Hadley Wickham's R style guide
(setq ess-first-continued-statement-offset 2
      ess-continued-statement-offset 4
      ess-expression-offset 4
      ess-nuke-trailing-whitespace-p t
      ess-default-style 'DEFAULT)


;; Adding Poly-R package

(use-package poly-R
  :ensure t
  )
;; The following chunk is taken from antonio's answer from https://stackoverflow.com/questions/16172345/how-can-i-use-emacs-ess-mode-with-r-markdown
(defun rmd-mode ()
  "ESS Markdown mode for rmd files."
  (interactive)
  (require 'poly-R)
  (require 'poly-markdown)
  (poly-markdown+r-mode))

(use-package ess-view
  :ensure t
  :config
  (require 'ess-view)
  (if (system-type-is-darwin)
      (setq ess-view--spreadsheet-program
            "/Applications/Tad.app/Contents/MacOS/Tad"
            )
    )
  (if (system-type-is-gnu)
      (setq ess-view--spreadsheet-program
            "tad"
            )
    )
  )

;; This is taken and slightly modified from the ESS manual
;; The display config is similar to that of Rstudio

(setq display-buffer-alist
      `(("*R Dired"
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . -1)
         (window-width . 0.33)
         (reusable-frames . nil))
        ("*R"
         (display-buffer-reuse-window display-buffer-at-bottom)
         (window-width . 0.35)
         (reusable-frames . nil))
        ("*Help"
         (display-buffer-reuse-window display-buffer-in-side-window)
         (side . right)
         (slot . 1)
         (window-width . 0.33)
         (reusable-frames . nil))))

(message "Loaded ESS configuration")
#+END_SRC

** lispy
:PROPERTIES:
:ID:       0D58C0FC-C29D-4BEF-9030-904200CD2F85
:END:

#+BEGIN_SRC emacs-lisp
;; Superior lisp editing
(use-package lispy
  :config
  (dolist (hook '(emacs-lisp-mode-hook
		  hy-mode-hook))
    (add-hook hook
	      (lambda ()
		(lispy-mode)
		(eldoc-mode)))))
#+END_SRC
** flycheck
:PROPERTIES:
:ID:       C8BBC1FA-A0D3-4CC6-9053-D7DAD0A28491
:END:

#+BEGIN_SRC emacs-lisp
(straight-use-package 'flycheck)
#+END_SRC

** TODO Python [0/7]
- Note taken on [2020-03-23 Mon 18:10] \\
  For now I will disable this as it appears logical to use pyenv and other packages to set the correct interpreter. However, since shims are being used, one would assume that the correct environment will be used anyway.

At the moment, [[nb:.emacs.d::init.org::#MY Scimax packages][Scimax packages]] require pydoc, elpy and jedi, which are already installed. These packages have to be grouped here.

[[https://realpython.com/emacs-the-best-python-editor/][Emacs: The Best Python Editor? Real Python]] is a good guide towards setting up Emacs and python. [[https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a][Managing a Python development environment in Emacs - Analytics Vidhya - Medium]] provides a satisfyingly detailed configuration with customisations for python. The latter guide is worth following. 

#+BEGIN_SRC emacs-lisp :tangle no
;; Enabling python 3 to be the default interpreter.
(setq python-shell-interpreter "python3")
(setq org-babel-python-command "python3")
(setq flycheck-python-pycompile-executable "python3")

;; Enabling flycheck for elpy mode

(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))

#+END_SRC

- [ ] pyment
- [ ] isort
- [ ] pyenv version alias and activating on a per buffer basis
- [ ] pyvenv
- [ ] pydoc
- [ ] elpy
- [ ] blacken

*** EIN notebooks

- [ ] enable visual line mode?
- [ ] Enable pictures by default
- [ ] possible for better latex rendering?

#+BEGIN_SRC emacs-lisp
(use-package ein
:defer t
:ensure t
:config
(package-initialize)
(require 'ein)
(require 'ein-notebook)
(require 'ein-subpackages)
)
#+END_SRC

*** emacs-lsp
#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
#+END_SRC

| (lambda nil (require 'lsp-python-ms) (lsp)) | er/add-python-mode-expansions | blacken-mode | elpy-mode |

*** pyvenv, pydoc and elpy
#+BEGIN_SRC emacs-lisp
(straight-use-package 'pyvenv)
(straight-use-package 'pydoc)

(use-package elpy
  :straight t
  :config
  (elpy-enable))
#+END_SRC

*** COMMENT pyenv
- Note taken on [2020-03-29 Sun 17:00] \\
  I am predominantly using pyvenv at the moment with a single pyenv. This will be useful to look into down the line.

#+BEGIN_SRC emacs-lisp
(use-package pyenv
    :straight (:host github :repo "aiguofer/pyenv.el")
    :config
    (setq pyenv-use-alias 't)
    (setq pyenv-modestring-prefix "PyE-")
    (setq pyenv-modestring-postfix nil)
    (setq pyenv-set-path nil)(global-pyenv-mode)
    (defun pyenv-update-on-buffer-switch (prev curr)
      (if (string-equal "Python" (format-mode-line mode-name nil nil curr))
          (pyenv-use-corresponding)))
    (add-hook 'switch-buffer-functions 'pyenv-update-on-buffer-switch))
#+END_SRC

#+RESULTS:
: t

*** Blacken
:PROPERTIES:
:ID:       C874811C-37CA-4353-9C61-DBC6793AFC82
:END:

The black library will re-format the code on a save. Elpy will automatically use black, as long as the elisp package installed, along with the python black package which can be installed using pip

#+BEGIN_SRC sh :tangle no
pip3 install black
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package blacken
:straight t
:hook (python-mode . blacken-mode))
#+END_SRC

* Docker

The following packages will enable me to handle docker containers right within Emacs.

*** Docker package
:PROPERTIES:
:ID:       91f02de1-f2d3-4722-9e18-df78f4b6ad95
:END:

With this package, I can easily view the containers available and run commands on them from emac without switching over the terminal.

#+BEGIN_SRC emacs-lisp
(use-package docker
  :ensure t

  :bind ("M-s d" . docker)
)
#+END_SRC

#+RESULTS:
: docker

*** docker-compose-mode
:PROPERTIES:
:ID:       e887c7b6-5e53-49fb-ab13-a37ab7944407
:END:

Enabling syntax highlighting for docker-compose files.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package docker-compose-mode
  :ensure t

  :config
;;  (require 'docker-compose-mode)
  (add-to-list 'auto-mode-alist
               '("docker-compose\\" . docker-compose-mode))
  )
#+END_SRC

#+RESULTS:

*** docker-file-mode
:PROPERTIES:
:ID:       33fdbbf6-5e67-43e7-8c84-aa90fa6b9de6
:END:

This is required for syntax highlighting in dockerfiles.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package dockerfile-mode
  :ensure t

  :config
  (require 'dockerfile-mode)
  (add-to-list 'auto-mode-alist
               '("Dockerfile\\" . dockerfile-mode)
               )
  )
#+END_SRC

#+RESULTS:


* TODO Custom search functions [0/1]
This section contains sections to search in specific directories, with customised options.

- [ ] Incorporate these functions into a hydra.
  - [ ] Explore ldlework's hera and nougat hydra packages for this. Perhaps include into scimax under the applications menu. 

** Episteme search
:PROPERTIES:
:ID:       001EE8FC-2C5B-4A7C-8BA7-DEAB94A808AA
:END:
Adapted from ldlework

#+BEGIN_SRC emacs-lisp
(defun episteme-search ()
  (interactive)
  (helm-do-ag (sr/fun/project-dir "episteme/brain"))
  (let* ((p (point))
         (f (org-brain-first-headline-position))
         (adjusted-point (max 0 (- p f))))
    (org-brain-visualize (file-name-sans-extension (buffer-name)))
    (with-current-buffer "*org-brain*"
      (let ((minmax (polybrain--get-point-min-max)))
        (goto-char (+ (car minmax) adjusted-point))))))(require 'f)
#+END_SRC

** Projects search [0/6]
:PROPERTIES:
:ID:       8351BECB-609E-4D19-9DAE-C03728380FCB
:END:
- [ ] Exclude git files
- [ ] Exclude csv files
- [ ] Exclude html and related files 
- [ ] decide between helm-ag and counsel-ag and the method to jump between files.
- [ ] Decide about plugging in arguments to activate different kinds of search.
- [ ] Find if multiple paths can be included or not. 

#+BEGIN_SRC emacs-lisp
(defun sr/fun/proj-search ()
  (interactive)
  (helm-do-ag (sr/fun/project-dir "")))
#+END_SRC

** Org files search
:PROPERTIES:
:ID:       E34847DB-7470-4BBC-8DA1-0A1823FD5890
:END:

#+BEGIN_SRC emacs-lisp
(defun sr/fun/org-search ()
  (interactive)
  (helm-do-ag (sr/fun/org-dir "")))
#+END_SRC

** Journal files search

#+BEGIN_SRC emacs-lisp
(defun sr/fun/org-journal-search ()
  (interactive)
  (helm-do-ag (sr/fun/org-dir "journal")))
#+END_SRC

* TODO Hydra Hera and nougat

This hydra setup is based off hera and nougat, which are packages
available in [[https://dustinlacewell.github.io/emacs.d/][ldlework's init.el]]. I've adapted, modified and expanded his
setup. These cool packages make defining hydras a little easier,
especially in a stack.
** hera
:PROPERTIES:
:ID:       E6516FB9-DC4A-44EC-98F9-8A2420F2B219
:END:

ldlework's package that provides an API for defining a stack of hydras. 

#+BEGIN_SRC emacs-lisp
(use-package hera
:demand t
:straight (hera :type git :host github :repo "dustinlacewell/hera"))
#+END_SRC

#+RESULTS:

** nougat-hydra
:PROPERTIES:
:ID:       70D6E497-A30F-4027-8D4D-D5CF9C21E788
:END:

#+BEGIN_SRC emacs-lisp
(defun nougat--inject-hint (symbol hint)
(-let* ((name (symbol-name symbol))
(hint-symbol (intern (format "%s/hint" name)))
(format-form (eval hint-symbol))
(string-cdr (nthcdr 1 format-form))
(format-string (string-trim (car string-cdr)))
(amended-string (format "%s\n\n%s" format-string hint)))
(setcar string-cdr amended-string)))

(defun nougat--make-head-hint (head default-color)
(-let (((key _ hint . rest) head))
(when key
(-let* (((&plist :color color) rest)
(color (or color default-color))
(face (intern (format "hydra-face-%s" color)))
(propertized-key (propertize key 'face face)))
(format " [%s]: %s" propertized-key hint)))))

(defun nougat--make-hint (heads default-color)
(string-join
(cl-loop for head in heads
for hint = (nougat--make-head-hint head default-color)
do (pp hint)
collect hint) "\n"))

(defun nougat--clear-hint (head)
(-let* (((key form _ . rest) head))
`(,key ,form nil ,@rest)))

(defun nougat--add-exit-head (heads)
(let ((exit-head '("SPC" (hera-pop) "to exit" :color blue)))
(append heads `(,exit-head))))

(defun nougat--add-heads (columns extra-heads)
(let* ((cell (nthcdr 1 columns))
(heads (car cell))
(extra-heads (mapcar 'nougat--clear-hint extra-heads)))
(setcar cell (append heads extra-heads))))

(defmacro nougat-hydra (name body columns &optional extra-heads)
(declare (indent defun))
(-let* (((&plist :color default-color :major-mode mode) body)
(extra-heads (nougat--add-exit-head extra-heads))
(extra-hint (nougat--make-hint extra-heads default-color))
(body (plist-put body :hint nil))
(body-name (format "%s/body" (symbol-name name)))
(body-symbol (intern body-name))
(mode-support
`(when ',mode
(setq major-mode-hydra--body-cache
(a-assoc major-mode-hydra--body-cache ',mode ',body-symbol)))))
(nougat--add-heads columns extra-heads)
(when mode
(remf body :major-mode))
`(progn
(pretty-hydra-define ,name ,body ,columns)
(nougat--inject-hint ',name ,extra-hint)
,mode-support)))

;; (nougat-hydra hydra-test (:color red :major-mode fundamental-mode)
;; ("First"
;; (("a" (message "first - a") "msg a" :color blue)
;; ("b" (message "first - b") "msg b"))
;; "Second"
;; (("c" (message "second - c") "msg c" :color blue)
;; ("d" (message "second - d") "msg d"))))
#+END_SRC

#+RESULTS:
: nougat-hydra

** hydra-dwim
:PROPERTIES:
:ID:       83B2E03A-A2DF-468B-9004-C36FDA0FAE9C
:END:
- Note taken on [2020-04-04 Sat 17:17] \\
  I still need to integrate these hydras with scimax hydras and figure out
  a good key for the exit.

#+BEGIN_SRC emacs-lisp
(defun my/hydra-dwim ()
(interactive)
(-let (((&alist major-mode mode) major-mode-hydra--body-cache))
(if mode (major-mode-hydra)
(hera-start 'hydra-default/body))))

(setq kbd-hera-pop "Q")
(global-set-key (kbd "H-l") 'my/hydra-dwim)
(global-set-key (kbd "H-l") (lambda () (interactive) (hera-start 'hydra-default/body)))

#+END_SRC

#+RESULTS:
| lambda | nil | (interactive) | (hera-start 'hydra-default/body) |

** hydra-default
:PROPERTIES:
:ID:       76AD6939-FBF3-40A1-8AAB-31355ED12259
:END:

#+BEGIN_SRC emacs-lisp
(defhydra hydra-default (:color blue :hint nil)
"

Entrypoint Hydra

"
("a" (org-agenda nil "a") "agenda" :column "Open")
;; ("p" (hera-push 'hydra-projectile/body) "projectile")
("c" (org-capture) "capture")
("t" (hera-push 'hydra-treemacs/body))
("b" (hera-push 'hydra-bookmarks/body) "bookmarks")
("h" (hera-push 'hydra-help/body) "help" :column "Emacs")
("m" (hera-push 'hydra-mu4e/body) "mail")
("w" (hera-push 'hydra-window/body) "windows")
("z" (hera-push 'hydra-zoom/body) "zoom")
("R" (hera-push 'hydra-registers/body) "registers")
("n" (hera-push 'hydra-notes/body) "notes" :column "Misc")
("S" (hera-push 'hydra-straight/body) "Straight")
("s" (call-interactively 'helm-imenu) "semantic")
("g" (hera-push 'hydra-gist/body) "gist")
("p" (hera-push 'hydra-pyvenv/body) "pyvenv" :column "python")
("j" (hera-push 'hydra-journal/body) "Journal" :column "Daily")
("o" (hera-push 'hydra-clock/body) "Clock" :column "Daily")
("l" (hera-push 'hydra-links/body) "Links"))

#+END_SRC

#+RESULTS:
: hydra-default/body
** hydra-straight
:PROPERTIES:
:ID:       6CAF1975-F604-41AB-B402-27F3461D068C
:END:

#+BEGIN_SRC emacs-lisp
(defun sr/fun/straight-pull-rebuild-combo (&optional package)
  "Function to select a package, and then -> pull and rebuild using straight."
  (interactive)
  (let ((package (or package
                     (straight--select-package "Pull & Rebuild package" 'for-build 'installed))))
    (message package)
    (straight-pull-package package)
    (straight-rebuild-package package)))


(nougat-hydra hydra-straight (:color red)
  ("Straight" (("P" (call-interactively 'straight-pull-package)
		"Pull one")
	       ("p" (call-interactively 'sr/fun/straight-pull-rebuild-combo)
		"Pull and Rebuild one package" :column "Pull")
	       ("C-a" (straight-pull-all) "Pull ALL")
	       ("f" (call-interactively 'straight-fetch-package)
		"Fetch one")
	       ("F" (straight-fetch-all) "Fetch ALL")
	       ("w" (call-interactively 'straight-visit-package-website) "visit package Website")
	       ("g" (call-interactively 'straight-get-recipe)
		"Get recipe")
	     ("r" (call-interactively 'straight-rebuild-package)
		"rebuild package")
	       )))
#+END_SRC

#+RESULTS:
** hydra-mu4e
:PROPERTIES:
:ID:       C319B9EC-65A6-48B9-B89D-849C866CA4B9
:END:

#+BEGIN_SRC emacs-lisp
(nougat-hydra hydra-mu4e (:color blue)
("mu4e" (("m" (mu4e) "mail")
	     ("u" (mu4e-update-mail-and-index) "Update mail and index"))))
#+END_SRC

#+RESULTS:
** hydra-pyvenv
:PROPERTIES:
:ID:       52E4B983-F0A4-433B-B2DC-A464127E8933
:END:

#+BEGIN_SRC emacs-lisp
(nougat-hydra hydra-pyvenv (:color red)
  ("pyvenv - virtualenv" (("c" (call-interactively 'pyvenv-create)
		"create")
	       ("w" (call-interactively 'pyvenv-workon) "work on")
	       ("a" (call-interactively 'pyvenv-activate)	"activate")
	       ("d" (call-interactively 'pyvenv-deactivate) "deactivate")
	       ("t" (call-interactively 'pyvenv-tracking-mode) "tracking mode")
	       ("r" (call-interactively 'pyvenv-restart-python) "restart python") 
	       )))
#+END_SRC

#+RESULTS:

** hydra-window

- Note taken on [2020-04-08 Wed 12:34] \\
  For some reason, ace commands for windows ask for a 2nd number even with
  only 2 windows in the frame. This may be because the buffer is open in
  another frame as well. THis has to be fixed.

#+BEGIN_SRC emacs-lisp
(use-package ace-window)
(winner-mode 1)

(nougat-hydra hydra-window (:color red)
("Jump"
(("h" windmove-left "left")
("l" windmove-right "right")
("k" windmove-up "up")
("j" windmove-down "down")
("a" ace-select-window "ace")
("s" ace-swap-window "ace-swap"))
"Split"
(("q" split-window-right "left")
("r" (progn (split-window-right) (call-interactively 'other-window)) "right")
("e" split-window-below "up")
("w" (progn (split-window-below) (call-interactively 'other-window)) "down"))
"Do"
(("d" delete-window "delete")
("o" delete-other-windows "delete others")
("u" winner-undo "undo")
("R" winner-redo "redo")
("t" nougat-hydra-toggle-window "toggle"))))
#+END_SRC

Toggle window split

#+BEGIN_SRC emacs-lisp
(defun my/toggle-window-split (&optional arg)
"Switch between 2 windows split horizontally or vertically.
With ARG, swap them instead."
(interactive "P")
(unless (= (count-windows) 2)
(user-error "Not two windows"))
;; Swap two windows
(if arg
(let ((this-win-buffer (window-buffer))
(next-win-buffer (window-buffer (next-window))))
(set-window-buffer (selected-window) next-win-buffer)
(set-window-buffer (next-window) this-win-buffer))
;; Swap between horizontal and vertical splits
(let* ((this-win-buffer (window-buffer))
(next-win-buffer (window-buffer (next-window)))
(this-win-edges (window-edges (selected-window)))
(next-win-edges (window-edges (next-window)))
(this-win-2nd (not (and (<= (car this-win-edges)
(car next-win-edges))
(<= (cadr this-win-edges)
(cadr next-win-edges)))))
(splitter
(if (= (car this-win-edges)
(car (window-edges (next-window))))
'split-window-horizontally
'split-window-vertically)))
(delete-other-windows)
(let ((first-win (selected-window)))
(funcall splitter)
(if this-win-2nd (other-window 1))
(set-window-buffer (selected-window) this-win-buffer)
(set-window-buffer (next-window) next-win-buffer)
(select-window first-win)
(if this-win-2nd (other-window 1))))))
#+END_SRC

** hydra-treemacs

#+BEGIN_SRC emacs-lisp
(nougat-hydra hydra-treemacs (:color red)
("Workspace"
(("t" treemacs "Treemacs buffer" :color red)
("o" treemacs-switch-workspace "switch workspace" :color red)
("n" treemacs-create-workspace "new workspace" :color red)
("k" treemacs-delete-workspace "kill")
("r" treemacs-rename-workspace "rename")
("c" treemacs-collapse-other-projects "collapse other projects" :color blue))))
#+END_SRC

** hydra-journal

#+BEGIN_SRC emacs-lisp
(nougat-hydra hydra-journal (:color blue)
("Journal"
(("j"  org-journal-new-entry "Entry")
 ("n" org-journal-open-next-entry "Next entry" :color red)
 ("p" org-journal-open-previous-entry "Previous entry" :color red)
 ("F" org-journal-new-scheduled-entry "Future scheduled")
 ("s" sr/fun/org-journal-search "Journal search")
 ("S" sr/fun/org-search "Org directory search"))))

(global-set-key (kbd "H-j") (lambda () (interactive) (hera-start 'hydra-journal/body)))
#+END_SRC

** hydra-clock

- [ ] I will need to integrate this down the line with shortcuts for org mode.

#+BEGIN_SRC emacs-lisp
(nougat-hydra hydra-clock (:color blue)
("clock"
(("j" counsel-org-clock-goto "clock go to current/last" :color red)
("i" counsel-org-clock-history "counsel clock in/historyo" :color blue)
("c" counsel-org-clock-context "counsel clock context" :color blue)
("o" org-clock-out "clock out" :color red)
("h" org-mru-clock-in "mru clock in" :color blue))))
#+END_SRC

** hydra-links

#+BEGIN_SRC emacs-lisp  
(nougat-hydra hydra-links (:color blue)
("links"
(("y" yt "youtube music playlist" :color blue)
("h" hn "hacker news" :color blue)
("w" wikipedia-search "wikipedia" :color blue)
("g" counsel-google "counsel web search" :color blue)
("G" google "Launch google" :color blue)
("d" define-word "define word" :color red)
("D" lookup-word "wiktionary lookup" :color red)
("m" mw-thesaurus-lookup-at-point "Merriam-webster thesaurus" :color red))))
#+END_SRC

* Pastes
** Webpaste
- Note taken on [2020-03-29 Sun 11:18] \\
  This package is useful to use multiple paste services with a fallback. dpaste has a pleasant format and therefore chosen as the first priority. The advantage of using github gists is that org mode exports can be directly rendered. This package can also be configured to use a custom paste service.

#+BEGIN_SRC emacs-lisp
(use-package webpaste
  :ensure t
  :config
  (progn
    (setq webpaste-provider-priority '("dpaste.org" "ix.io"))))
#+END_SRC

#+RESULTS:
: t

** github gists
:PROPERTIES:
:ID:       E33FD48A-4049-464E-B956-9BEA3A48B07E
:END:
Gists posted right from emacs. 

#+BEGIN_SRC emacs-lisp
(use-package gist
:straight (gist :type git :host github :repo "defunkt/gist.el"))


(nougat-hydra hydra-gist (:color blue)
("Gist" (("p" (gist-region-or-buffer) "public")
("P" (gist-region-or-buffer-private) "private")
("b" (browse-url "https://gist.github.com/shrysr") "browse"))))
#+END_SRC

#+RESULTS:
* TODO org-id

Using the org-id for reference to headings ensures that even if the
heading changes, the links will still work.

In addition, I would like an org id to be created every time the capture
is used. This facilitates using packages like org-brain which rely
extensively on org-id's.

#+BEGIN_SRC emacs-lisp
  (require 'org-id)
  (setq org-id-link-to-org-use-id t)
  ;; (org-link-set-parameters "id" :store #'org-id-store-link)
  ;; (org-link-set-parameters "nb" :store nil)
  (org-link-set-parameters 'nil)
  ;; (org-link-set-parameters "nb" :store nil)
  ;; ;; Update ID file .org-id-locations on startup
  ;; ;; This adds too much time to startup
  ;; ;; (org-id-update-id-locations)

  (setq org-id-method (quote uuidgen))
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/my_org/emacs_meta/.org-id-locations")
  ;; (add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)
#+end_src

#+RESULTS:
: ~/my_org/emacs_meta/.org-id-locations
* COMMENT Elfeed :elfeed:
- Note taken on [2019-09-25 Wed 14:09] \\
  Scimax's elfeed is enabled, along with elfeed-org and elfeeed-goodies
- Note taken on [2019-07-08 Mon 08:10] \\
  Disabling elfeed for now.

** Scimax + Elfeed-org and elfeed-goodies setup [/]
:PROPERTIES:
:ID:       8302d89f-756b-4a47-87aa-3f3df5a39a3f
:END:
Using an org source is the easiest way to organise my RSS feeds for reading with Elfeed.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'elfeed)
;; use an org file to organise feeds
(use-package elfeed-org
  :ensure t
  :config
  (setq rmh-elfeed-org-files (list "~/my_org/elfeed.org"))
  )

(use-package elfeed-goodies
  :ensure t
  :init
  (elfeed-goodies/setup)
  )

;; (require 'scimax-elfeed)

#+end_src

#+RESULTS:

** Elfeed get full entry

Source: [[https://punchagan.muse-amuse.in/blog/elfeed-hook-to-fetch-full-content/][Elfeed hook to fetch full content - Noetic Nought]]

#+BEGIN_SRC emacs-lisp
(defun pc/get-url-content (url)
  "Fetches the content for a url."
  (shell-command-to-string (format "~/bin/get_article.py %s" url)))

(defun pc/get-entry-content (entry)
  "Fetches content for pinboard entries that are not tweets."
  (interactive
   (let ((entry elfeed-show-entry))
     (list entry)))

  (let ((url (elfeed-entry-link entry))
        (feed-id (elfeed-deref (elfeed-entry-feed-id entry)))
        (content (elfeed-deref (elfeed-entry-content entry))))
    (when (and (s-matches? "feeds.pinboard.in/" feed-id)
               (not (s-matches? "twitter.com/\\|pdf$\\|png$\\|jpg$" url))
               (string-equal "" content))
      (setq content (pc/get-url-content url))
      (setf (elfeed-entry-content entry) (elfeed-ref content)))))

(add-hook 'elfeed-new-entry-hook #'pc/get-entry-content)
#+END_SRC

#+RESULTS:
| pc/get-entry-content | elfeed-goodies/html-decode-title | elfeed-org-run-new-entry-hook |

** COMMENT Elfeed Basic + Customisations
- Note taken on [2020-03-28 Sat 15:50] \\
  This was my earlier configuration. However, there are issues with the save db feature and I am anyway not really syncing across computers anymore. I read feeds on my VPS. Scimax's elfeed customisations provide me the functions that I need as I can easily email an article to instapaper or anywhere else. However, these remain here for reference, as there are some useful functions here.

Source: [[http://heikkil.github.io/blog/2015/05/09/notes-from-elfeed-entries/][Note taking 3: Notes from elfeed entries - Heikki @ home]] 

#+BEGIN_SRC emacs-lisp
;; Elfeed configuration source :
(use-package elfeed
  :bind (:map elfeed-search-mode-map
              ("A" . bjm/elfeed-show-all)
              ("E" . bjm/elfeed-show-emacs)
              ("D" . bjm/elfeed-show-daily)
              ("q" . bjm/elfeed-save-db-and-bury))
  :init
  (setq my/default-elfeed-search-filter "@1-month-ago +unread !sport ")
  (setq-default elfeed-search-filter my/default-elfeed-search-filter)
  (setq elfeed-db-direcory "~/scimax/user/elfeeddb")
  :config
  (elfeed-org)
  (elfeed-goodies/setup)
  (setq elfeed-use-curl t)

  ;;
  ;; linking and capturing
  ;;

  (defun elfeed-link-title (entry)
    "Copy the entry title and URL as org link to the clipboard."
    (interactive)
    (let* ((link (elfeed-entry-link entry))
           (title (elfeed-entry-title entry))
           (titlelink (concat "[[" link "][" title "]]")))
      (when titlelink
        (kill-new titlelink)
        (x-set-selection 'PRIMARY titlelink)
        (message "Yanked: %s" titlelink))))

  ;; show mode

  (defun elfeed-show-link-title ()
    "Copy the current entry title and URL as org link to the clipboard."
    (interactive)
    (elfeed-link-title elfeed-show-entry))

  (defun elfeed-show-quick-url-note ()
    "Fastest way to capture entry link to org agenda from elfeed show mode"
    (interactive)
    (elfeed-link-title elfeed-show-entry)
    (org-capture nil "n")
    (yank)
    (org-capture-finalize))

  (bind-keys :map elfeed-show-mode-map
             ("l" . elfeed-show-link-title)
             ("v" . elfeed-show-quick-url-note))

  ;; search mode

  (defun elfeed-search-link-title ()
    "Copy the current entry title and URL as org link to the clipboard."
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry))))

  (defun elfeed-search-quick-url-note ()
    "In search mode, capture the title and link for the selected
     entry or entries in org aganda."
    (interactive)
    (let ((entries (elfeed-search-selected)))
      (cl-loop for entry in entries
               do (elfeed-untag entry 'unread)
               when (elfeed-entry-link entry)
               do (elfeed-link-title entry)
               do (org-capture nil "n")
               do (yank)
               do (org-capture-finalize)
               (mapc #'elfeed-search-update-entry entries))
      (unless (use-region-p) (forward-line))))

  (bind-keys :map elfeed-search-mode-map
             ("l" . elfeed-search-link-title)
             ("v" . elfeed-search-quick-url-note))

   ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))
  )
#+END_SRC

#+RESULTS:
: bjm/elfeed-save-db-and-bury

** COMMENT TEST Removing Scimax's default colors

#+BEGIN_SRC emacs-lisp :tangle no
(set-face-attribute 'python-elfeed-entry nil :background nil :weight 'normal)
(set-face-attribute 'emacs-elfeed-entry nil :background nil :weight 'normal)
(set-face-attribute 'elfeed-search-unread-title-face nil  :weight 'normal)
(set-face-attribute 'elfeed-search-feed-face nil :height '0.8)
#+END_SRC

* eww
*** Default browser to be eww and basic settings
:PROPERTIES:
:ID:       97B74055-86BA-4471-853C-96BD35055AF5
:END:

#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

#+RESULTS:
: eww-browse-url

*** Keyboard map for default external browser
:PROPERTIES:
:ID:       5E6E35E7-08EF-47F1-AFC0-ADE231C4BD38
:END:

#+BEGIN_SRC emacs-lisp
;; Open the current URL in the default external browser
(eval-after-load 'eww
  '(progn
     (define-key eww-mode-map "o" 'eww-browse-with-external-browser)
     ))
#+END_SRC

#+RESULTS:
: eww-browse-with-external-browser

*** Wikipedia search
:PROPERTIES:
:ID:       1E0D1DBF-8D54-472D-8B32-E1E371586389
:END:

#+BEGIN_SRC emacs-lisp
(defun wikipedia-search (search-term)
  "Search for SEARCH-TERM on wikipedia"
  (interactive
   (let ((term (if mark-active
                   (buffer-substring (region-beginning) (region-end))
                 (word-at-point))))
     (list
      (read-string
       (format "Wikipedia (%s):" term) nil nil term)))
   )
  (browse-url
   (concat
    "http://en.m.wikipedia.org/w/index.php?search="
    search-term
    ))
  )
#+end_src

#+RESULTS:
: wikipedia-search

*** Access Hacker News
:PROPERTIES:
:ID:       076038EA-5427-4C17-9530-7298911256F7
:END:

#+BEGIN_SRC emacs-lisp
(defun hn ()
  (interactive)
  (browse-url "http://news.ycombinator.com"))
#+end_src

#+RESULTS:
: hn

*** Youtube music playlist

#+BEGIN_SRC emacs-lisp
(defun yt ()
  (interactive)
  (browse-url "https://www.youtube.com/playlist?list=PLzDQK0UVrg2TiemiFoRmrwq-YbQ-Zn1AN"))
#+END_SRC

*** TODO Open specific browser depending on the URL

- Note taken on [2020-04-26 Sun 06:46] \\
  The idea here is to gather the websites and links which work fine on eww
  and have the remaining links open directly on the default web browser.
- Note taken on [2019-03-07 Thu 11:59] \\
  This is worth setting up. It would be convenient for frequently visited websites like reddit and others, to open in the external browser, especially as they do not render well within w3m.

Source : http://ergoemacs.org/emacs/emacs_set_default_browser.Html

#+BEGIN_SRC emacs-lisp 
;; use browser depending on url
(setq
 browse-url-browser-function
 '(
  ("wikipedia\\.org" . eww-browse-url)
  ("wiktionary\\.org" . eww-browse-url)
  ("github" . eww-browse-url)
  ("thefreedictionary\\.com" . eww-browse-url)
  ("link\\.wired\\.com" . eww-browse-url)
  ("links\\.gatesnotes\\.com" . eww-browse-url)
  ("." . browse-url-default-browser)
  ("youtube" . browse-url-default-macosx-browser)))
#+END_SRC

#+RESULTS:
: ((wikipedia\.org . eww-browse-url) (github . eww-browse-url) (thefreedictionary\.com . eww-browse-url) (. . browse-url-default-browser))

* New Scimax port
** COMMENT Adding scimax folder to load path
:PROPERTIES:
:ID:       07625F90-FBFE-46A1-8FDE-2E4D0B664B9D
:END:

#+BEGIN_SRC emacs-lisp :results silent
;; (add-to-list 'load-path (sr/fun/scimax-ref-dir "scimax-stuff"))
;; (defvar scimax-dir (sr/fun/scimax-ref-dir "scimax-stuff"))
#+END_SRC

** org-ref
:PROPERTIES:
:ID:       D74176E1-6899-442A-9C7A-B2193C7ADCF7
:END:
- Note taken on [2020-03-11 Wed 23:18] \\
  Apparently, the scimax org-ref module required the gitter package. This is strange because it is pulled in as a git submodule. However, the issue was resolved  when org-ref was pulled in from it's own repo.

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :straight (org-ref :host github :repo "jkitchin/org-ref")
:config
(require 'doi-utils)
(require 'org-ref-wos)
(require 'org-ref-pubmed)
(require 'org-ref-arxiv)
(require 'org-ref-bibtex)
(require 'org-ref-pdf)
(require 'org-ref-url-utils)
(require 'org-ref-helm)
(require 'org-ref-isbn)

(setq org-ref-completion-library 'org-ref-ivy-cite)
;; note and bib location

(setq org-ref-bibliography-notes "~/my_org/references/references.org"
      org-ref-bibliography-notes "~/my_org/references/research_notes.org"
      org-ref-default-bibliography '("~/my_org/references/references.bib")
      org-ref-pdf-directory "~/my_org/references/pdfs/")

;; setting up helm-bibtex
(setq helm-bibtex-bibliography "~/my_org/references/references.bib"
      helm-bibtex-library-path "~/my_org/org/references/pdfs"
      helm-bibtex-notes-path "~/my_org/references/research_notes.org")

(setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5
	org-ref-bibtex-hydra-key-binding (kbd "H-b")))
#+END_SRC

#+RESULTS:
: t
** scimax-org port
*** General Org mode related
:PROPERTIES:
:ID:       064C080D-4C7E-4EA5-A173-2EA058A7B19A
:END:

#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)
(require 'org-mouse)

;; Make editing invisible regions smart
(setq org-catch-invisible-edits 'smart)

;; allow lists with letters in them.
(setq org-list-allow-alphabetical t)

(setq org-src-tab-acts-natively t)

(setq org-use-speed-commands t)

(add-to-list 'org-speed-commands-user (cons "P" 'org-set-property))
(add-to-list 'org-speed-commands-user (cons "d" 'org-deadline))

;; Mark a subtree
(add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))

;; Widen
(add-to-list 'org-speed-commands-user (cons "S" 'widen))

;; kill a subtree
(add-to-list 'org-speed-commands-user (cons "k" (lambda ()
						  (org-mark-subtree)
						  (kill-region
						   (region-beginning)
						   (region-end)))))

;; Jump to headline
(add-to-list 'org-speed-commands-user
	     (cons "q" (lambda ()
			 (avy-with avy-goto-line
			   (avy--generic-jump "^\\*+" nil avy-style)))))

#+END_SRC

#+RESULTS:
: ((q lambda nil (avy-with avy-goto-line (avy--generic-jump ^\*+ nil avy-style))) (q lambda nil (let ((avy-keys (or (cdr (assq (quote avy-goto-line) avy-keys-alist)) avy-keys)) (avy-style (or (cdr (assq (quote avy-goto-line) avy-styles-alist)) avy-style)) (avy-command (quote avy-goto-line))) (setq avy-action nil) (fset (quote avy-resume) (function (lambda nil (interactive) (avy--generic-jump ^\*+ nil avy-style)))) (avy--generic-jump ^\*+ nil avy-style))) (k lambda nil (org-mark-subtree) (kill-region (region-beginning) (region-end))) (S . widen) (m . org-mark-subtree) (d . org-deadline) (P . org-set-property))

*** Babel settings
:PROPERTIES:
:ID:       BD32BC22-7F2B-4872-A950-23BDCB128CF9
:END:

#+BEGIN_SRC emacs-lisp
;; * Babel settings
;; enable prompt-free code running
(setq org-confirm-babel-evaluate nil
      org-confirm-elisp-link-function nil
      org-confirm-shell-link-function nil)

;; register languages in org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (latex . t)
   (python . t)
   (shell . t)
   (matlab . nil)
   (sqlite . t)
   (ruby . nil)
   (perl . t)
   (org . t)
   (dot . t)
   (plantuml . t)
   (R . t)
   (fortran . nil)
   (C . t)))

;; no extra indentation in the source blocks
(setq org-src-preserve-indentation t)

;; use syntax highlighting in org-file code blocks
(setq org-src-fontify-natively t)

(setq org-babel-default-header-args:python
      '((:results . "output replace")
	(:session . "none")
	(:exports . "both")
	(:cache .   "no")
	(:noweb . "no")
	(:hlines . "no")
	(:tangle . "no")
	(:eval . "never-export")))

(setq org-startup-with-inline-images "inlineimages")

;; default with images open
(setq org-startup-with-inline-images "inlineimages")

;; default width
(setq org-image-actual-width nil)
;; redisplay figures when you run a block so they are always current.
(add-hook 'org-babel-after-execute-hook
	  'org-display-inline-images)

;; This automatically aligns tables, which is nice if you use code to generate
;; tables.
(defun scimax-align-result-table ()
  "Align tables in the subtree."
  (save-restriction
    (save-excursion
      (unless (org-before-first-heading-p) (org-narrow-to-subtree))
      (org-element-map (org-element-parse-buffer) 'table
	(lambda (tbl)
	  (goto-char (org-element-property :post-affiliated tbl))
	  (org-table-align))))))

(add-hook 'org-babel-after-execute-hook
	  'scimax-align-result-table)
#+END_SRC

*** Org formatting functions
:PROPERTIES:
:ID:       DF1FBFBF-886B-4951-B077-105805A7A1AF
:END:

#+BEGIN_SRC emacs-lisp
;; * Markup commands for org-mode


(defun org-markup-region-or-point (type beginning-marker end-marker)
  "Apply the markup TYPE with BEGINNING-MARKER and END-MARKER to region, word or point.
This is a generic function used to apply markups. It is mostly
the same for the markups, but there are some special cases for
subscripts and superscripts."
  (cond
   ;; We have an active region we want to apply
   ((region-active-p)
    (let* ((bounds (list (region-beginning) (region-end)))
	   (start (apply 'min bounds))
	   (end (apply 'max bounds))
	   (lines))
      (unless (memq type '(subscript superscript))
	(save-excursion
	  (goto-char start)
	  (unless (looking-at " \\|\\<")
	    (backward-word)
	    (setq start (point)))
	  (goto-char end)
	  (unless (or (looking-at " \\|\\>")
		      (looking-back "\\>" 1))
	    (forward-word)
	    (setq end (point)))))
      (setq lines
	    (s-join "\n" (mapcar
			  (lambda (s)
			    (if (not (string= (s-trim s) ""))
				(concat beginning-marker
					(s-trim s)
					end-marker)
			      s))
			  (split-string
			   (buffer-substring start end) "\n"))))
      (setf (buffer-substring start end) lines)
      (forward-char (length lines))))
   ;; We are on a word with no region selected
   ((thing-at-point 'word)
    (cond
     ;; beginning of a word
     ((looking-back " " 1)
      (insert beginning-marker)
      (re-search-forward "\\>")
      (insert end-marker))
     ;; end of a word
     ((looking-back "\\>" 1)
      (insert (concat beginning-marker end-marker))
      (backward-char (length end-marker)))
     ;; not at start or end so we just sub/sup the character at point
     ((memq type '(subscript superscript))
      (insert beginning-marker)
      (forward-char (- (length beginning-marker) 1))
      (insert end-marker))
     ;; somewhere else in a word and handled sub/sup. mark up the
     ;; whole word.
     (t
      (re-search-backward "\\<")
      (insert beginning-marker)
      (re-search-forward "\\>")
      (insert end-marker))))
   ;; not at a word or region insert markers and put point between
   ;; them.
   (t
    (insert (concat beginning-marker end-marker))
    (backward-char (length end-marker)))))


(defun org-italics-region-or-point ()
  "Italicize the region, word or character at point.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'italics "/" "/"))


(defun org-bold-region-or-point ()
  "Bold the region, word or character at point.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'bold "*" "*"))


(defun org-underline-region-or-point ()
  "Underline the region, word or character at point.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'underline "_" "_"))


(defun org-code-region-or-point ()
  "Mark the region, word or character at point as code.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'underline "~" "~"))


(defun org-verbatim-region-or-point ()
  "Mark the region, word or character at point as verbatim.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'underline "=" "="))


(defun org-strikethrough-region-or-point ()
  "Mark the region, word or character at point as strikethrough.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'strikethrough "+" "+"))


(defun org-subscript-region-or-point ()
  "Mark the region, word or character at point as a subscript.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'subscript "_{" "}"))


(defun org-superscript-region-or-point ()
  "Mark the region, word or character at point as superscript.
This function tries to do what you mean:
1. If you select a region, markup the region.
2. If in a word, markup the word.
3. Otherwise wrap the character at point in the markup."
  (interactive)
  (org-markup-region-or-point 'superscript "^{" "}"))

#+END_SRC

*** Links and Jumping functions
:PROPERTIES:
:ID:       566F6D94-A39B-40D9-BD0A-321B56FC34B4
:END:

#+BEGIN_SRC emacs-lisp
;; * New org links

(if (fboundp 'org-link-set-parameters)
    (org-link-set-parameters
     "pydoc"
     :follow (lambda (path)
	       (pydoc path))
     :export (lambda (path desc format)
	       "Generate a url"
	       (let (url)
		 (setq url (cond
			    ((s-starts-with? "scipy" path)
			     (format
			      "https://docs.scipy.org/doc/scipy/reference/generated/%s.html"
			      path))
			    ((s-starts-with? "numpy" path)
			     (format
			      "https://docs.scipy.org/doc/numpy/reference/generated/%s.html"
			      path))
			    (t
			     (format
			      "https://www.google.com/#safe=off&q=%s"
			      path))))


		 (cond
		  ((eq format 'md)
		   (format "[%s](%s)" (or desc path) url))))))
  (org-add-link-type
   "pydoc"
   (lambda (path)
     (pydoc path))))

(if (fboundp 'org-link-set-parameters)
    (org-link-set-parameters
     "attachfile"
     :follow (lambda (link-string) (org-open-file link-string))
     :export (lambda (keyword desc format)
	       (cond
		((eq format 'html) (format ""))	; no output for html
		((eq format 'latex)
		 ;; write out the latex command
		 (format "\\attachfile{%s}" keyword)))))

  (org-add-link-type
   "attachfile"
   (lambda (link-string) (org-open-file link-string))
   ;; formatting
   (lambda (keyword desc format)
     (cond
      ((eq format 'html) (format ""))	; no output for html
      ((eq format 'latex)
       ;; write out the latex command
       (format "\\attachfile{%s}" keyword))))))

(if (fboundp 'org-link-set-parameters)
    (org-link-set-parameters
     "altmetric"
     :follow (lambda (doi)
	       (browse-url (format  "http://dx.doi.org/%s" doi)))
     :export (lambda (keyword desc format)
	       (cond
		((eq format 'html)
		 (format "<script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'></script>
<div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='%s'></div>" keyword))
		((eq format 'latex)
		 ""))))

  (org-add-link-type
   "altmetric"
   (lambda (doi)
     (browse-url (format  "http://dx.doi.org/%s" doi)))
   (lambda (keyword desc format)
     (cond
      ((eq format 'html)
       (format "<script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'></script>
<div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='%s'></div>" keyword))
      ((eq format 'latex)
       "")))))


(defun org-man-store-link ()
  "Store a link to a man page."
  (when (memq major-mode '(Man-mode woman-mode))
    (let* ((page (save-excursion
		   (goto-char (point-min))
		   (re-search-forward " ")
		   (buffer-substring (point-min) (point))))
	   (link (concat "man:" page))
	   (description (format "Manpage for %s" page)))
      (org-store-link-props
       :type "man"
       :link link
       :description description))))

(if (fboundp 'org-link-set-parameters)
    (org-link-set-parameters
     "man"
     :follow (lambda (path)
	       (man path))
     :store 'org-man-store-link))


;; * ivy navigation
(defun ivy-org-jump-to-visible-headline ()
  "Jump to visible headline in the buffer."
  (interactive)
  (org-mark-ring-push)
  (avy-with avy-goto-line (avy--generic-jump "^\\*+" nil avy-style)))


(defun ivy-jump-to-visible-sentence ()
  "Jump to visible sentence in the buffer."
  (interactive)
  (org-mark-ring-push)
  (avy-with avy-goto-line (avy--generic-jump (sentence-end) nil avy-style))
  (forward-sentence))


(defun ivy-org-jump-to-heading ()
  "Jump to heading in the current buffer."
  (interactive)
  (let ((headlines '()))
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward
	      ;; this matches org headings in elisp too.
	      "^\\(;; \\)?\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ 	]*$"  nil t)
	(cl-pushnew (list
		     (format "%-80s"
			     (match-string 0))
		     (cons 'position (match-beginning 0)))
		    headlines)))
    (ivy-read "Headline: "
	      (reverse headlines)
	      :action (lambda (candidate)
			(org-mark-ring-push)
			(goto-char (cdr (assoc 'position candidate)))
			(outline-show-entry)))))


(defun ivy-org-jump-to-agenda-heading ()
  "Jump to a heading in an agenda file."
  (interactive)
  (let ((headlines '()))
    ;; these files should be open already since they are agenda files.
    (loop for file in (org-agenda-files) do
	  (with-current-buffer (find-file-noselect file)
	    (save-excursion
	      (goto-char (point-min))
	      (while (re-search-forward org-heading-regexp nil t)
		(cl-pushnew (list
			     (format "%-80s (%s)"
				     (match-string 0)
				     (file-name-nondirectory file))
			     :file file
			     :position (match-beginning 0))
			    headlines)))))
    (ivy-read "Headline: "
	      (reverse headlines)
	      :action (lambda (candidate)
			(org-mark-ring-push)
			(find-file (plist-get (cdr candidate) :file))
			(goto-char (plist-get (cdr candidate) :position))
			(outline-show-entry)))))


(defun ivy-org-jump-to-heading-in-files (files &optional fontify)
  "Jump to org heading in FILES.
Optional FONTIFY colors the headlines. It might slow things down
a lot with large numbers of org-files or long org-files. This
function does not open the files."
  (let ((headlines '()))
    (loop for file in files do
	  (when (file-exists-p file)
	    (with-temp-buffer
	      (insert-file-contents file)
	      (when fontify
		(org-mode)
		(font-lock-fontify-buffer))
	      (goto-char (point-min))
	      (while (re-search-forward org-heading-regexp nil t)
		(cl-pushnew (list
			     (format "%-80s (%s)"
				     (match-string 0)
				     (file-name-nondirectory file))
			     :file file
			     :position (match-beginning 0))
			    headlines)))))
    (ivy-read "Headline: "
	      (reverse headlines)
	      :action (lambda (candidate)
			(org-mark-ring-push)
			(find-file (plist-get (cdr candidate) :file))
			(goto-char (plist-get (cdr candidate) :position))
			(outline-show-entry)))))


(defun ivy-org-jump-to-heading-in-directory (&optional recursive)
  "Jump to heading in an org file in the current directory.
Use a prefix arg to make it RECURSIVE.
Use a double prefix to make it recursive and fontified."
  (interactive "P")
  (let ((fontify nil))
    (when (equal recursive '(16))
      (setq fontify t))
    (ivy-org-jump-to-heading-in-files
     (f-entries "."
		(lambda (f)
		  (and
		   (f-ext? f "org")
		   (not (s-contains? "#" f))))
		recursive)
     fontify)))


(defun ivy-org-jump-to-project-headline (&optional fontify)
  "Jump to a headline in an org-file in the current project.
The project is defined by projectile. Use a prefix arg FONTIFY
for colored headlines."
  (interactive "P")
  (ivy-org-jump-to-heading-in-files
   (mapcar
    (lambda (f) (expand-file-name f (projectile-project-root)))
    (-filter (lambda (f)
	       (and
		(f-ext? f "org")
		(not (s-contains? "#" f))))
	     (projectile-current-project-files)))
   fontify))


(defun ivy-org-jump-to-open-headline (&optional fontify)
  "Jump to a headline in an open org-file.
Use a prefix arg FONTIFY for colored headlines."
  (interactive "P")
  (ivy-org-jump-to-heading-in-files
   (mapcar 'buffer-file-name
	   (-filter (lambda (b)
		      (-when-let (f (buffer-file-name b))
			(f-ext? f "org")))
		    (buffer-list)))
   fontify))


(defun ivy-org-jump-to-recent-headline (&optional fontify)
  "Jump to a headline in an org-file in `recentf-list'."
  (interactive)
  (ivy-org-jump-to-heading-in-files
   (-filter (lambda (f) (f-ext? f "org")) recentf-list)
   fontify))


(defcustom scimax-ivy-jump-functions
  '((heading . ivy-org-jump-to-heading)
    (visible . ivy-org-jump-to-visible-headline)
    (sentence . ivy-jump-to-visible-sentence)
    (recent-org ivy-org-jump-to-recent-headline)
    (directory . ivy-org-jump-to-heading-in-directory)
    (project . ivy-org-jump-to-project-headline )
    (agenda ivy-org-jump-to-agenda-heading))
  "alist of jump functions. The first one is the default.")


(defun ivy-org-jump (&optional arg)
  "Jump to a location in org file. The default is the first entry
in `scimax-ivy-jump-functions'. With a prefix arg, you can choose
the scope."
  (interactive "P")
  (let ((jumpfn (if arg (cdr (assoc (intern-soft (ivy-read "Scope: " scimax-ivy-jump-functions)) scimax-ivy-jump-functions))
		  ;; the default choice.
		  (cdr (car scimax-ivy-jump-functions)))))
    (funcall jumpfn)))

#+END_SRC

*** Better return
:PROPERTIES:
:ID:       A4E26EAE-9189-4000-807B-B2BF2778A3F8
:END:

#+BEGIN_SRC emacs-lisp
;; * A better return

(defun scimax/org-return (&optional ignore)
  "Add new list item, heading or table row with RET.
A double return on an empty element deletes it.
Use a prefix arg to get regular RET. "
  (interactive "P")
  (if ignore
      (org-return)
    (cond

     ((eq 'line-break (car (org-element-context)))
      (org-return-indent))

     ;; Open links like usual, unless point is at the end of a line.
     ;; and if at beginning of line, just press enter.
     ((or (and (eq 'link (car (org-element-context))) (not (eolp)))
	  (bolp))
      (org-return))

     ;; It doesn't make sense to add headings in inline tasks. Thanks Anders
     ;; Johansson!
     ((org-inlinetask-in-task-p)
      (org-return))

     ;; checkboxes - add new or delete empty
     ((org-at-item-checkbox-p)
      (cond
       ;; at the end of a line.
       ((and (eolp)
	     (not (eq 'item (car (org-element-context)))))
	(org-insert-todo-heading nil))
       ;; no content, delete
       ((and (eolp) (eq 'item (car (org-element-context))))
	(setf (buffer-substring (line-beginning-position) (point)) ""))
       ((eq 'paragraph (car (org-element-context)))
	(goto-char (org-element-property :end (org-element-context)))
	(org-insert-todo-heading nil))
       (t
	(org-return))))

     ;; lists end with two blank lines, so we need to make sure we are also not
     ;; at the beginning of a line to avoid a loop where a new entry gets
     ;; created with only one blank line.
     ((org-in-item-p)
      (cond
       ;; empty definition list
       ((and (looking-at " ::")
	     (looking-back "- " 3))
	(beginning-of-line)
	(delete-region (line-beginning-position) (line-end-position)))
       ;; empty item
       ((and (looking-at "$")
	     (looking-back "- " 3))
	(beginning-of-line)
	(delete-region (line-beginning-position) (line-end-position)))
       ;; numbered list
       ((and (looking-at "$")
	     (looking-back "[0-9]+. " (line-beginning-position)))
	(beginning-of-line)
	(delete-region (line-beginning-position) (line-end-position)))
       ;; insert new item
       (t
	(end-of-line)
	(org-insert-item))))

     ;; org-heading
     ((org-at-heading-p)
      (if (not (string= "" (org-element-property :title (org-element-context))))
	  (progn
	    ;; Go to end of subtree suggested by Pablo GG on Disqus post.
	    (org-end-of-subtree)
	    (org-insert-heading-respect-content)
	    (outline-show-entry))
	;; The heading was empty, so we delete it
	(beginning-of-line)
	(setf (buffer-substring
	       (line-beginning-position) (line-end-position)) "")))

     ;; tables
     ((org-at-table-p)
      (if (-any?
	   (lambda (x) (not (string= "" x)))
	   (nth
	    (- (org-table-current-dline) 1)
	    (remove 'hline (org-table-to-lisp))))
	  (org-return)
	;; empty row
	(beginning-of-line)
	(setf (buffer-substring
	       (line-beginning-position) (line-end-position)) "")
	(org-return)))

     ;; fall-through case
     (t
      (org-return)))))


(defcustom scimax-return-dwim t
  "When t redefine the Ret behavior to add items, headings and table rows."
  :group 'scimax)


(when scimax-return-dwim
  (define-key org-mode-map (kbd "RET")
    'scimax/org-return))

#+END_SRC

#+RESULTS:
: scimax/org-return

*** TODO Numbered headings and overlays
*** TODO PDF and EPS images in org mode
** COMMENT scimax-yas
:PROPERTIES:
:ID:       259205AA-4D49-4917-B79D-0A785822C33F
:END:

#+BEGIN_SRC emacs-lisp
  (use-package scimax-yas
    :init (setq scimax-snippet-dir (sr/fun/emacs-dir "snippets"))
    :straight (scimax-yas :local-repo "scimax-subset" :files ("scimax-yas.el")))
(require 'scimax-yas)
#+END_SRC

#+RESULTS:
: scimax-yas

** scimax-ivy
:PROPERTIES:
:ID:       5883CE00-AEAE-46E3-8C47-B74554B7F0CD
:END:
#+BEGIN_SRC emacs-lisp
  (use-package scimax-ivy
    :straight (scimax-ivy :local-repo "scimax-subset" :files ("scimax-ivy.el")))
(require 'scimax-ivy)
#+END_SRC

#+RESULTS:
: scimax-ivy
** scimax-apps
:PROPERTIES:
:ID:       217D4F99-21D9-4FEE-8ACC-24113C70A750
:END:

#+BEGIN_SRC emacs-lisp
  (use-package scimax-apps
    :after scimax-org
    :straight (scimax-apps :local-repo "scimax-subset" :files ("scimax-apps.el")))
(require 'scimax-apps)
#+END_SRC

#+RESULTS:
: scimax-apps

** TODO scimax-hydra
:PROPERTIES:
:ID:       D3004CAB-BFAF-48B8-8FBA-7CB75FC33007
:END:
- Note taken on [2020-03-24 Tue 10:38] \\
  For some reason, the scimax-hydra package will not byte compile.

#+BEGIN_SRC emacs-lisp
(load-file (concat (sr/fun/emacs-dir "straight/repos/scimax-subset/scimax-hydras.el")))

;; (use-package scimax-hydra
;;   :straight (scimax-hydra :local-repo "scimax-subset" :files ("scimax-hydras.el"))
;;   :bind ("<f12>" . scimax/body))
;; (require 'scimax-hydras)
#+END_SRC

#+RESULTS:
: scimax/body
** scimax-notebook
:PROPERTIES:
:ID:       D6B5E656-0A40-4B50-A37C-889FE990C063
:END:

#+BEGIN_SRC emacs-lisp

(use-package scimax-notebook
  :straight (scimax-notebook :local-repo "scimax-subset" :files ("scimax-notebook.el"))
  :bind ("M-s n" . 'nb-hydra/body)
  :config 
(setq nb-notebook-directory "~/my_projects/"))
;; (global-set-key (kbd "M-s n") 'nb-hydra/body))
(require 'scimax-notebook)
#+END_SRC

#+RESULTS:
: scimax-notebook

** COMMENT scimax-journal
:PROPERTIES:
:ID:       61A12586-DAA7-4601-92F3-DD688B9725D5
:END:
- Note taken on [2020-04-10 Fri 18:37] \\
  Switching back to org-journal

#+BEGIN_SRC emacs-lisp
(use-package scimax-journal
  :init (setq scimax-journal-root-dir "~/my_org/journal/")
  :bind ("H-j" . scimax-journal/body)
  :straight (scimax-journal :local-repo "scimax-subset" :files ("scimax-journal.el")))
(require 'scimax-journal)
#+END_SRC

#+RESULTS:
: scimax-journal
** COMMENT scimax utils

#+BEGIN_SRC emacs-lisp
  (use-package scimax-utils
    :straight (scimax-utils :local-repo "scimax-subset" :files ("scimax-utils.el")))
(require 'scimax-utils)
#+END_SRC

#+RESULTS:
: scimax-utils
** scimax-ipython
:PROPERTIES:
:ID:       06455092-7B57-4E40-A474-6252B67B4D1B
:END:

- [X] use the file keyword to add the client.py file as a symlink. Note here that the entire list of files have to be provided.

#+BEGIN_SRC emacs-lisp
    (use-package ob-ipython
      :straight (ob-ipython :host github :repo "gregsexton/ob-ipython" :files ("client.py" "ob-ipython.el"))
      :config
      (require 'ob-ipython))

  ;;; * Applying John's customisations and monkeypatches 
  ;;; These are related to ipython kernel management
  ;;; * These  are related mostly to org-babel customisations
    (use-package scimax-ob
      :straight (scimax-ob :local-repo "scimax-subset" :files ("scimax-ob.el")))

    (use-package scimax-org-babel-ipython-upstream
          :straight (scimax-org-babel-ipython-upstream  :local-repo "scimax-subset" :files ("scimax-org-babel-ipython-upstream.el")))


#+END_SRC

#+RESULTS:

scimax-ipython upstream

#+BEGIN_SRC emacs-lisp :tangle no
(require 'scimax-org-babel-ipython-upstream)
(require 'scimax-ob)
#+END_SRC

#+RESULTS:
: scimax-ob
** COMMENT scimax-elfeed 

#+BEGIN_SRC emacs-lisp
(use-package scimax-elfeed
  :straight (scimax-elfeed :local-repo "scimax-subset" :files ("scimax-elfeed.el")))
#+END_SRC

#+RESULTS:
* Aesthetics
- Note taken on [2020-04-24 Fri 20:06] \\
  I've tried quite a few themes over the years, and have even had phases
  where I was constantly changing themes. One caveat I've noticed is that
  not all themes are designed to work well with the terminal as
  well. After yet another quick foray into the Doom themes today - I will
  settle down on the following themes to be the best for me (note that
  relatively minor customisations like the font, proportional headings and
  so on are made to all)
  
  1. Modus operandi: well designed light theme that does not hurt my eyes
     and offers a good basic configuration. This theme appears to work
     well with terminal emacs as well.
  2. Zenburn : As many say, this theme is definitely the easiest on my
     eyes and will be a preferred dark theme. There are a tonne of
     configuration options out of the box.
  3. Modus vivendi: This is a good dark theme that I prefer since it is
     based on similar design principles as the modus operandi. However,
     the contrast is jarring as compared to the mute nature of the Zenburn
     theme. I would not want to use the Modus vivendi theme for long
     durations in low light.
  4. Leuven: I used this theme for a long time when I was on
     Scimax. Undoubtedly this light theme has its advantages, however, it
     seems a little too opinionated on a lot of things, and I would prefer
     a lighter theme that also plays well on terminals.
  5. Doom's solarized dark theme: this is an honorable mention. As a dark theme
     that does not hurt the themes - this is similar to zenburn, but not
     as good looking.
** Setting custom themes to be safe
:PROPERTIES:
:ID:       E7FEA82C-0CCD-40D2-842A-E6797A9BB3BF
:END:

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC

** Theme : modus
:PROPERTIES:
:ID:       1F5F41EC-6BDA-46BC-B1E6-DED28B899196
:END:

*** modus operandi
#+BEGIN_SRC emacs-lisp
(straight-use-package 'modus-operandi-theme)

(use-package modus-operandi-theme
:straight t
:config
(setq modus-operandi-theme-scale-headings t)
(setq modus-operandi-theme-proportional-fonts t)
(setq modus-operandi-theme-slanted-constructs t)
(setq modus-operandi-theme-visible-fringes t)
(setq modus-operandi-theme-distinct-org-blocks t)
(load-theme 'modus-operandi t))

;; These are placed here for ready reference
;; (setq modus-operandi-theme-scale-1 1.05)
;; (setq modus-operandi-theme-scale-2 1.1)
;; (setq modus-operandi-theme-scale-3 1.15)
;; (setq modus-operandi-theme-scale-4 1.2)

#+END_SRC

#+RESULTS:
: t

*** COMMENT modus vivendi

#+BEGIN_SRC emacs-lisp  
(straight-use-package 'modus-vivendi-theme)

(use-package modus-vivendi-theme
:straight t
:config
(setq modus-vivendi-theme-scale-headings t)
(setq modus-vivendi-theme-proportional-fonts t)
(setq modus-vivendi-theme-slanted-constructs t)
(setq modus-vivendi-theme-visible-fringes t)
(setq modus-vivendi-theme-distinct-org-blocks t)
(load-theme 'modus-vivendi t))

;; These are placed here for ready reference
;; (setq modus-vivendi-theme-scale-1 1.05)
;; (setq modus-vivendi-theme-scale-2 1.1)
;; (setq modus-vivendi-theme-scale-3 1.15)
;; (setq modus-vivendi-theme-scale-4 1.2)

#+END_SRC

** Font and other aesthetics
*** COMMENT Old config
#+BEGIN_SRC emacs-lisp
;; My customisations
(set-face-attribute 'default nil :family "iA Writer Mono V" :height 130)
;; (set-face-attribute 'default nil :family "Iosevka term" :height 130)
(set-face-attribute 'fixed-pitch nil :family "Iosevka term")
(set-face-attribute 'variable-pitch nil :family "iA Writer Mono V")
#+END_SRC

#+RESULTS:

*** Fixed pitch and variable pitch fonts
:PROPERTIES:
:ID:       7257A394-D3EE-4918-9939-1BA885C1A51E
:END:

#+BEGIN_SRC emacs-lisp
(custom-theme-set-faces
 'user
 '(variable-pitch ((t (:family "iA Writer Mono V"))))
 '(fixed-pitch ((t ( :family "Iosevka term" 
			     :slant normal 
			     :weight normal 
			     :height 1.1
			     :width normal)))))

;; Setting the default general font 
(set-face-attribute 'default nil 
		    :family "iA Writer Mono V" 
		    :height 130
		    )

#+END_SRC

#+RESULTS:

*** Faces for specific org elements
:PROPERTIES:
:ID:       3C14EDA6-1BA3-4FE0-ADA5-FF6D7424B38D
:END:

#+BEGIN_SRC emacs-lisp
(custom-theme-set-faces
 'user
 '(org-block ((t (:inherit fixed-pitch))))
 '(org-code ((t (:inherit (shadow variable-pitch)))))
 '(org-document-info ((t (:foreground "dark orange"))))
 '(org-document-info-keyword ((t (:inherit (shadow fixed-pitch)))))
 '(org-indent ((t (:inherit (org-hide variable-pitch)))))
 '(org-link ((t (:foreground "royal blue" :underline t))))
 '(org-meta-line ((t (:inherit (font-lock-comment-face -pitch)))))
 '(org-property-value ((t (:inherit fixed-pitch))) t)
 '(org-special-keyword ((t (:inherit (font-lock-comment-face fixed-pitch)))))
 '(org-table ((t (:inherit fixed-pitch :foreground "#83a598"))))
 '(org-tag ((t (:inherit (shadow fixed-pitch) :weight bold :height 0.8))))
 '(org-verbatim ((t (:inherit (shadow variable-pitch))))))

#+END_SRC

#+RESULTS:

** Fill column and auto fill

#+BEGIN_SRC emacs-lisp
(setq-default fill-column 72)
(global-visual-line-mode 1)
(add-hook 'text-mode-hook 'auto-fill-mode)
#+END_SRC

** COMMENT Visual Fill Column and global visual line   
:PROPERTIES:
:ID:       5113A22F-D29A-4AAD-A1CE-937983FCF06C
:END:
- Note taken on [2020-04-01 Wed 08:43] \\
  I have had trouble in using the visual fill column mode. Overall it
  does what I want it to do, however, some modes simply do not lend
  themselves very well to the visual fill column mode. Git gutter
  vanishes for example. Split buffers have a different behaviour from
  the usual. In general, it seems most people set a default fill column,
  and a hook for the automatic fill mode and then the global visual line
  mode.

I think it makes sense to have the global visual fill column mode active
and then have the visual line mode to

#+BEGIN_SRC emacs-lisp
;; (straight-use-package 'visual-fill-column)

;; Putting this into a function because I want these settings called
;; again when a frame is created.
(defun sr/fun/visual-fill-line()
(interactive)
(setq-default fill-column 72)
(global-visual-line-mode 1)
;; (visual-fill-column-mode)
;; (add-hook 'visual-line-mode-hook #'visual-fill-column-mode))
;; (add-hook 'visual-fill-column-mode-hook #'visual-line-mode))

;; Placing this function here so that if emacs is run as an bapp - the
;; settings will still be in effect.
(sr/fun/visual-fill-line)

;; ;; No visual fill column for the agenda (remove-hook 'org-agenda-mode
;; '(lambda () (setq visual-fill-column-mode nil)))
#+END_SRC

#+RESULTS:
| visual-fill-column-mode | visual-line-mode-set-explicitly |

** Doom modeline
- Note taken on [2020-04-24 Fri 20:16] \\
  The doom modeline possibly adds some extra seconds to the load
  time. This has to be investigated. However, the aesthetics would seem to
  make it well worth it.

- [[https://ladicle.com/post/config/#doom-dracula-theme-modeline][Ladicle's Emacs Configuration]]

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :straight t
  :custom
  (doom-modeline-buffer-file-name-style 'truncate-with-project)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-icon nil)
  (doom-modeline-minor-modes nil)
  (doom-modeline-lsp t)
  (doom-modeline-mu4e t)
  (doom-modeline-env-version t)
  :hook
  (after-init . doom-modeline-mode)
  :config
  (line-number-mode 0)
  (column-number-mode 0)
  (doom-modeline-def-modeline 'main
    '(bar window-number matches buffer-info remote-host buffer-position selection-info)
    '(misc-info persp-name lsp github debug minor-modes input-method major-mode process vcs checker)))

#+END_SRC

** COMMENT Org Aesthetics Headline scales
- Note taken on [2020-03-28 Sat 19:56] \\
  These are not required for the modus theme, as inbuilt options exist upto level 4.

#+BEGIN_SRC emacs-lisp  

(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.5 :weight bold))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.3 :weight bold))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.2 :weight bold))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.1 :weight bold))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0 :weight bold)))))
#+END_SRC

#+RESULTS:

** COMMENT Olivetti mode
- Note taken on [2020-03-28 Sat 20:04] \\
  The problem with this mode is that it seems to activate and deactivate constantly, especially when the buffer is saved. However it is certainly very useful with wide screens in general.

This package is useful in centering the text in a buffer, and is particularly helpful with wide screens.

#+BEGIN_SRC emacs-lisp
(use-package olivetti
:config
(olivetti-mode 1))

#+END_SRC
** COMMENT Spaceline : modeline configuration
   :PROPERTIES:
   :ID:       1505e226-1321-4f3c-89e9-9dc8a5c91bd0
   :END:
- [X] [[http://pragmaticemacs.com/emacs/get-that-spacemacs-look-without-spacemacs/][Get that spacemacs look without spacemacs | Pragmatic Emacs]] - this provides a bare bones setup
- [ ] [[http://amitp.blogspot.com/2017/01/emacs-spaceline-mode-line.html][Amit's Thoughts: Emacs spaceline mode line]] : This is an excellent guide covering a lot of possibilities to customise so many aspects of the modeline and make it look great.
- [ ] It seems that spaceline adds a few extra seconds to the init time. I wonder if there are lighter packages that achieve the same effect.

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :straight t
  :init
  (setq powerline-default-separator 'arrow-fade)
  :config
  (disable-theme 'smart-mode-line-light)
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-toggle-buffer-position-off)
  (spaceline-toggle-hud-off)
  (setq spaceline-python-pyvenv-on 1)
  (spaceline-toggle-minor-modes-off))
  #+END_SRC

#+RESULTS:
: t

** Striking out Done headlines
:PROPERTIES:
:ID:       3263d812-c3f5-4947-b2de-c75c537d19df
:END:

source: Sacha Chua

#+begin_src emacs-lisp
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "DarkGreen"
			     :weight normal
			     :strike-through t))))
 '(org-headline-done
   ((((class color) (min-colors 16) (background dark))
     (:foreground "LightSalmon" :strike-through t)))))
#+end_src

#+RESULTS:

** keywords as boxes with inverted colors
:PROPERTIES:
:ID:       62dcdc53-ee2f-4db2-afda-6b68a05cbeda
:END:

Source : SO [[https://stackoverflow.com/questions/12707492/add-custom-markers-to-emacs-org-mode][link]] ,

#+BEGIN_SRC emacs-lisp
(set-face-attribute 'org-todo nil
                    :box '(:line-width 2
                           :color "black"
                           :style released-button)
                    :inverse-video t
                    )
(set-face-attribute 'org-done nil
                    :box '(:line-width 2
                           :color "black"
                           :style released-button)
                    :inverse-video t
                    )
(set-face-attribute 'org-priority nil
                    :inherit font-lock-keyword-face
                    :inverse-video t
                    :box '(:line-width 2
                           :color "black"
                           :style released-button)
                    )
#+END_SRC

#+RESULTS:

** Remove the bars and startup messages
:PROPERTIES:
:ID:       38F9FE46-13E7-4281-8DC0-7C9F9AAB673C
:END:

#+BEGIN_SRC emacs-lisp
;; Removing all the bars 
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; No start up message and nothing to pollute the scratch buffer
(setq inhibit-startup-message t initial-scratch-message nil)
#+END_SRC
* Hugo
** ox-hugo setup

#+BEGIN_SRC emacs-lisp
(use-package ox-hugo
  :ensure t
  :after ox
  :custom
  (org-hugo--tag-processing-fn-replace-with-hyphens-maybe t)
(require 'ox-hugo)
  )
#+END_SRC

#+RESULTS:
** TODO Auto-generate some properties 

The earlier procedure by choice was to use the org-id to name
posts. This ensured that the post URL's would remain unique and
indifferent to a title. However, this does not make for a human-friendly
url to quickly distinguish which post is being referred to. Even so, I
would like to generate some properties and attributes based on the
heading, tags and so on. 

* Loading secret config
:PROPERTIES:
:ID:       F71603D8-BA36-4055-9417-FFED3ABF9E4B
:END:

#+BEGIN_SRC emacs-lisp
;; Loading secret config containing personal information
(org-babel-load-file (sr/fun/emacs-dir "sr-secrets.org.gpg"))
#+END_SRC

#+RESULTS:
: Loaded /Users/shrysr/.emacs.d/sr-secrets.org.el

* COMMENT Testing Area
:PROPERTIES:
:END:

This section will be the place where all new packages and their settings make an entrance. In short the test will be that they are not activated by default and if I seek out the package, that would mean I find it useful to include in my main configuration.

** Enhanced python config
*** TODO COMMENT Adapted python config
Source [[https://github.com/PythonNut/quark-emacs/blob/dev/modules/config-python.el][quark-emacs/config-python.el at dev 路 PythonNut/quark-emacs 路 GitHub]]

This is a nice and detailed configuration for python that is worth
studying. I will be adapting this to my purposes. 

**** Find local virtualenv
- Note taken on [2020-04-05 Sun 15:16] \\
  THe savehist package needs to be installed to use this
  configuration. I have taken a minimal bunch of settings. This appears
  to be setup to work with finding the local executable for poetry or
  pipenv. Apparently the savehist package will replace the minibuffer
  and so this is not a snippet that can be loaded at anytime, i.e it
  needs to be loaded at Emacs init.

#+BEGIN_SRC emacs-lisp
(use-package savehist
  :straight t
  :init
  (autoload 'savehist-minibuffer-hook "savehist")
  (autoload 'savehist-autosave "savehist")
  (autoload 'savehist-uninstall "savehist"))

(defun my/python-find-virtualenv (&optional dir)  
  "Find a virtualenv corresponding to the current buffer.  
   Return either a string or nil."  
  (message "Searching for Python virtual environment at %s" default-directory)  
  (let* ((default-directory (or dir default-directory))  
	 (path  
	  (cl-block nil  
	    (when (and (my/local-executable-find "poetry")  
		       (locate-dominating-file default-directory  
					       "pyproject.toml"))  
	      ;; First, we try poetry env, which is safe and a bit  
	      ;; faster, but only works in poetry versions 1.0 and up  
	      (cl-destructuring-bind (return-code . output)  
		  (my/process-file-to-string "poetry" nil '(t nil) nil  
					     "env"  
					     "info"  
					     "-p")  
		(when (= 0 return-code)  
		  (cl-return output)))  
	      ;; Fall back to poetry <1.0 check TODO: This code  
	      ;; will become stale over time, so get rid of it  
	      ;; after a while.  
	      ;; Radon: May create virtualenv, but whatever.  
	      (cl-destructuring-bind (return-code . output)  
		  (my/process-file-to-string "poetry" nil '(t nil) nil  
					     "run"  
					     "which"  
					     "python")  
		(when (and (= 0 return-code)  
			   (string-match (rx bol  
					     (group (1+ any))  
					     "/bin/python\n")  
					 output))  
		  (cl-return (match-string 1 output)))))  
	    (when (and (my/local-executable-find "pipenv")  
		       (locate-dominating-file default-directory  
					       "Pipfile"))  
	      (cl-destructuring-bind (return-code . output)  
		  (my/process-file-to-string "pipenv" nil '(t nil) nil  
					     "--venv")  
		(when (= 0 return-code)  
		  (cl-return (string-trim output)))))))  
	 (universal-path (if (tramp-tramp-file-p default-directory)  
			     (my/tramp-build-name-from-localname path)  
			   path)))  
    (when (file-directory-p universal-path)  
      (substring-no-properties universal-path))))  

(defvar my/python-virtualenv-cache nil)  
(add-to-list 'savehist-additional-variables 'my/python-virtualenv-cache)  

(defun my/python-find-virtualenv-cached (&optional dir)  
  (let* ((dir (or dir default-directory))  
	 (pyproject (locate-dominating-file dir "pyproject.toml")))  
    (unless my/python-virtualenv-cache  
      (setq my/python-virtualenv-cache (make-hash-table :test #'equal)))  
    (if (and (my/local-executable-find "poetry")  
	     dir  
	     (not (file-exists-p (expand-file-name ".venv" dir))))  
	(let ((cached (or (gethash dir my/python-virtualenv-cache)  
			  (puthash dir  
				   (my/python-find-virtualenv dir)  
				   my/python-virtualenv-cache))))  
	  (if (file-exists-p cached)  
	      cached  
	    (my/python-find-virtualenv dir)))  
      (my/python-find-virtualenv dir))))  
#+END_SRC

**** Remote python

#+BEGIN_SRC emacs-lisp
   (with-eval-after-load 'pythonic  
   (eval-when-compile  
   (with-demoted-errors "Load error: %s"  
   (require 'tramp)))  
     
   (defvar my/pythonic-remote-host-cache nil)  
   (defun nadvice/pythonic-remote-host ()  
   "Get host of the connection to the remote python interpreter."  
   (unless my/pythonic-remote-host-cache  
   (setq my/pythonic-remote-host-cache (make-hash-table :test #'equal)))  
     
   (with-parsed-tramp-file-name default-directory parsed  
   (let ((hostname (replace-regexp-in-string "#.*\\'" "" parsed-host)))  
   (if (member parsed-method '("ssh"  
   "scp"  
   "scpx"  
   "sshx"  
   "rsync"))  
   (or (gethash hostname my/pythonic-remote-host-cache)  
   (puthash hostname  
   (with-temp-buffer  
   (call-process "ssh" nil t nil "-G" hostname)  
   (goto-char (point-min))  
   (search-forward "\nhostname ")  
   (buffer-substring-no-properties (point) (line-end-position)))  
   my/pythonic-remote-host-cache))  
   hostname))))  
   (advice-add 'pythonic-remote-host :override #'nadvice/pythonic-remote-host))  
     
#+END_SRC

**** pyvenv

#+BEGIN_SRC emacs-lisp
(use-package pyvenv  
  :config  
  (defun nadvice/pyvenv-activate (&optional arg)  
    (interactive "P")  
    (let ((default-venv (my/python-find-virtualenv-cached)))  
      (if (or (not default-venv) (consp (car arg)))  
	  (list (read-directory-name "Activate venv: "))  
	(list default-venv))))  
  
  (advice-add 'pyvenv-activate :filter-args #'nadvice/pyvenv-activate))  
#+END_SRC

**** TODO ms-lsp detailed config
*** TODO COMMENT Standard set of requirements for pip installations
- Note taken on [2020-04-05 Sun 15:37] \\
  The goal is to create a standard set of installations for any
  virtualenvironment that is created. This basic set can be built further
  as required.

#+BEGIN_SRC sh :tangle no
pip install numpy pandas jupyter scikitlearn black 
#+END_SRC


** Org spacer

#+BEGIN_QUOTE
This simple package allows you to enforce the number of blanks lines after elements in an org-mode document.
#+END_QUOTE

Perhaps this package can extended as some tool belt of org utilities. Some ideas: 

1. [ ] Addressing duplicate org-id headlines
2. [ ] Clearing all the values of a specified property from an org file or perhaps multiple org files.
3. [ ] Finding how many org file link to the duplicate org id's
4. [ ] Tagging a whole bunch of org entries.
5. [ ] Spaces before and after source code blocks


#+BEGIN_SRC emacs-lisp
(use-package org-spacer
  :straight (org-spacer :type git :host github :repo "dustinlacewell/org-spacer.el"))
:config
;; ;; As a before save hook
;; (add-hook 'org-mode-hook
;;           (lambda () (add-hook 'before-save-hook
;;                           'org-spacer-enforce nil 'make-it-local)))
;; Blank spaces directly after headlines
(setq org-spacer-element-blanks
  '((0 headline)
    (1 paragraph src-block table property-drawer)))
#+END_SRC

#+RESULTS:
| 0 | headline  |           |       |                 |
| 1 | paragraph | src-block | table | property-drawer |

** STABLE Pinboard [1/2]
CLOSED: [2020-01-19 Sun 14:33]
:PROPERTIES:
:ID:       B1A6F6F9-0713-456A-826E-DCE6E83E2AFF
:END:

- Note taken on [2020-03-22 Sun 20:29] \\
  This will need digestion of the org secrets file.

To get started, visit your password settings page on Pinboard and get the API token that's displayed there.

Then edit ~/.authinfo and add a line like this:

#+BEGIN_SRC sh
machine api.pinboard.in password foo:8ar8a5w188l3
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package pinboard
:ensure t
)
#+END_SRC

#+RESULTS:

- [X] Figure out the auth file settings from before
- [ ] Checkout the org mode snippet [[https://gist.github.com/khinsen/7ed357eed9b27f142e4fa6f5c4ad45dd][link]]
** Python source block tests
- Syntax highlighting is taking place
- 

#+BEGIN_SRC ipython
# THis is a comment 
import numpy as np
print(np.array([5,4]))
#+END_SRC

#+RESULTS:
:results:
# Out [1]: 
# output
[5 4]

:end:



#+BEGIN_SRC ipython
import numpy as np

import sys
print(sys.path)

#+END_SRC

#+RESULTS:
:results:
['/Users/shrysr/.emacs.d', '/Users/shrysr/.pyenv/versions/3.7.5/lib/python37.zip', '/Users/shrysr/.pyenv/versions/3.7.5/lib/python3.7', '/Users/shrysr/.pyenv/versions/3.7.5/lib/python3.7/lib-dynload', '', '/Users/shrysr/.virtualenvs/ds-base/lib/python3.7/site-packages', '/Users/shrysr/.virtualenvs/ds-base/lib/python3.7/site-packages/IPython/extensions', '/Users/shrysr/.ipython']
:end:



#+BEGIN_SRC python
import sys
print(sys.path)
#+END_SRC

#+RESULTS:
: ['', '/Users/shrysr/.pyenv/versions/3.7.5/lib/python37.zip', '/Users/shrysr/.pyenv/versions/3.7.5/lib/python3.7', '/Users/shrysr/.pyenv/versions/3.7.5/lib/python3.7/lib-dynload', '/Users/shrysr/.local/pipx/venvs/numpy/lib/python3.7/site-packages', '/Users/shrysr/.local/pipx/shared/lib/python3.7/site-packages']

#+BEGIN_SRC zsh :tangle no
pipx inject numpy jupyter
#+END_SRC

#+RESULTS:

** Modeline adjustments

 #+BEGIN_SRC emacs-lisp
 ;; (defun set-eyeliner-colors ()
 ;; (setq buffer-name-color "#ff0000")
 ;; (setq buffer-name-modified-color "#ff0000")
 ;; (setq eyeliner/warm-color (theme-color 'red))
 ;; (setq eyeliner/cool-color (theme-color 'cyan))
 ;; (setq eyeliner/plain-color (theme-color 'foreground))
 ;; (custom-set-faces
 ;; `(powerline-active0
 ;; ((t (:background ,(theme-color 'foreground)))))
 ;; `(powerline-inactive0
 ;; ((t (:background ,(theme-color 'foreground)))))
 ;; `(powerline-active1
 ;; ((t (:background ,(theme-color 'foreground)
 ;; :foreground ,(theme-color 'background)))))
 ;; `(powerline-inactive1
 ;; ((t (:background ,(theme-color 'foreground)
 ;; :foreground ,(theme-color 'background)))))
 ;; `(powerline-active2
 ;; ((t (:background ,(theme-color 'background)))))
 ;; `(powerline-inactive2
 ;; ((t (:background ,(theme-color 'background)))))))

 ;; (eval `(use-package eyeliner
 ;; ;; :straight (eyeliner :type git :host github :repo "dustinlacewell/eyeliner")
 ;; :demand t
 ;; :straight (eyeliner :local-repo ,(my/project-directory "eyeliner"))
 ;; :config
 ;; (spaceline-helm-mode 1)
 ;; (set-eyeliner-colors)
 ;; (eyeliner/install)))

 #+END_SRC

** helpful

#+BEGIN_SRC emacs-lisp
(use-package helpful :straight (helpful :type git :host github :repo "Wilfred/helpful"))

(use-package helpful
:straight (helpful :type git :host github :repo "Wilfred/helpful")
:bind (("C-h f" . #'helpful-callable)
("C-h v" . #'helpful-variable)
("C-h k" . #'helpful-key)))

#+END_SRC

#+RESULTS:
: helpful-key

** Linkmarks

#+BEGIN_SRC emacs-lisp
(use-package linkmarks
  :straight (linkmarks 
	     :type git 
	     :host github 
	     :repo "dustinlacewell/linkmarks")
  :config
(setq linkmarks-file "~/my_org/emacs_meta/bookmarks.org"))

 #+END_SRC

 #+RESULTS:
 : t
** outshine

#+BEGIN_SRC emacs-lisp
(use-package outshine
:init (defvar outline-minor-mode-prefix "\M-#")
:config (setq outshine-use-speed-commands t)
:hook ((emacs-lisp-mode . outshine-mode)
(nix-mode . outshine-mode)
(python-mode . outshine-mode)))

#+END_SRC

#+RESULTS:
| outshine-mode |
** TODO Ensure one line space between org headlines

While this improves readability, the main reason is an odd color of the source blocks which bleeds into the headings. This snippet will ensure a single space between blocks which prevents the above.

- [ ] Add a new line after the last header as well.
- [ ] Check why the before save hook does not seem to work.

   #+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
(defun org-mode--ensure-one-blank-line ()
(save-excursion
(goto-char (point-min))
(while (re-search-forward "#\\+[a-z_]+\\s-\\*" nil t)
(replace-match "#+end_src

*")
(call-interactively 'org-previous-visible-heading)
(call-interactively 'org-cycle)
(call-interactively 'org-cycle))
(org-save-outline-visibility t
(org-mode))))

(add-hook
'org-mode-hook
(lambda () (add-hook
'before-save-hook
'org-mode--ensure-one-blank-line
nil 'make-it-local))))

   #+END_SRC

   #+RESULTS:
   | (lambda nil (add-hook (quote before-save-hook) (quote org-mode--ensure-one-blank-line) nil (quote make-it-local))) | org-bullets-mode | org-indent-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |

** TEST Perspective and persp-projectile
** Theme : org-beautify
:PROPERTIES:
:ID:       C93143D4-EEC8-4D14-A008-1E74BF447D63
:END:
- Note taken on [2020-03-22 Sun 08:59] \\
  The poet theme seems a better candidate for hacking, primarily from the point
  of view of a better base to begin from, and also that there are light and
  dark themes available out of the box. 

Found this theme thanks to Dustin. It feels therapeutic, though Leuven and Zenburn are great themes in their own right. Maybe I'll consider using zenburn as my dark theme and org-beautify as the light version. It may even be worth creating a darker version of teh org-beautify theme.

 #+BEGIN_SRC emacs-lisp :tangle no
 (use-package org-beautify-theme
 :after (org)
 :config
 (setq org-fontify-whole-heading-line t)
 (setq org-fontify-quote-and-verse-blocks t)
 (setq org-hide-emphasis-markers t))

 #+END_SRC

 #+RESULTS:
 : t
** TODO Theme : Zenburn
For a long period, I was using the zenburn theme and had started customising it for my needs. However, I think leuven with a greyish background is really quite suitable. Even so, it's nice to have a dark theme available when required. I'm keeping this around for tinkering down the line.

*** Disabling leuven and loading other theme
   :PROPERTIES:
   :ID:       ecce6509-d04c-4e2d-a6a6-c5cd63b1e2e7
   :END:

#+BEGIN_SRC emacs-lisp
(disable-theme 'leuven)
;;(load-theme 'spacemacs-dark t)
(load-theme 'zenburn t)
#+END_SRC

*** TEST Background color for org source Blocks
   :PROPERTIES:
   :ID:       5dfffd10-35b1-495f-8782-380f014b23ae
   :END:
This is necessary due to the customisation in scimax

#+BEGIN_SRC emacs-lisp
(set-face-background 'org-block-emacs-lisp "black")
(set-face-background 'org-block-python "black")
(set-face-background 'org-block-ipython "black")
(set-face-background 'org-block "black")
;; (set-face-background 'org-block-quote "black")
#+END_SRC

#+RESULTS:

*** TEST Initial setup of Zenburn
   :PROPERTIES:
   :ID:       06b3970f-94e2-4325-ae27-d63c1b3b796c
   :END:

#+BEGIN_SRC emacs-lisp
;; use variable-pitch fonts for some headings and titles
(setq zenburn-use-variable-pitch t)

;; scale headings in org-mode
(setq zenburn-scale-org-headlines t)

;; scale headings in outline-mode
(setq zenburn-scale-outline-headlines t)
#+END_SRC

*** TODO Use-package based template for customising zenburn

Source: https://github.com/m-parashar/emax64/issues/5

#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :demand t
  :config
  (load-theme 'zenburn t)
  (set-face-attribute 'font-lock-comment-face nil :italic t)
  (set-face-attribute 'font-lock-doc-face nil :italic t)
  (zenburn-with-color-variables
    (set-face-attribute 'button nil :foreground zenburn-yellow-2)
    (set-face-attribute 'default nil
                        :background zenburn-bg-05
                        :height mp/font-size-default
                        :font mp/font-family)
    (set-face-attribute 'help-argument-name nil :foreground zenburn-orange :italic nil)
    (set-face-attribute 'hl-line nil :background zenburn-bg+1)
    (set-face-attribute 'header-line nil
                        :background zenburn-bg-1
                        :box `(:line-width 2 :color ,zenburn-bg-1)
                        :height mp/font-size-header-line)
    (set-face-attribute 'mode-line nil
                        :box `(:line-width 2 :color ,zenburn-bg-1)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute 'mode-line-inactive nil
                        :box `(:line-width 2 :color ,zenburn-bg-05)
                        :foreground zenburn-bg+3
                        :height mp/font-size-mode-line)
    (set-face-attribute 'region nil
                        :background zenburn-fg-1
                        :distant-foreground 'unspecified)
    (set-face-attribute 'vertical-border nil :foreground zenburn-bg))

  ;; NOTE: See https://github.com/bbatsov/zenburn-emacs/issues/278.
  (zenburn-with-color-variables
    (mapc
     (lambda (face)
       (when (eq (face-attribute face :background) zenburn-bg)
         (set-face-attribute face nil :background 'unspecified)))
     (face-list))))
#+END_SRC

*** Setting font faces for headline level
   :PROPERTIES:
   :ID:       59bca88c-42dc-46b6-b556-d8f1eec81931
   :END:
- Note taken on [2019-03-28 Thu 07:09] \\
  This is available as in-built settings for the zenburn theme. However, once the font is changed, the

#+BEGIN_SRC emacs-lisp
(custom-set-faces
 '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.05))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.00))))
 '(org-level-5 ((t (:inherit outline-5 :height .95))))
 )
#+end_src

#+RESULTS:

** TODO org-babel
:PROPERTIES:
:header-args: tangle no
:END
Since I work a lot with org babel for my mixed code notebooks, this gets it's own section. I would like to incorporate useful scimax customisations for this as well.
- [ ] Incorporate Scimax's customisations in general
- [ ] Particularly incorporate ipython block customisation

*** Languages to load
:PROPERTIES:
:ID:       2FEFFC39-99A5-4C72-A814-008D82B49492
:END:
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((clojure . t)
     (scheme . t)
     (sqlite . t)
     (R . t)
     (lisp . t)
     (sql .  t)
     (shell . t)
     ;; (ipython . t)
  ;;   (jupyter . t)
  ;;   (ein . t)
     )
   )
#+end_src

*** TODO Default Header arguments and other options
:PROPERTIES:
:ID:       EC40BAAB-3EC9-4E5C-B90C-806AEDAB83DE
:END:
#+BEGIN_SRC emacs-lisp

(with-eval-after-load 'org
(setq org-babel-default-header-args
'((:session . "none")
(:results . "silent")
(:exports . "code")
(:cache . "no")
(:noweb . "no")
(:hlines . "no")
(:tangle . "no"))))

(with-eval-after-load 'org
  (setq org-confirm-babel-evaluate nil)
  (setq org-confirm-shell-link-function nil)
  (setq org-confirm-elisp-link-function nil))
#+END_SRC

* COMMENT Disabled
:PROPERTIES:
:ID:       50D44546-9A06-4F1D-A582-FAD07286D962
:LINK:     [[nb:.emacs.d::emacs-config.org::c154188]]
:END:

These are packages and snippets that disabled from tangling and execution and placed here for general reference. Some of them have been explored and discarded for various reasons. The rest are packages / features I could not get working satisfactorily.

** Old Hugo export functions
I was using these functions earlier to generate the essential properties
and export a post to hugo. My current workflow is using
ox-hugo. THe functions are slightly modified from where I picked them up
(Holger Scheurig, whose URL seems to be down).
*** Defining content directory
:PROPERTIES:
:ID:       3a7485ab-33cf-4e94-ac93-7063db94a094
:END:
- Note taken on [2019-02-07 Thu 08:06]  \\
  Need to check if this is still required since I have switche to ox-hugo

#+BEGIN_SRC emacs-lisp
(defvar hugo-content-dir "~/my_gits/hugo-sr/content/post/"
  "Path to Hugo's content directory")
#+END_SRC

*** Ensuring properties exist and creating if they dont exist
:PROPERTIES:
:ID:       e5a99a03-c3da-420c-ae9c-9ac6e50ecbdf
:END:

#+BEGIN_SRC emacs-lisp
(defun hugo-ensure-property (property)
  "Make sure that a property exists. If not, it will be created.
Returns the property name if the property has been created, otherwise nil."
  (org-id-get-create)
  (if (org-entry-get nil property)
      nil
    (progn (org-entry-put nil property "")
           property)))

(defun hugo-ensure-properties ()

  (require 'dash)
  (let ((current-time (format-time-string
                       (org-time-stamp-format t t) (org-current-time)))
        first)
    (save-excursion
      (setq first (--first it (mapcar #'hugo-ensure-property
                                      '("HUGO_TAGS" "HUGO_CATEGORIES"))))
      (unless (org-entry-get nil "HUGO_DATE")
        (org-entry-put nil "EXPORT_DATE" current-time)))
    (org-entry-put nil "EXPORT_FILE_NAME" (org-id-get-create))
    (org-entry-put nil "EXPORT_HUGO_CUSTOM_FRONT_MATTER" ":profile false")
    (when first
      (goto-char (org-entry-beginning-position))
      ;; The following opens the drawer
      (forward-line 1)
      (beginning-of-line 1)
      (when (looking-at org-drawer-regexp)
        (org-flag-drawer nil))
      ;; And now move to the drawer property
      (search-forward (concat ":" first ":"))
      (end-of-line))
    first))
#+END_SRC

#+RESULTS:
: hugo-ensure-properties

*** Hugo function calling the above
:PROPERTIES:
:ID:       c677537c-c70b-4be9-b91a-40bc283d5f40
:END:

#+BEGIN_SRC emacs-lisp
(defun hugo ()
  (interactive)
  (unless (hugo-ensure-properties)
    (let* ((type    (concat "type = \"" (org-entry-get nil "HUGO_TYPE") "\"\n"))
           (date     (concat "date = \""
                             (format-time-string "%Y-%m-%d"
                                                 (apply 'encode-time
                                                        (org-parse-time-string
                                                         (org-entry-get nil "HUGO_DATE"))) t) "\"\n"))
           (tags     (concat "tags = [ \""
                             (mapconcat 'identity
                                        (split-string
                                         (org-entry-get nil "HUGO_TAGS")
                                         "\\( *, *\\)" t) "\", \"") "\" ]\n"))
           (fm (concat "+++\n"
                       title
		       type
                       date
                       tags
                       topics
                       "+++\n\n"))
           (coding-system-for-write buffer-file-coding-system)
           (backend  'md)
           (blog))
      ;; try to load org-mode/contrib/lisp/ox-gfm.el and use it as backend
      (if (require 'ox-gfm nil t)
          (setq backend 'gfm)
        (require 'ox-md))
      (setq blog (org-export-as backend t))
      ;; Normalize save file path
      (unless (string-match "^[/~]" file)
        (setq file (concat hugo-content-dir file))
        (unless (string-match "\\.md$" file)
          (setq file (concat file ".md")))
        ;; save markdown
        (with-temp-buffer
          (insert fm)
          (insert blog)
          (untabify (point-min) (point-max))
          (write-file file)
          (message "Exported to %s" file))))))
#+END_SRC

#+RESULTS:
: hugo
** Earlier mu4e config
- Note taken on [2020-04-01 Wed 11:49] \\
  All this content has been transferred to the use package hook.
- Note taken on [2019-02-12 Tue 14:53] \\
  The use-package documentation specifies a method to do this via use-package itself, without enclosing the whole snippet within a if clause.
- Note taken on [2019-02-07 Thu 20:43] \\
  The mu4e config has to be broken down and the send email with htmlize has to be evaluated.
- Note taken on [2019-02-07 Thu 09:04] \\
  As of now, I do not acess my email on different computers via Emacs. The end goal is to setup a mail server via VPS and store my email online, which can then be searched via Emacs and mu4e from any location.

#+BEGIN_SRC emacs-lisp
(if (system-type-is-darwin)
    (progn
      (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu/mu4e")
      (require 'mu4e)
      (require 'mu4e-contrib)
      (require 'org-mu4e)

      (setq
       mail-user-agent 'mu4e-user-agent
       mue4e-headers-skip-duplicates  t
       mu4e-view-show-images t
       mu4e-view-show-addresses 't
       mu4e-compose-format-flowed t
       ;;mu4e-update-interval 200
       message-ignored-cited-headers 'nil
       mu4e-date-format "%y/%m/%d"
       mu4e-headers-date-format "%Y/%m/%d"
       mu4e-change-filenames-when-moving t
       mu4e-attachments-dir "~/Downloads/Mail-Attachments/"
       mu4e-maildir (expand-file-name "~/my_mail/fmail")
       message-citation-line-format "On %Y-%m-%d at %R %Z, %f wrote..."
       mu4e-index-lazy-check t
       ;; After Years. I've finally found you.
       mu4e-compose-dont-reply-to-self t
       mu4e-headers-auto-update t
       )

      ;; mu4e email refiling loations
      (setq
       mu4e-refile-folder "/Archive"
       mu4e-trash-folder  "/Trash"
       mu4e-sent-folder   "/Sent"
       mu4e-drafts-folder "/Drafts"
       )

      ;; setup some handy shortcuts
      (setq mu4e-maildir-shortcuts
            '(("/INBOX"   . ?i)
	      ("/Sent"    . ?s)
	      ("/Archive" . ?a)
	      ("/Trash"   . ?t)))

      ;;store link to message if in header view, not to header query
      (setq org-mu4e-link-query-in-headers-mode nil
            org-mu4e-convert-to-html t) ;; org -> html


      (autoload 'mu4e "mu4e" "mu for Emacs." t)

      ;; Earlier Config for sending email
      ;; (setq
      ;;  message-send-mail-function 'message-send-mail-with-sendmail
      ;;  send-mail-function 'sendmail-send-it
      ;;  message-kill-buffer-on-exit t
      ;;  )

      ;; allow for updating mail using 'U' in the main view:
      (setq mu4e-get-mail-command  "mbsync -q fins")

      ;; Stolen from https://github.com/djcb/mu/issues/1431 and found thanks to parsnip in #emacs
      (defun my-mu4e-mbsync-current-maildir (msg)
	(interactive)
	(let* ((maildir (downcase (substring (plist-get msg :maildir) 1)))
	       (mu4e-get-mail-command (format "mbsync %s" maildir)))
	  (mu4e-update-mail-and-index t)))

      ;; Enabling view in browser for HTML heavy emails that don't render well
      (add-to-list 'mu4e-view-actions
	           '("ViewInBrowser" . mu4e-action-view-in-browser) t)
      (add-to-list 'mu4e-view-actions
		   '("mbsync maildir of mail at point" . my-mu4e-mbsync-current-maildir) t)

      (add-hook 'mu4e-headers-mode-hook
		(defun my/mu4e-change-headers ()
		  (interactive)
		  (setq mu4e-headers-fields
			`((:human-date . 12)
			  (:flags . 4)
			  (:from-or-to . 15)
			  (:subject . ,(- (window-body-width) 47))
			  (:size . 7)))))

      (add-hook 'mu4e-view-mode-hook (lambda () (fill-paragraph)))
      (setq mu4e-view-use-gnus t)

      ;; Don't keep asking for confirmation for every action
      (defun my-mu4e-mark-execute-all-no-confirm ()
	"Execute all marks without confirmation."
	(interactive)
	(mu4e-mark-execute-all 'no-confirm))
      ;; mapping x to above function
      (define-key mu4e-headers-mode-map "x" #'my-mu4e-mark-execute-all-no-confirm)

      ;; source: http://matt.hackinghistory.ca/2016/11/18/sending-html-mail-with-mu4e/

      ;; this is stolen from John but it didn't work for me until I
      ;; made those changes to mu4e-compose.el
      (defun htmlize-and-send ()
	"When in an org-mu4e-compose-org-mode message, htmlize and send it."
	(interactive)
	(when
	    (member 'org~mu4e-mime-switch-headers-or-body post-command-hook)
	  (org-mime-htmlize)
	  (org-mu4e-compose-org-mode)
	  (mu4e-compose-mode)
	  (message-send-and-exit)))

      ;; This overloads the amazing C-c C-c commands in org-mode with one more function
      ;; namely the htmlize-and-send, above.
      (add-hook 'org-ctrl-c-ctrl-c-hook 'htmlize-and-send t)

      (setq mu4e-update-interval 300)
      (setq message-kill-buffer-on-exit t)

      ;; Config for queued sending of emails
      ;; Reference  :https://vxlabs.com/2017/02/07/mu4e-0-9-18-e-mailing-with-emacs-now-even-better/https://vxlabs.com/2017/02/07/mu4e-0-9-18-e-mailing-with-emacs-now-even-better/

      ;; when switch off queue mode, I still prefer async sending
      (use-package async
	:ensure t
	:defer nil
	:config (require 'smtpmail-async))

      (setq
       send-mail-function 'async-smtpmail-send-it
       message-send-mail-function 'async-smtpmail-send-it
       ;; replace with your email provider's settings
       smtpmail-smtp-server "smtp.fastmail.com"
       smtpmail-smtp-service 465
       smtpmail-stream-type 'ssl

       ;; if you need offline mode, set to true -- and create the queue dir
       ;; with 'mu mkdir', i.e:
       ;; mu mkdir /home/user/Mail/queue && touch ~/Maildir/queue/.noindex
       ;; https://www.djcbsoftware.nl/code/mu/mu4e/Queuing-mail.html
       smtpmail-queue-mail  nil
       smtpmail-queue-dir  (expand-file-name "~/my_mail/fmail/Queue/cur"))

      ))

#+END_SRC

#+RESULTS:
: /Users/shrysr/my_mail/fmail/Queue/cur
** Archival Retain file structure
- Note taken on [2020-04-05 Sun 08:57] \\
  Apparently, a new org version does not have the org-extract-archive-file
  function any more. Otherwise, this was my earlier preferred
  method. However, over time, as the structure of files change, there is
  no real point in preserving the structure as it is. In any case the
  properties of archived entries generally contain enough information to
  re-construct the org entry. 

Archive organised by Top level headings in the original file and with Tag preservation

#+BEGIN_SRC emacs-lisp

(defun my-org-inherited-no-file-tags ()
  (let ((tags (org-entry-get nil "ALLTAGS" 'selective))
        (ltags (org-entry-get nil "TAGS")))
    (mapc (lambda (tag)
            (setq tags
                  (replace-regexp-in-string (concat tag ":") "" tags)))
          (append org-file-tags (when ltags (split-string ltags ":" t))))
    (if (string= ":" tags) nil tags)))

(defadvice org-archive-subtree (around my-org-archive-subtree-low-level activate)
  (let ((tags (my-org-inherited-no-file-tags))
        (org-archive-location
         (if (save-excursion (org-back-to-heading)
                             (> (org-outline-level) 1))
             (concat (car (split-string org-archive-location "::"))
                     "::* "
                     (car (org-get-outline-path)))
           org-archive-location)))
    ad-do-it
    (with-current-buffer (find-file-noselect (org-extract-archive-file))
      (save-excursion
        (while (org-up-heading-safe))
        (org-set-tags-to tags)))))
#+end_src
** ag.el
- Note taken on [2020-03-30 Mon 18:06] \\
  Though helm-do-ag is avialable, this appears to be a separate ag implementation that does not required the separate silver searcher program to be installed in the system. This remains to be verified.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'ag)
#+END_SRC

** Removing timestamp from datetree captures
:PROPERTIES:
:ID:       4ED98157-D6D9-463C-BE2B-FAE5DB1FC3C6
:END:
- Note taken on [2020-04-02 Thu 01:39] \\
  This was needed due to some setting in scimax or an org mode
  update. This is being disabled for the timebeing since I am not using a
  date tree for capture.

#+BEGIN_SRC emacs-lisp
(setq org-datetree-add-timestamp nil)
#+END_SRC

#+RESULTS:
** Theme : Poet
- Note taken on [2020-03-22 Sun 12:41] \\
  Apparently, with a high gloss screen, it makes no difference whether the theme is light or dark. The distracting reflection still exists. Interestingly enough, the macbook pro screen does not reflect much under the same conditions and position with respect to light source.

#+BEGIN_SRC emacs-lisp
(use-package poet-theme
  :straight t
  :config
  (set-face-attribute 'default nil 
		      :family "iA Writer Mono V" 
		      :height 130)
  (set-face-attribute 'fixed-pitch nil :family "Iosevka term")
  (set-face-attribute 'variable-pitch nil :family "iA Writer Duo S")

  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 
			       :height 1.5
			       :weight bold))))
   '(org-level-2 ((t (:inherit outline-2 
			       :height 1.3
			       :weight bold))))
   '(org-level-3 ((t (:inherit outline-3 
			       :height 1.2
			       :weight bold))))
   '(org-level-4 ((t (:inherit outline-4
			       :height 1.1
			       :weight bold))))
   '(org-level-5 ((t (:inherit outline-5
			       :height 1.0
			       :weight bold)))))
  ;; Enabling the variable pitch mode
  (add-hook 'text-mode-hook
	    (lambda ()
	      (variable-pitch-mode 1)
	      (visual-line-mode 1)))
  (load-theme 'poet-dark))
#+END_SRC

#+RESULTS:
: t
** Org bullets
:PROPERTIES:
:ID:       0A9A08EC-7693-43CF-85B3-85CAC5129AE1
:END:

- Note taken on [2020-03-23 Mon 08:50] \\
  This appears to slow down the loading of org files considerably. I want a consistent setup that also works well on terminal and across Tramp. There may be better choices to spend this overhead on rather than aesthetics.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-bullets
:after (org)
:config
(add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

#+RESULTS:
: t

** Auto-fill text mode
:PROPERTIES:
:ID:       751B3E4C-1BBC-419D-BAD3-8F4A3880FB6D
:END:
- Note taken on [2020-03-22 Sun 15:04] \\
  This seems to introduce some weird characteristics in terms of line
  breakage. Switching off for now.
- Note taken on [2020-03-12 Thu 08:46] \\
  I need to check whether this interferes with mu4e and general org mode usage.

#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Font Customisation based on OS
   :PROPERTIES:
   :ID:       9e3c92e5-1049-4582-b165-0cd3ba7e2d95
   :END:

   - Note taken on [2020-03-22 Sun 12:35] \\
     Disabling this temporarily to work on customising a theme.

The same font is named differently in Antergos (Linux) and in the Mac OS.

#+begin_src emacs-lisp :tangle no
;; For Linux
(if (system-type-is-gnu)
    (set-face-attribute 'default nil :family "ttf-iosevka" :height 130 ))

;; For Mac OS
(if (system-type-is-darwin)
    (set-face-attribute 'default nil :family "Iosevka Type" :height 160 ))
#+end_src

#+RESULTS:

** Org babel load
:PROPERTIES:
:ID:       DDDC0DB7-8E9B-4509-B315-73BEB30F6D29
:END:
- Note taken on [2020-03-22 Sun 11:15] \\
  This is not required. The overhead of tangling during the loading of Emacs is
  too high and unnecessary. It seems a lot more efficient to tangle upon saving the org file, and
  that process can be automated as well, even with an async.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package org)
(org-babel-load-file
 (expand-file-name "config.org"
                   user-emacs-directory))
#+END_SRC

** org-brain
:PROPERTIES:
:header-args: :tangle no
:END:

#+BEGIN_QUOTE
org-brain implements a variant of concept mapping in Emacs, using org-mode.

You can think of org-brain as a combination of a wiki and a mind map, where each wiki page / mind map node is an org-mode file which resides in your org-brain-path, or a headline with an ID property in one of those files. These are called entries. Entries can be linked together, and you can then view the network of links as a mind map, using M-x org-brain-visualize

[[https://github.com/Kungsgeten/org-brain][org-brain on github]]
#+END_QUOTE

*** STABLE Basic setup along with org-id
CLOSED: [2019-04-11 Thu 08:52]
:PROPERTIES:
:ID:       ae3c3f14-d570-4fc0-b3b2-156020ba7c61
:END:

Since org-brain requires the org id for a heading to be recognized and displayed, it is convenient to have capture and refile mechanisms that create the org-id if the heading does not have it.

Further streamlining is necessary as such.

#+BEGIN_SRC emacs-lisp
  (use-package org-brain
    :after org
    :ensure t
    :bind  ("M-s v" . org-brain-visualize)
    :init
    ;; (setq org-brain-path "~/my_org/brain/")
    ;; ;; for Evil users
    ;; (with-eval-after-load 'evil
   ;;   (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/my_org/emacs_meta/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12)
    (add-hook 'org-brain-refile 'org-id-get-create))
;; (global-set-key (kbd "M-s v") #'org-brain-visualize)
#+END_SRC

#+RESULTS:
** Polybrain 
*** Dustin's forked org-brain

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-brain
    :straight (org-brain :type git :host github :repo "dustinlacewell/org-brain")
    :after org
    :ensure t
    :bind  ("M-s v" . org-brain-visualize)
    :bind (:map org-brain-visualize-mode-map
              ;; Navigation
              ("C-p" . my/org-brain-visualize-parent)
              ("C-n" . my/org-brain-visualize-child))
    :init
    (setq org-brain-path "~/my_org/brain/")
    ;; ;; For Evil users
    ;; (with-eval-after-load 'evil
   ;;   (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/my_org/emacs_meta/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?\n:PROPERTIES:\n:CREATED: [%<%Y-%m-%d %a %H:%M>]\n:END:" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 12)
    (add-hook 'org-brain-refile 'org-id-get-create))
;; (global-set-key (kbd "M-s v") #'org-brain-visualize)
#+END_SRC

*** polybrain navigation helpers
:PROPERTIES:
:ID:       097E6DB9-79E7-4AFB-9533-E625603B60F4
:END:

#+BEGIN_SRC emacs-lisp
;; Source https://gist.github.com/dustinlacewell/e0a7fed577ae0766e3017a4de848b528

(defun my/org-brain-visualize-parent ()
  (interactive)
  (when (org-brain-parents (org-brain-entry-at-pt)) (org-brain-visualize-parent (org-brain-entry-at-pt))))

(defun my/org-brain-visualize-child (entry &optional all)
  (interactive (list (org-brain-entry-at-pt)))
  (when (org-brain-children entry)
    (let* ((entries (if all (org-brain-children entry)
                    (org-brain--linked-property-entries
                     entry org-brain-children-property-name)))
         (child (cond
                 ((equal 1 (length entries)) (car-safe entries))
                 ((not entries) (error (concat entry " has no children")))
                 (t (org-brain-choose-entry "Goto child: " entries nil t)))))
    (org-brain-visualize child))))

#+END_SRC
*** polybrain package
:PROPERTIES:
:ID:       DC735D2F-8395-4C5E-BB66-5918110B02BD
:END:

#+BEGIN_SRC emacs-lisp
  (use-package polybrain
    :defer nil
    :straight (polybrain.el :type git :host github :repo "dustinlacewell/polybrain.el")
    :bind (:map poly-brain-mode-map
                ("C-x C-s" . polybrain-save)
                ("<M-tab>" . polybrain-switch))
:config
(use-package polymode)
(require 'polybrain))

#+END_SRC
** TEST Org-brain export
:PROPERTIES:
:ID:       37472632-AC12-4DD9-998C-A25D5B444695
:END:
- Note taken on [2020-02-24 Mon 17:51] \\
  I have this working for normal text based entries. However, it appears an explicit instruction has to be provided for code snippets to not execute. The HTML output, mentioned as a desired enhancement is also quite lacking. I wonder if it would be possible to use the existing CSS samples for a basic output.

This package is in an early development phase and is available via github. This can be directly pulled in using the straight.el package.

#+BEGIN_SRC sh :dir ~/scimax-personal/external_packages/ :tangle no
git clone https://github.com/Kungsgeten/org-brain-export.git
#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle no
(use-package org-brain-export
  :load-path "~/scimax-personal/external_packages/org-brain-export/"
  :defer nil
  :config
  (use-package a
    :defer nil
    :ensure t
    :config
    (require 'a)
    )
  (use-package xmlgen
    :defer nil
    :ensure t
    :config
    (require 'xmlgen)
    )
  (require 'org-brain-export))

#+END_SRC

#+RESULTS:
: t

** scimax-gitter

#+BEGIN_SRC emacs-lisp :tangle no
        (use-package scimax-gitter
          :after org
      :init
      (use-package gitter)
  (use-package emacsql-sqlite)
      :straight (scimax-gitter :host github :repo "jkitchin/scimax"))
#+END_SRC

#+RESULTS:
** STABLE ox-oddmuse
CLOSED: [2020-01-18 Sat 08:39]
:PROPERTIES:
:ID:       23CA002A-D195-4503-A3A4-F8DDAD1763A2
:END:

I'm building an oddmuse wiki to use for my blogging and as a repository for my braindump. A wiki driven blog is much more useful in inviting collaboration, and any technical note or article is always worth updating. There are many more advantages in using Oddmuse.

This package is not on MELPA, so lets clone to the external packages folder.

#+BEGIN_SRC sh
cd ~/scimax-personal/external_packages/
git clone https://github.com/mbork/ox-oddmuse.git
#+END_SRC

#+RESULTS:

Lets add the specific path to Emacs for the package to be available.
#+BEGIN_SRC sh
ls -l ~/scimax-personal/external_packages/
#+END_SRC

#+RESULTS:
| total      | 168 |        |       |       |    |     |       |                       |
| -rw-r--r-- |   1 | shrysr | staff | 10273 | 24 | Sep | 15:55 | better-breadcrumbs.el |
| drwxr-xr-x |   2 | shrysr | staff |    64 | 24 | Sep | 15:55 | frog-jump-buffer      |
| drwxr-xr-x |  20 | shrysr | staff |   640 | 24 | Sep | 15:55 | icicle_packages        |
| -rw-r--r-- |   1 | shrysr | staff | 10701 | 24 | Sep | 15:55 | icicles-install.el    |
| drwxr-xr-x |   8 | shrysr | staff |   256 | 15 | Jan | 17:22 | oddmuse-curl          |
| drwxr-xr-x |   2 | shrysr | staff |    64 | 24 | Sep | 15:55 | org-recipes           |
| drwxr-xr-x |   7 | shrysr | staff |   224 | 18 | Jan | 08:34 | ox-oddmuse            |
| -rw-r--r-- |   1 | shrysr | staff | 57348 | 24 | Sep | 15:55 | ox-reveal.el          |

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/scimax-personal/external_packages/ox-oddmuse/")
(require 'ox-oddmuse)
#+END_SRC

#+RESULTS:
: ox-oddmuse

Okay. The above works. It occurs to me that I could include the paths as a list of variables and just update from a single location.

** yanking links in org format
   :PROPERTIES:
   :ID:       8fa6f610-3dcf-40ab-96f4-7d1d6e975f72
   :END:

   - Note taken on [2020-03-05 Thu 08:36] \\
     org-web-tools provides better options for yanking links, webpages and etc than using the method below. The issue is generally that 'link' does not provide enough information about the link and then an additional line of description is required.
 Source: sacha chua.

 Enables inserting a URL into an org document as '[<URL>][link]' by tapping F6 after copying the URL. This is useful to reduce clutter with long links, and even include links in headings.

 #+begin_src emacs-lisp
(defun my/yank-more ()
  (interactive)
  (insert "[[")
  (yank)
  (insert "][link]]"))
(global-set-key (kbd "<f6>") 'my/yank-more)
 #+end_src

** TEST Enabling adding tags in the capture window
    :PROPERTIES:
    :ID:       7e96fe9d-9f6e-4fc6-9eb4-09c53139d29b
    :END:

#+BEGIN_SRC emacs-lisp
;; Add feature to allow easy adding of tags in a capture window
(defun mrb/add-tags-in-capture()
  (interactive)
  "Insert tags in a capture window without losing the point"
  (save-excursion
    (org-back-to-heading)
    (org-set-tags)))
;; Bind this to a reasonable key
(define-key org-capture-mode-map "\C-c\C-t" 'mrb/add-tags-in-capture)
#+end_src

** TEST Enabling org capture and org protocol
:PROPERTIES:
:ID:       30b75dfc-72d9-4d45-b9ce-ea7da17642a0
:END:

- Note taken on [2019-02-07 Thu 08:55]  \\
  Need to actually get org-capture via external browser protocol working. Not sure if I need to require org-capture in scimax.

Source: http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/

#+begin_src emacs-lisp
(require 'org-capture)
;;(require 'org-protocol)
#+End_src

#+RESULTS:
: org-capture
** CANCEL org-wiki
*** Installation
#+BEGIN_SRC elisp :tangle no
(let ((url "https://raw.githubusercontent.com/caiorss/org-wiki/master/org-wiki.el"))
      (with-current-buffer (url-retrieve-synchronously url)
	(goto-char (point-min))
	(re-search-forward "^$")
	(delete-region (point) (point-min))
	(kill-whole-line)
	(package-install-from-buffer)))
#+END_SRC

*** Setup
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org-wiki)
(setq org-wiki-location "~/my_projects/ds-job-search")
#+END_SRC

#+RESULTS:
: ~/my_projects/ds-job-search

** SLIME and lisp
:PROPERTIES:
:ID:       18C0EBA2-3AD0-434B-ACBC-D62785AC5D8A
:END:

Installing the SLIME package
#+BEGIN_SRC emacs-lisp
(use-package slime
  :ensure t
  :straight t
  )
#+END_SRC

#+RESULTS:

Setting the location of the lisp interpreter based on the OS being used:

#+BEGIN_SRC emacs-lisp
(if (system-type-is-darwin)
    (setq inferior-lisp-program "/usr/local/bin/clisp")
  )

(if (system-type-is-gnu)
    (setq inferior-lisp-program "/usr/bin/clisp")
    )
#+END_SRC

#+RESULTS:

** org2blog : publishing to wordpress [0/1]
:PROPERTIES:
:CREATED:  [2019-07-21 Sun]
:END:
- Note taken on [2020-01-23 Thu 10:46] \\
  I am not using org2blog anymore.
- Note taken on [2019-07-21 Sun 16:17] \\
  I have a suspicion that the mp-wp implementation is different from the usual wordpress installation and therefore, the org2blog function may not work with it.

Fueled by discussions in #ossasepia, I have decided to shift direction towards Wordpress and a custom VPS server to host and secure my own data.

While there are disadvantages in using a behemoth like wordpress over a simple static hugo site - one key driver is the ability to create comment systems with pingbacks, and control the data. Well to the extent possible on a rented VPS server, which is still more control than using services like Bitbucket / Github.

Why bother with comment systems?
I've realised from my discussions with diana_coman  that despite the inconvenience, the whole point of the web is sharing and hopefully creating a seed for intellectual discussions that could lead somewhere meaningful. A good commenting system is obviously needed, for the little that takes place.

Eventually, it would be interesting to run V to host my own repository and files, and perhaps employing git annex, for managing an index of other files in different locations.

The good thing that I've become more comfortable with Emacs and getting packages to work, and even exploring the source code to understand the arguments better.

#+BEGIN_QUOTE
This was intimidating in the past, but reading the source code may be the best way to understand a language.
#+END_QUOTE

[[https://vinhtrieublog.wordpress.com/2016/02/03/publishing-to-wordpress-with-org2blog/][Samuel Zhao's post]] is a good introduction to setting up org2blog, and I have replicated the steps with some additional twists:

1. Encryption of the login details with my personal key, and setup to ingest a list of authsources.
2. Setting up the org2blog package to enable publishing and control of blog posts right within Emacs.
3. [ ] It would be nice to have a link to the source file in each wordpress post. Perhaps the file could be signed with gpg as well?

#+BEGIN_SRC emacs-lisp
(use-package org2blog
  :ensure t
  :defer nil
  :config
  (require 'xml-rpc)
  (require 'org2blog-autoloads)
  ;; (require 'netrc)
  (setq org2blog/wp-blog-alist
        `(("young-hands-club"
           :url "http://younghands.club/xmlrc.php"
           :default-title ""
           :default-categories ("daily-log")
           :username ,(auth-source-user-or-password 'young-hands-club "login")
           :password ,(auth-source-user-or-password young-hands-club "password")
           :tags-as-categories true)))
  (setq wpcredentials (auth-source-user-and-password "young-hands-club"))
  (setq org2blog/wp-blog-alist
        `(("young-hands-club"
           :url "http://younghands.club/xmlrc.php"
           :username ,(car wpcredentials)
           :password ,(cadr wpcredentials))))

  ;; implemented as HTML styling. Your pick!
  (setq org2blog/wp-use-sourcecode-shortcode 't)

  ;; removed light="true"
  (setq org2blog/wp-sourcecode-default-params nil)

  ;; target language needs to be in here
  (setq org2blog/wp-sourcecode-langs
        '("actionscript3" "bash" "coldfusion" "cpp" "csharp" "css" "delphi"
          "erlang" "fsharp" "diff" "groovy" "html" "javascript" "java" "javafx" "matlab"
          "objc" "perl" "php" "text" "powershell" "python" "ruby" "scala" "sql"
          "vb" "xml"
          "sh" "emacs-lisp" "lisp" "lua" "R"))

  (setq org-src-fontify-natively t)

  ;; ;; You want set the keymode map you can use these.
  ;; (global-set-key (kbd " l") 'org2blog/wp-login)
  ;; (global-set-key (kbd " p") 'org2blog/wp-post-buffer-and-publish)
  ;; )))
  )
#+END_SRC

#+RESULTS:
: t

** TEST helm-ext
- Note taken on [2019-04-29 Mon 08:01] \\
  Disabling excecution for the time being.

#+BEGIN_QUOTE
Extensions to helm, which I find useful but are unlikely to be accepted in the upstream. A collection of dirty hacks for helm!

https://github.com/cute-jumper/helm-ext
#+End_quote

#+BEGIN_SRC emacs-lisp
(use-package helm-ext
  :ensure t
  :config
  (helm-ext-ff-enable-skipping-dots t)
  ;; Testing the auto path expansion
  ;;(helm-ff-ext-enable-auto-path-expansion t)
  )
#+END_SRC

#+RESULTS:
: t

** Scimax customisations

*** Enabling Scimax Statistics
- Note taken on [2019-10-07 Mon 13:17] \\
  The default config is insufficient and in particular, uses the ess-smart-underscore package which is not useful to my general workflow.

#+BEGIN_SRC emacs-lisp
(require 'scimax-statistics)
#+END_SRC

#+RESULTS:

** TEST Activating windmove to facilitate Hydras
   :PROPERTIES:
   :ID:       5a4803e5-f18f-4704-b4e7-a717649d30f6
   :END:

Super would actually be a good option. However, this interferes with default configurations in MS Windows, especially while using virtualbox. Using Meta for now.

#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings 'meta)
#+END_SRC

** TEST Export async
- Note taken on [2019-02-14 Thu 16:03] \\
  This requires a separate init file to be setup that enables Emacs to launch a separate process to export large files. It would be better as a vanilla emacs file.

#+BEGIN_SRC emacs-lisp
(setq org-export-async-init-file
      (expand-file-name "async-export.el" user-emacs-directory)
      )
#+END_SRC

#+RESULTS:
: /Users/shreyas/scimax/user/async-export.el

** TEST Ob-async
   :PROPERTIES:
   :ID:       79f2263f-8da8-4b80-952e-c1c2e7f0ea12
   :END:
- Note taken on [2019-02-14 Thu 16:02] \\
  This should enable evaluating code in org babel source blocks asynchronously. The header in the source block should have the async enabled.

#+BEGIN_SRC emacs-lisp
(use-package ob-async
  :ensure t
  )
#+END_SRC

#+RESULTS:

** TEST Tags setup

Borrowing [[https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-tags.el][Kaushal modi's setup]] for tags. I will start with using gtags and expand later to ctags.

#+BEGIN_SRC emacs-lisp
;;; gtags, GNU global

(when (executable-find "global")
;;;; ggtags
  ;; https://github.com/leoliu/ggtags
  (use-package ggtags
    :config
    (progn
      (setq ggtags-update-on-save nil) ;Don't try to update GTAGS on each save; makes the system sluggish for huge projects.
      (setq ggtags-highlight-tag nil)  ;Don't auto-highlight tag at point.. makes the system really sluggish!
      (setq ggtags-sort-by-nearness nil) ; Enabling nearness requires global 6.5+
      (setq ggtags-navigation-mode-lighter nil)
      (setq ggtags-mode-line-project-name nil)
      (setq ggtags-oversize-limit (* 30 1024 1024)) ; 30 MB

      (dolist (hook '(verilog-mode-hook
                      c-mode-hook))
        (add-hook hook #'ggtags-mode))

      ;; Don't consider ` (back quote) as part of `tag' when looking for a
      ;; Verilog macro definition
      (defun ggtags-tag-at-point ()
        (pcase (funcall ggtags-bounds-of-tag-function)
          (`(,beg . ,end)
           (if (eq ?` (string-to-char (buffer-substring beg end)))
               ;; If `(buffer-substring beg end)' returns "`uvm_info" (for example),
               ;; discard the ` and return just "uvm_info"
               (buffer-substring (1+ beg) end)
             ;; else return the whole `(buffer-substring beg end)'
             (buffer-substring beg end)))))

      ;; Remove the default binding for `M-.' in `ggtags-mode-map'
      (bind-key "M-." nil ggtags-mode-map)
      ;; Remove the default binding for `M-o' in `ggtags-navigation-map'
      (bind-key "M-o" nil ggtags-navigation-map)

      (key-chord-define-global "??" #'ggtags-show-definition))))
#+END_SRC

#+RESULTS:

** TEST Icicles
- Note taken on [2019-02-28 Thu 16:01] \\
  The default key bindings of icicles changes the org source block edit shortcut. However, the package appears very interesting so far, if not a bit slow to respond. Switching over to icicles will need some research for making sure none of the existing keybindings and workflows are crippled. This package cannot be installed via Melpa. The easiest method appears to be to download the files as a zip folder from the [[https://github.com/emacsmirror/icicles][icicle git repository]]. The automatic install script draws files from the Emacs wiki, which at times may be down. As such icicles can be switched off by using =M-x icy-mode=.

#+BEGIN_SRC emacs-lisp
(load "~/scimax/user/external_packages/icicles-install.el")
(setq icicle-download-dir "~/scimax/user/external_packages/icicle_packages/")
(add-to-list 'load-path "~/scimax/user/external_packages/icicle_packages/")
(require 'icicles)
(icy-mode 1)

#+END_SRC

#+RESULTS:
: t

** erc
:PROPERTIES:
:ID:       1984eb94-3d71-4de0-abe2-900f534d1696
:END:
- Note taken on [2019-10-23 Wed 09:15] \\
  I'm currently using weechat over tmux, but there are great conveniences in using erc. It is possible then to capture conversation and make notes more easily.

Base config setting the channels that I would like frequent. I have actually had enjoyable experiences chatting with the Emacs and coding whizzes in the Emacs channel.

#+BEGIN_SRC emacs-lisp
(use-package erc
  :config
  (setq erc-hide-list '("PART" "QUIT" "JOIN"))
  (setq erc-autojoin-channels-alist '(("freenode.net"
                                       "#org-mode"
                                       "#emacs"
                                       "#emacs-beginners"
                                       "#docker"))
        erc-server "irc.freenode.net"
        erc-nick "shrysr")
  (setq erc-fill-static-center t)

  )
#+END_SRC

#+RESULTS:
: t

Loading ERC without password (temporarily). The password has to be set in the .authconfig file and encrypted.

#+BEGIN_SRC emacs-lisp
 (erc
   :server "irc.freenode.net"
   :port 6667
   :nick "shrysr")
#+END_SRC

** Scheme setup
  :PROPERTIES:
  :ID:       b60ce433-989d-4339-a573-72550ff61d98
  :END:
  - Note taken on [2019-10-23 Wed 09:21] \\
    I used this briefly during a foray into the SICP course.

- References
  - http://praveen.kumar.in/2011/03/06/gnu-emacs-and-mit-scheme-on-mac-os-x/

#+BEGIN_SRC emacs-lisp
(setq scheme-program-name "/Applications/MIT-GNU-Scheme.app/Contents/Resources/mit-scheme")
(require 'xscheme)

(message "Loaded scheme setup")
#+end_src

** TODO lintr
- Note taken on [2019-02-11 Mon 07:21] \\
  It appears there is no package called lintr. This needs further investigation.

This package is deemed necessary to enable flymake in ESS. Without it, there is significantly more lag while the suggestions / corrections are generated in ESS modes.

#+BEGIN_SRC emacs-lisp
(use-package lintr
  :ensure nil
)
#+END_SRC

#+RESULTS:
: t

** Better defaults
  :PROPERTIES:
  :ID:       8d1243f5-a37d-4d17-b141-d54b862dcb73
  :END:
  - Note taken on [2019-08-28 Wed 13:45] \\
    Disabling this package until it is explored better.

I need to explore the changed made by this package. For now, it is loaded right in the beginning so that it does not overwrite other customisations down the line.

#+BEGIN_SRC emacs-lisp
(use-package better-defaults
  :ensure t
)

(message "Loaded better-defaults package")
#+end_src

** w3m customisation

- Note taken on [2020-01-23 Thu 10:46] \\
  I have switched to using eww for my browsing within Emacs.
w3m is a suprisingly able browser that is able to cater to most websites, except those that are a little too rich with java and etc. Being within Emacs, and launching almost instantly with significantly less overhead in terms of RAM no matter how many tabs are open - it is also easy to customise the behavior as needed and is an excellent method of distraction free browsing.

However, it pays to have handy shortcuts to open a link in the default browser of the OS. This is especially to cater to heavier websites. The w3m package would need to be installed using the package manager of the OS to use w3m.

A few snippets were sourced from: http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html

*** Setting default browser to be w3m
:PROPERTIES:
:ID:       EEB1BA54-2032-4022-8353-FA0FEBCB19EC
:END:

#+BEGIN_SRC emacs-lisp
;;(setq browse-url-browser-function 'browse-url-default-browser)
(setq browse-url-browser-function 'w3m-goto-url-new-session)
(setq w3m-default-display-inline-images t)
#+end_src

#+RESULTS:
: t

*** TODO Appending HTTP to web addresses entered by hand
   :PROPERTIES:
   :ID:       675ef613-8495-482e-941c-67b0853adac4
   :END:
- Note taken on [2019-02-07 Thu 07:40]  \\
  Check whether this is necessary

#+BEGIN_SRC emacs-lisp
;;when I want to enter the web address all by hand
(defun w3m-open-site (site)
  "Opens site in new w3m session with 'http://' appended"
  (interactive
   (list (read-string "Enter website address(default: w3m-home):" nil nil w3m-home-page nil )))
  (w3m-goto-url-new-session
   (concat "http://" site)))
#+end_src

#+RESULTS:
: w3m-open-site

*** Changing w3m shortcuts for better tabbed browsing
   :PROPERTIES:
   :ID:       f3b7f225-80fc-4b3a-b31b-b56d2bbf01ca
   :END:

Source:  Sacha Chua : http://sachachua.com/blog/2008/09/emacs-and-w3m-making-tabbed-browsing-easier/

#+BEGIN_SRC emacs-lisp
(eval-after-load 'w3m
  '(progn
     (define-key w3m-mode-map "q" 'w3m-previous-buffer)
     (define-key w3m-mode-map "w" 'w3m-next-buffer)
     (define-key w3m-mode-map "x" 'w3m-close-window)))
#+end_src

#+RESULTS:

*** TODO Default external browser settings
   :PROPERTIES:
   :ID:       c59e3f50-35d4-4939-a05e-0b3e97976963
   :END:
- Note taken on [2019-02-07 Thu 07:37]  \\
  Need to have this change depending whether the OS is Linux or Mac OS

#+BEGIN_SRC emacs-lisp
(defun wicked/w3m-open-current-page-in-default-browser ()
  "Open the current URL in Mozilla Firefox."
  (interactive)
  (browse-url-default-browser w3m-current-url)) ;; (1)

(defun wicked/w3m-open-link-or-image-in-default-browser ()
  "Open the current link or image in Firefox."
  (interactive)
  (browse-url-default-browser (or (w3m-anchor) ;; (2)
                                         (w3m-image)))) ;; (3)

(eval-after-load 'w3m
  '(progn
     (define-key w3m-mode-map "o" 'wicked/w3m-open-current-page-in-default-browser)
     (define-key w3m-mode-map "O" 'wicked/w3m-open-link-or-image-in-default-browser)))
#+end_src

#+RESULTS:

** ediff
  :PROPERTIES:
  :ID:       969553a4-6279-4566-b751-51218fedb41f
  :END:

I have to diff between org files pretty often, and need the headings to be unfolded.

Source: http://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff

#+BEGIN_SRC emacs-lisp
;; Check for org mode and existence of buffer
(defun f-ediff-org-showhide (buf command &rest cmdargs)
  "If buffer exists and is orgmode then execute command"
  (when buf
    (when (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
      (save-excursion (set-buffer buf) (apply command cmdargs)))))

(defun f-ediff-org-unfold-tree-element ()
  "Unfold tree at diff location"
  (f-ediff-org-showhide ediff-buffer-A 'org-reveal)
  (f-ediff-org-showhide ediff-buffer-B 'org-reveal)
  (f-ediff-org-showhide ediff-buffer-C 'org-reveal))

(defun f-ediff-org-fold-tree ()
  "Fold tree back to top level"
  (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)
  (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1))

(add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
(add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
#+end_src

** Spell Checking

*** Flycheck
- Note taken on [2019-02-09 Sat 11:51] \\
  disabling flycheck for the moment and enabling flymake

Source: https://writequit.org/org/

Basic config

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer 5
  :bind (("M-g M-n" . flycheck-next-error)
         ("M-g M-p" . flycheck-previous-error)
         ("M-g M-=" . flycheck-list-errors))
  :init (global-flycheck-mode)
  :diminish flycheck-mode
  :config
  (progn
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc json-jsonlint json-python-json ess iess))
    (use-package flycheck-pos-tip
      :init (flycheck-pos-tip-mode))
    (use-package helm-flycheck
      :init (define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))
    (use-package flycheck-haskell
      :init (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))))
#+END_SRC

#+RESULTS:
: flycheck-list-errors

*** Enabling Flyspell

Reference: https://alhassy.github.io/init/

Org mode is derived from text mode, therefore it is sufficient to activate for text mode.

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :hook (
           (prog-mode . flyspell-prog-mode)
           (text-mode . flyspell-mode))
)
#+END_SRC

#+RESULTS:
| flyspell-mode | er/add-text-mode-expansions | dubcaps-mode | flycheck-mode | text-mode-hook-identify |

*** Replacing flycheck with flymake
   :PROPERTIES:
   :ID:       68a17c10-540a-48ce-bf16-6b891060bd79
   :END:
This is especially for python modules at the moment.

#+BEGIN_SRC emacs-lisp
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC

#+RESULTS:
| flymake-mode | poly-r-mode-setup | ess-S-mouse-me-menu-commands | ess-r-setup-flymake |

*** STABLE Switching to aspell on the mac
CLOSED: [2019-07-12 Fri 20:23]
:PROPERTIES:
:ID:       7dfcba0b-55f4-4cbe-aa34-c155935aa0da
:END:
- Note taken on [2019-07-12 Fri 20:22] \\
  So far this is working out rather well, and as expected.

Facing trouble enabling flyspell in the mac. This seems to be a solution, as outlined in [[https://stackoverflow.com/questions/19022015/emacs-on-mac-os-x-how-to-get-spell-check-to-work][this SO discussion]].

#+BEGIN_SRC emacs-lisp
(if (system-type-is-darwin)
    (setq ispell-program-name "/usr/local/Cellar/aspell/0.60.6.1_1/bin/aspell")
  )

#+END_SRC

#+RESULTS:
: /usr/local/Cellar/aspell/0.60.6.1_1/bin/aspell
** Old Scimax stuff

These packages and customisations are the ones I enjoy using from Scimax. Note that these have to be customised and patched at the moment and I am working on an optimal solution to port the necessary packages, while maintaining some semblance of compatibility with the upstream.

*** Setting the scimax directory
:PROPERTIES:
:ID:       977B7B1D-29CA-4096-8413-6ECDDED932C2
:END:
- Note taken on [2020-03-11 Wed 17:32] \\
  Some package here seems to be interfering with tramp. Functions can be loaded selectively using straight.el, and this helps keeps things lighter as well. Adding the scimax directory to the path seems to trigger the tramp issue. The scimax directory is being defined, because it is used in the packages. Using straight.el changes the location of the scimax directory.

#+BEGIN_SRC emacs-lisp :tangle no
;;  (add-to-list 'load-path "./scimax")
  (defconst scimax-dir (file-name-directory (or load-file-name (buffer-file-name)))
    "Directory where the scimax is installed.")
  ;; (defvar scimax-dir "./scimax")
#+END_SRC

*** Various scimax packages
:PROPERTIES:
:ID:       FBCA07CC-C0AF-4159-A71E-5D2827F01876
:header-args: :tangle no
:END:
**** MY scimax packages
:PROPERTIES:
:ID:       AD6CDDD5-E3B4-41CC-B1A0-67E9E9348077
:END:

#+BEGIN_SRC emacs-lisp
    ;; (defconst scimax-dir (file-name-directory (or load-file-name (buffer-file-name)))

    (defconst scimax-dir "./straight/repos/scimax")

    (use-package helm-bibtex)

    (use-package helm-projectile)

    ;; Functions for working with hash tables
    (use-package ht)

    (use-package htmlize)

    (use-package hy-mode)

    (use-package hydra
      :init
      (setq hydra-is-helpful t)

      :config
      (require 'hydra-ox))

    (use-package ivy-hydra)

    (use-package jedi)

    (use-package jedi-direx)

    (use-package diminish)

    ;; (use-package avy)

  (use-package pydoc)

  (use-package pyvenv
  :config
  (require 'pyvenv))

  (use-package rainbow-mode)

  (use-package elpy
    :config
    (elpy-enable))

  (use-package esup)

  ;; Provides functions for working with files
  (use-package f)

  (straight-use-package 'dash)
  (straight-use-package 'dash-functional)
  (straight-use-package 'ov)
(straight-use-package 'flx)

  (use-package auto-complete
    :diminish auto-complete-mode
    :config (ac-config-default))

(use-package google-this
  :config
  (google-this-mode 1))

(use-package org-mime
  :ensure nil
  :load-path (lambda () (expand-file-name "org-mime" scimax-dir))
  :init (setq org-mime-up-subtree-heading 'org-back-to-heading
	      org-mime-export-options '
(:section-numbers nil
		  :with-author nil
		  :with-toc nil
		  :with-latex dvipng)))

(straight-use-package 'auctex)

(use-package auto-complete
  :diminish auto-complete-mode
  :config (ac-config-default))

(use-package s)
#+END_SRC

#+RESULTS:

**** scimax-org
:PROPERTIES:
:ID:       055A34FB-F13E-4521-9BAF-C4C785F20F5F
:END:

This requires the scimax-ob-ipython-upstream package, as well as a bunch of
other packages. This has to be evaluated and pruned as required. List of
packages being used by scimax-org are :

1. [ ] scimax-org-radio-checkbox
2. [ ] scimax-org-latex : for latex based overlays in org documents
3. [X] scimax-ob-ipython-upstream : the enhancements and monkeypatches over
   the upstream ob-ipython package


#+BEGIN_SRC emacs-lisp
  (straight-use-package 'emacsql-sqlite)
  (straight-use-package 'gitter)

  (use-package scimax-org
    :straight (scimax-org :host github :repo "jkitchin/scimax")
    :bind
    ("s--" . org-subscript-region-or-point)
    ("s-=" . org-superscript-region-or-point)
    ("s-i" . org-italics-region-or-point)
    ("s-b" . org-bold-region-or-point)
    ("s-v" . org-verbatim-region-or-point)
    ("s-c" . org-code-region-or-point)
    ("s-u" . org-underline-region-or-point)
    ("s-+" . org-strikethrough-region-or-point)
    ("s-4" . org-latex-math-region-or-point)
    ("s-e" . ivy-insert-org-entity)
      )

#+END_SRC

#+RESULTS:
: ivy-insert-org-entity

**** scimax literate programming

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package scimax-literate-programming
    :straight (scimax-literate-programming :host github :repo "jkitchin/scimax"))
#+END_SRC

#+RESULTS:

**** scimax-hydra
:PROPERTIES:
:ID:       D3004CAB-BFAF-48B8-8FBA-7CB75FC33007
:END:

#+BEGIN_SRC emacs-lisp
    ;; Apparently the following packages are required to compile scimax-hydra

    (use-package evil
      :straight t
      :init
      (setq evil-want-integration nil)
      ;; :config
      ;; (evil-mode 1)
  )

    (straight-use-package 'evil-collection)
    (use-package general
      :straight t
      :config
      (setq general-override-states '(emacs
                                      hybrid
                                      normal
                                      visual
                                      motion
                                      operator
                                      replace))
      (general-override-mode)
      (general-define-key
       :states '(normal visual motion)
       :keymaps 'override
       "SPC" 'scimax/body))

      (use-package scimax-hydra
        :straight (scimax-hydra :host github :repo "jkitchin/scimax")
        :bind ("<f12>" . scimax/body))
#+END_SRC

#+RESULTS:
: scimax/body

**** scimax-journal
:PROPERTIES:
:ID:       61A12586-DAA7-4601-92F3-DD688B9725D5
:END:

#+BEGIN_SRC emacs-lisp
    (use-package scimax-journal
      :after scimax-org
      :init (setq scimax-journal-root-dir "~/my_org/journal/")
      :bind ("H-j" . scimax-journal/body)
      :straight (scimax-journal :host github :repo "jkitchin/scimax"))
#+END_SRC

#+RESULTS:
: scimax-journal/body

**** scimax-yas
:PROPERTIES:
:ID:       259205AA-4D49-4917-B79D-0A785822C33F
:END:

#+BEGIN_SRC emacs-lisp
  (use-package scimax-yas
    :after scimax-org
    :straight (scimax-yas :host github :repo "jkitchin/scimax"))
#+END_SRC

#+RESULTS:

**** scimax utils

#+BEGIN_SRC emacs-lisp
  (use-package scimax-utils
    :straight (scimax-utils :host github :repo "jkitchin/scimax"))
#+END_SRC

#+RESULTS:

**** scimax-ivy
:PROPERTIES:
:ID:       5883CE00-AEAE-46E3-8C47-B74554B7F0CD
:END:
#+BEGIN_SRC emacs-lisp
  (use-package scimax-ivy
    :after scimax-org
    :straight (scimax-ivy :host github :repo "jkitchin/scimax"))
#+END_SRC

#+RESULTS:

**** TODO scimax-ipython
:PROPERTIES:
:ID:       D134F9A9-5391-480D-8124-31C7B8C60C34
:END:

- [ ] Bind the org-babel autocomplete to a convenient key. The function is
  =scimax-ob-ipython-complete-ivy=. Possibly =s-=.
- [ ] fix the ob-ipython straight build to symlink the client.py file as
  well. Wonder if this is going to be an issue for others. 

Summary of scimax's ipython customisations:
1. John is currently using the upstream ob-ipython.
2. John's earlier ob-ipython fork is likely to be depreciated in the future. 
3. John has integrated the upstream ob-ipython with several patches of his
   own. These are contained in two pacakges: scimax-ob.el and
   scimax-org-babel-ipython-upstream. The latter monkeypatches over the
   upstream ob-ipython fork.
4. In short, john's old ob-ipython fork is no longer required for my purposes.

#+BEGIN_SRC emacs-lisp
    (use-package ob-ipython
      :straight (ob-ipython :host github :repo "gregsexton/ob-ipython")
      :config
      (require 'ob-ipython))

  ;;; * Applying John's customisations and monkeypatches 
  ;;; These are related to ipython kernel management
    (use-package scimax-org-babel-ipython-upstream
          :straight (scimax-org-babel-ipython-upstream :host github :repo "jkitchin/scimax"))

  ;;; * These  are related mostly to org-babel customisations
    (use-package scimax-ob
      :straight (scimax-ob :host github :repo "jkitchin/scimax"))


;;; Apparently the ob-ipython build process does not symlink the client.py file which is necessary to start the client. 
;;; THis is unlikely to work on a windows machine and perhaps some conditional has to be built in
;;; It would also be nice ot have a clear method to take care of the path expansion
 #+end_SRC

 #+RESULTS:

#+BEGIN_SRC emacs-lisp :tangle no
(call-process "/bin/bash" nil t nil "-c" "ln -s ~/.emacs.d/straight/repos/ob-ipython/client.py ~/.emacs.d/straight/build/ob-ipython/")
#+END_SRC

#+RESULTS:
: ob-ipython

**** scimax-python enhancements
This requires the beacon package and is a requirement for scimax-org as well.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'beacon)
(use-package scimax-org-babel-python
      :straight (scimax-org-babel-python :host github :repo "jkitchin/scimax"))

#+END_SRC

#+RESULTS:

*** Scimax Notebook
:PROPERTIES:
:ID:       A2A59FA7-505B-401D-B344-226F5C873C2D
:header-args: :tangle no
:END:

- Note taken on [2020-03-12 Thu 09:12] \\
  Taken as a whole, this may require the package scimax-mode in order to be
  able to add to the menu bar. However, since the menu bar is disabled and
  hardly ever used in my case - I need to find a way to disable it. For
  creating the easy menu entry, the scimax-utils package is required. The
  easiest way to do this, and also avoiding the overhead of the extra org-babel
  tangle and setting the path name is to incorporate the entire notebook code
  into my init.

**** Initial code using the notebook as a package
- Note taken on [2020-03-12 Thu 09:34] \\
  This is left here as a reference.

#+BEGIN_SRC emacs-lisp :tangle no
    (use-package scimax-utils
      :straight (scimax-utils :host github :repo "jkitchin/scimax"))

    ;; (use-package scimax-mode
    ;;   :straight (scimax-mode :host github :repo "jkitchin/scimax"))

  (org-babel-load-file "~/.emacs.d/straight/repos/scimax/scimax-notebook.org")
  (setq nb-notebook-directory "~/my_projects/")
#+END_SRC

**** The notebook code
:PROPERTIES:
:ID:       51CA5905-9994-4DE8-A90C-2E1E70172A76
:END:
- Note taken on [2020-03-12 Thu 09:36] \\
  I'm not sure if the preamble and lexical binding are required any more. It is
  after all included at the beginning of the init and this is not a separate
  package as of now.

#+BEGIN_SRC emacs-lisp
;;; scimax-notebook.el ---    -*- lexical-binding: t -*-

;;; Commentary:
;; This is an experiment in using scimax and org-mode for scientific notebook
;; purposes. The idea is you have a "project" that is a set of org and other
;; files under version control (git). There is a "master" file that is the
;; starting point, e.g. the README.org file. You can use `projectile' to switch
;; between projects easily, or search/find files within a project.
;;
;; `nb-new' is command to create a new project, it is just a thin wrapper that
;; creates the directories, registers them with projectile, and opens the master
;; file.
;;
;; `nb-open' is a command to open an existing project. It is a thin wrapper
;; around the projectile-switch-project command that opens the master file.
;;
;; `nb-agenda' to see the TODO items within a project, or do other org-agenda
;; things within the scope of the project, e.g. search by tag/property.
;;
;; `nb-archive' creates a zip-archive of the project.
;;
;; Note there is a projectile hydra defined: `hydra-projectile/body' that may be
;; useful for scimax-notebooks.

;;; Code:

;; * Setup
(projectile-mode +1)

(use-package ggtags)
(use-package ibuffer-projectile)
(when (executable-find "ag")
  (use-package ag))

(require 'scimax-apps)
#+END_SRC

***** Variable definitions
:PROPERTIES:
:ID:       9CB70DCC-04A0-4484-8B23-3BA76B732879
:END:

#+BEGIN_SRC emacs-lisp :results silent
(defcustom nb-notebook-directory
  "~/vc/projects/"
  "Directory where projects are stored."
  :group 'scimax-notebook
  :type '(directory))


(unless (file-directory-p nb-notebook-directory)
  (make-directory nb-notebook-directory t))


(defcustom nb-master-file (lambda (&optional name)
			    "Return the master file name for the project."
			    "README.org")
  "A function that returns the master file in each project.
The function must take one optional argument that is a project
name. This function will be run in the root directory of the
project. The function should return a string of the master file
name. See `nb-example-master' for an example of a computed master
file."
  :group 'scimax-notebook)


#+END_SRC

When I started this project, I made everything a git repo. That has some benefits, version control, git grep, etc. but in practice I don't commit all files to the repo, so some of those don't matter.

#+BEGIN_SRC emacs-lisp :results silent
(defcustom nb-project-type 'git
  "Symbol for what type of project to make.
projectile will just put a .projectile file in the directory
git will initialize the directory as a git repo."
  :group 'scimax-notebook)


(defun nb-example-master (&optional name)
  "Return the master filename for the project of NAME.
NAME is optional, and if it is nil, compute the filename from the
current directory. In this example the master file is an org-file
with the name of the root directory, with a @ prefix so it sorts
to the top of the directory with ls."
  (concat "@"
	  (file-name-base (directory-file-name default-directory))
	  ".org"))

(defcustom nb-switch-project-action
  (lambda ()
    (find-file (read-file-name "File: " "." (funcall nb-master-file))))
  "Function to run after switching projects with `nb-open'."
  :group 'scimax-notebook)


#+END_SRC

***** Notebook functions

****** Make a new notebook
:PROPERTIES:
:ID:       93CAE051-4EEF-4E8E-B40B-A69D88DAF324
:END:

We store all projects by default in nb-notebook-directory. You can use nested directories in this to make hierarchies of projects, e.g. if you have several research projects you might use research/project-one and research/project-two as the directory names. It is also ok to have even deeper nesting eg. letters/undergraduates/student-1 or administrative/nonsense/committees/committee-on-committees.

#+BEGIN_SRC emacs-lisp :results silent
;;;###autoload
(defun nb-new (name)
  "Create a new project of NAME in `nb-notebook-directory'."
  (interactive (list (read-directory-name "New project name: " nb-notebook-directory)))
  (when (file-directory-p name)
    (user-error "%s already exists." name))
  (let ((dir (file-name-as-directory (expand-file-name name nb-notebook-directory)))
	(nb-master-file-name (funcall nb-master-file name)))
    (unless (file-directory-p dir)
      (make-directory dir t)
      (cond ((eq 'git nb-project-type)
	     (let ((default-directory dir))
	       (shell-command "git init")))
	    ((eq 'projectile nb-project-type)
	     (let ((default-directory dir))
	       (shell-command "touch .projectile")))
	    (t
	     (error "Unknown kind of project: %s" nb-project-type))))
    (projectile-add-known-project dir)
    (projectile-save-known-projects)
    (find-file (expand-file-name nb-master-file-name dir))))


#+END_SRC

****** Open an existing project
:PROPERTIES:
:ID:       CA616277-5C46-4BDA-BB36-04639EBCCCC5
:END:

This just uses a custom switch project action for opening an existing project.

#+BEGIN_SRC emacs-lisp :results silent
;;;###autoload
(defun nb-open ()
  "Switch to a project and open the main file.
This is a thin wrapper on `projectile-switch-project' that opens the master file."
  (interactive)
  (let ((projectile-switch-project-action nb-switch-project-action))
    (projectile-switch-project)))


#+END_SRC

****** Make a notebook by cloning a git repo
:PROPERTIES:
:ID:       9C18D282-62AF-4329-8062-90801B54AF1D
:END:

This is a convenience function that should allow you to make a notebook from a git repo url.

#+BEGIN_SRC emacs-lisp :results silent
;;;###autoload
(defun nb-git-clone (url path)
  "Clone a git repo at URL as a project at PATH in `nb-notebook-directory'.
The URL and PATH should work in a command like: git clone URL
PATH. You need to specify the path you want the file to be in. A
default name based on the url is suggested."
  (interactive (list (read-string "git url: ") nil))
  (setq path (read-directory-name "Path: " nb-notebook-directory
				  nil nil
				  (replace-regexp-in-string
				   "\\.git\\'" ""
				   (car (last (f-split url))))))
  (let ((default-directory nb-notebook-directory))
    (when (file-exists-p path)
      (error "%S already exists" path))
    (make-directory path t)
    (shell-command-to-string (format "git clone %s \"%s\"" url path))
    (dired path)))


#+END_SRC

****** Clone an existing project
:PROPERTIES:
:ID:       708C4EA1-9EFD-48D1-B8E8-855CE69CE053
:END:

This is helpful when you want to keep a copy of the repo, for example. It is not a feature I use a lot though.

#+BEGIN_SRC emacs-lisp :results silent
;;;###autoload
(defun nb-clone ()
  "Create a clone (by a recursive copy) of the current notebook."
  (interactive)
  (let* ((project-root (projectile-project-root))
	 (dir-one-up (file-name-directory (directory-file-name project-root)))
	 (name (file-name-base (directory-file-name project-root)))
	 (clone-base-name (read-directory-name
			   "Clone name: "
			   dir-one-up  nil nil
			   (concat name "-clone"))))
    (let ((default-directory dir-one-up))
      (shell-command (format "cp -R %s %s" name clone-base-name))
      (projectile-add-known-project clone-base-name)
      (projectile-save-known-projects)
      (projectile-switch-project-by-name clone-base-name))))


#+END_SRC

***** Notebook agenda
:PROPERTIES:
:ID:       1A8350CF-266C-4BDF-A366-A5E9AD75F222
:END:

I usually want to do project management in a notebook, e.g. keep track of TODOs, what to do next etc. I don't always put project org-files in my regular agenda files for performance reasons. Here we generate an agenda for that using just the org-files in the current directory.

#+BEGIN_SRC emacs-lisp   :results silent
(defcustom nb-agenda-files nil
  "A file, a list of files or function to generate a list of org-files to make an agenda from.
The function should return a string filepath or list of absolute
file paths. The function will be run in the root project
directory. You may want to make this a directory local variable."

  :group 'scimax-notebook
  :type '(string list function))


;;;###autoload
(defun nb-agenda (project &optional all-org-files)
  "Show org-agenda for org-files in the notebook."
  (interactive (list (completing-read "Project: "
				      (mapcar 'expand-file-name
					      (append
					       (list (projectile-project-root
						      (projectile-project-name)))
					       (projectile-relevant-known-projects)))
				      nil t
				      (projectile-project-root (projectile-project-name)))
		     current-prefix-arg))
  (let ((org-agenda-files (if (or all-org-files
				  (null nb-agenda-files))
			      (mapcar
			       (lambda (f) (expand-file-name
					    f (projectile-project-root)))
			       (-filter (lambda (f)
					  (and
					   (f-ext? f "org")
					   (not (s-contains? "#" f))))
					(projectile-current-project-files)))
			    (cond
			     ((listp nb-agenda-files)
			      nb-agenda-files)
			     ((functionp nb-agenda-files)
			      (let ((default-directory (projectile-project-root
							(projectile-project-name))))
				(funcall nb-agenda-files)))
			     (t
			      nb-agenda-files)))))
    (org-agenda)))


#+END_SRC

***** Notebook archive files
:PROPERTIES:
:ID:       541FA6B1-591A-442D-8B19-3CDA9C525D96
:END:

The idea here is it is sometimes useful to create an archive file (e.g. a zip file) of your project, e.g. to upload to zenodo/figshare, or to share with a collaborator.

#+BEGIN_SRC emacs-lisp   :results silent
;;;###autoload
(defun nb-git-archive ()
  "Create an archive of the current notebook.
This uses git archive to create an archive of the current state
of the notebook. The zip file will be timestamped in the root
project directory. If your repo contains untracked files or
uncommitted changes, you will be prompted to continue."
  (let ((output (shell-command-to-string "git status --porcelain")))
    (unless (string= "" output)
      (when
	  (y-or-n-p
	   (format
	    "Your notebook contains uncommitted changes or files:\n%s\n Continue? " output))
	(shell-command
	 (format
	  "git archive --format zip HEAD -o \"%s-%s.zip\""
	  (f-join (projectile-project-root)
		  (car (last (f-split (projectile-project-root)))))
	  (format-time-string "%Y-%m-%d-%H:%M%p")))))))

#+END_SRC


This function works for all the notebooks and relies on external programs like zip or tar.

#+BEGIN_SRC emacs-lisp   :results silent
(defcustom nb-archive-command "zip"
  "Command to make archives.
An alternative is tar."
  :group 'scimax-notebook)


(defcustom nb-archive-command-options "-r"
  "Command options to make archives.
For tar you want -czf for a tar.gz
or tar -cjf for a bzipped file
For bzip2 you want "
  :group 'scimax-notebook)


(defcustom nb-archive-extension ".zip"
  "Default extension for the archive.
For tar with -czf I recommend .tar.gz
For tar with -cjf I recommend .tbz2"
  :group 'scimax-notebook)


(defun nb-archive (zip-file project)
  "Create an archive file of the project.
The type of archive is determined by `nb-archive-command'."
  (interactive (list (read-string
		      "Archive name: "
		      (concat (projectile-project-name) nb-archive-extension))
		     (projectile-completing-read "Project: "
						 (projectile-relevant-known-projects))))
  (let ((default-directory project))
    (message
     (format "%s %s %s \"%s\""
	     nb-archive-command nb-archive-command-options
	     zip-file project))))


#+END_SRC



***** TODO List the tags in a notebook
:PROPERTIES:
:ID:       927FE3C7-9430-462C-988E-495EB9218754
:END:

The notebook is just a collection of org-files, so it should be possible to use the agenda commands to search for things in it using tags and properties. That means it would be helpful to get a list of tags in the notebook, e.g. to help construct the queries, or to make sure you use them consistently. Here we loop through all the org-files and collect the tags in a list. This is lightly tested, and in a large project might be slow.

#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-list-tags ()
  "Get a list of tags in the notebook."
  (interactive)
  (let ((tags '())
	(already-open nil)
	(org-files (mapcar
		    (lambda (f) (expand-file-name
				 f (projectile-project-root)))
		    (-filter (lambda (f)
			       (and
				(f-ext? f "org")
				(not (s-contains? "#" f))))
			     (projectile-current-project-files))))
	(inhibit-local-variables-regexps))
    ;; Ignore local variables for this.
    (push "\\.org\\'" inhibit-local-variables-regexps)
    (cl-loop for org-file in org-files do
	     (setq already-open (find-buffer-visiting org-file))
	     (with-current-buffer (find-file-noselect org-file)
	       (save-excursion
		 (save-restriction
		   (widen)
		   (goto-char (point-min))
		   (while (re-search-forward org-heading-regexp nil t)
		     (setq tags (append tags (org-get-tags)))))))
	     (unless already-open
	       (kill-buffer already-open)
	       (setq already-open nil)))
    (-uniq tags)))


#+END_SRC

Here are the tags in this project.

#+filetags: random

#+BEGIN_SRC emacs-lisp :tangle no
(nb-list-tags)
#+END_SRC

#+RESULTS:
| random | noexport | feature | slide | example | bug |



***** CANCEL Notebook menu

Sometimes I find it helpful to use a menu instead of keyboard commands. This creates that menu, so it is easy to create a new notebook or open an existing one, and also to see a list of known projects. When that list gets very long it can get somewhat slow to list them all. By default the list of projects is only made once when this library is loaded. You can set =nb-scimax-update-menu-p= to be non-nil so it is updated all the time, or manually run =nb-update-scimax-projects-menu= to update it if you have new projects you want to see there.

#+BEGIN_SRC emacs-lisp  :tangle no
(easy-menu-change
 '("Scimax") "notebook"
 `(["New notebook" nb-new t]
   ["Open notebook" nb-open t]
   ["Insert a notebook link" nb-insert-link t]
   ["Update project list" nb-update-scimax-projects-menu t]
   ("Projects"))
 "words")


(defun nb-update-scimax-projects-menu ()
  "Update the projects menu."
  (interactive)
  (easy-menu-change
   '("Scimax" "notebook") "Projects"
   (mapcar (lambda (x)
	     (vector
	      ;; entry
	      (file-name-nondirectory (substring x 0 -1))
	      ;; action
	      `(lambda ()
		 (interactive)
		 (projectile-switch-project-by-name
		  ,x))
	      ;; visibility
	      t))
	   (projectile-relevant-known-projects))
   "words"))


;; update the project list once on loading.
(nb-update-scimax-projects-menu)


#+END_SRC


***** Searching the notebook

****** Searching whole notebook for a string

These search for strings in files in whole notebook. You run these commands, enter the search string and press enter. Then a new window pops up with the results.

| M-x projectile-ripgrep |         | H-p sr | fast, better than grep                   |
| M-x projectile-ag      |         | H-p ss | fast, nice interface                     |
| M-x projectile-grep    | C-c p g |        | Not my favorite, the interface is clunky |


This uses a counsel/ivy interface for searching.

| M-x counsel-git-grep   |         | H-c g  | Only searches files in a git repo        |

****** Limiting the search scope to the current directory

These commands will search for text in files in the current directory.

| counsel-ag   | H-c a | find in current directory using ag, recurses into directories |
| counsel-grep |       | find in current directory using grep, does not recurse        |
| counsel-pt   | H-c p |                                                               |

****** Finding files/directories in the notebook

| M-x projectile-find-file                   | C-c p f | H-p f |                                |
| M-x projectile-find-file-dwim              |         | H-p g |                                |
| M-x projectile-find-dir                    |         | H-p d |                                |
| M-x projectile-dired                       |         | H-p D | open root in dired             |
| M-x counsel-git                            |         | H-c f | limited to files in a git repo |
| M-x projectile-find-file-in-directory      |         | H-p l | may be does not work?          |
| M-x projectile-find-file-in-known-projects |         | H-p F | May be slow!                   |

****** Searching in open project buffers

| M-x projectile-multi-occur |   | H-p o |


****** Limiting scope to some kinds of files
:PROPERTIES:
:ID:       60CC553B-8E8C-4763-BD0A-EE743F48491F
:END:

Here is a function you can use to interactively search files by pattern. For example to find the string xref in org files you could do this:

#+BEGIN_SRC emacs-lisp :tangle no
(nb-search ".org$" "xref")
#+END_SRC

#+BEGIN_SRC emacs-lisp 
(use-package ivy-xref
  :ensure t
  :init (if (< emacs-major-version 27)
            (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
          (setq xref-show-definitions-function #'ivy-xref-show-defs)))


(defun nb-search (file-pattern regexp)
  "Search files matching FILE-PATTERN for REGEXP and show matches."
  (interactive "sfile pattern: \nsSearch for: ")
  (let* ((files (projectile-project-files (projectile-project-root)))
	 (ignores (nconc (mapcar
                          (lambda (s) (concat s "/"))
                          grep-find-ignored-directories)
                         grep-find-ignored-files))
	 (xrefs (cl-mapcan
                 (lambda (file)
		   (when (file-exists-p file)
                     (xref-collect-matches regexp "*" file
                                           (and (file-directory-p file)
						ignores))))
                 files)))
    (unless xrefs
      (user-error "No matches for: %s" regexp))
    (xref--show-xrefs xrefs nil t)))


(defun nb-search-all (regexp)
  "Search files for REGEXP and show matches."
  (interactive "sSearch for: ")
  (let* ((files (projectile-project-files (projectile-project-root)))
	 (ignores (nconc (mapcar
                          (lambda (s) (concat s "/"))
                          grep-find-ignored-directories)
                         (append '("*.pdf") grep-find-ignored-files)))
	 ;; This was a little surprising, I had to add -a in a few places to treat binary files like text
	 (grep-host-defaults-alist '((localhost
				      (grep-command "grep  -nH --null -e -a ")
				      (grep-template "grep <X> <C> -nH --null -e <R> <F>")
				      (grep-use-null-device nil)
				      (grep-find-command ("find . -type f -exec grep  -nH --null -e -a \\{\\} +" . 42))
				      (grep-find-template "find <D> <X> -type f <F> -exec grep <C> -nH --null -e <R> -a \\{\\} +")
				      (grep-use-null-filename-separator t) (grep-find-use-xargs exec-plus)
				      (grep-highlight-matches nil))))

	 (xrefs (cl-mapcan
                 (lambda (file)
		   (when (file-exists-p file)
                     (xref-collect-matches regexp "*" file
                                           (and (file-directory-p file)
						ignores))))
                 files)))
    (unless xrefs
      (user-error "No matches for: %s" regexp))
    (xref--show-xrefs xrefs nil t)))


#+END_SRC

#+RESULTS:
: nb-search-all

***** Jump to an org file in the notebook / table of contents
:PROPERTIES:
:ID:       D1BD9E4A-B16D-492E-BA41-DDCEC099C6C8
:END:

Issue [[https://github.com/jkitchin/scimax/issues/332][332]] requested a way to make something like a table of contents for the org files in a notebook. This function builds a list of candidates that show the title, date and filename for selection.

#+BEGIN_SRC emacs-lisp 
(defun nb-search-title ()
  "Select a notebook file by title, date or filename."
  (interactive)
  (let* ((project-root (projectile-project-root))
	 (org-files (mapcar (lambda (f)
			      (expand-file-name f project-root))
			    (-filter (lambda (f) (f-ext? f "org"))
				     (projectile-project-files project-root))))
	 data
	 candidates
	 format-string
	 title
	 date)

    ;; Get title, date and filename for each org-file. If there is no date, we
    ;; use last modified time. It doesn't seem possible to get the file creation
    ;; time. I am not sure this is robust for all things you might put into the
    ;; DATE field. I assume it is something org can read and convert to a time.
    (setq data (mapcar
		(lambda (f)
		  (when (file-exists-p f)
		    (with-temp-buffer
		      (insert-file-contents f)
		      (setq title (if (re-search-forward "#\\+TITLE:\\(.*\\)" nil t)
				      (match-string 1)
				    "No title"))


		      (goto-char (point-min))
		      (setq date (if (re-search-forward "#\\+DATE:\\(.*\\)" nil t)
				     (format-time-string "%Y-%m-%d"
							 (org-read-date nil t (match-string 1)))
				   (format-time-string
				    "mod-%Y-%m-%d"
				    (file-attribute-modification-time
				     (file-attributes f)))))

		      (list title date f))))
		org-files))

    ;; Sort by date, more recent things will be first
    (setq data (cl-sort (copy-sequence data)
			(lambda (a b) (org-time> (nth 1 a) (nth 1 b)))))

    ;; Now create a format string so the longest title fits and is aligned.
    (setq format-string (format "%%%ss | %%16s | %%s"
				(apply 'max (mapcar (lambda (e) (length (car e))) data))))
    ;; These are the candidates we will choose from.
    (setq candidates (cl-loop for (title date f) in data
			      collect
			      (list (format format-string title date f) f)))

    ;; I use completing-read here so you can use your own backend. The only
    ;; downside is I can't put many actions like in a dedicated ivy command.
    (find-file (cadr (assoc
		      (completing-read "Open: " candidates)
		      candidates)))))
#+END_SRC

#+RESULTS:
: nb-search-title



***** Help
:PROPERTIES:
:ID:       25BA9C42-C628-4BDF-A568-F3345938B640
:END:

#+BEGIN_SRC emacs-lisp 
(defun nb-help ()
  "Open the org-file describing the notebook."
  (interactive)
  (find-file (expand-file-name "scimax-notebook.org" scimax-dir)))
#+END_SRC

**** Notebook/project links
:PROPERTIES:
:ID:       69002193-A5B4-425B-9B9D-62F7EBAB95B8
:END:

I often want to make links between projects. For example, I may have notes in a proposal I want to reference, or I may want a link to work one of my students has done. Regular links don't work well for this. You cannot use absolute paths, because your project directory may be in another path than a collaborators. Absolute paths also break if you move the directory. Even relative paths don't work reliably because you may store the two projects in different relative locations. id links have potential to work, but I find them slow especially when you have never opened the org-file with that id in it; then org-mode may not be able to find it.

We need a different kind of link that allows you to specify a project, and a file in that project. Then, when you follow the link, it will look up the project in your list of known projects to get the root directory for it, and then construct a path to the file from that.

Here we define a new org-link for making links to files in notebooks. These links will look like nb:project-name::relative-file-path::link-target. If the target is not existent, the link will be red.

- project-name :: Name of project, usually at the end of the absolute path to the project directory.
- relative-file-path :: Path to a file, usually relative to the project root
- link-target :: a number, or char position, or regexp to find in the file. For org-files, this can be any kind of org-link modifier.


#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-parse-path (path)
  "Parse PATH into parts.
PATH is a :: separated string with up to 3 parts.
Returns a list of (project fpath link-target).
The link target is optional, and defaults to line 1."
  ;; Somehow split-string must change match-data. This messes up
  ;; fontification...
  (save-match-data
    (let* ((parts (split-string path "::")))
      (when (> (length parts) 3)
	(error "There should only be 3 parts separated by ::"))
      (list
       (nth 0 parts)
       (nth 1 parts)
       (or (nth 2 parts) "1")))))


#+END_SRC


Here are a few example paths and how they are parsed.

#+BEGIN_SRC emacs-lisp :tangle no
(list (nb-parse-path "project::fpath")
      (nb-parse-path "project::fpath::c6"))
#+END_SRC

#+RESULTS:
| project | fpath |  1 |
| project | fpath | c6 |


***** Follow a link
:PROPERTIES:
:ID:       2691DB45-A415-442C-87CE-19C9D507E872
:END:

Following a link means opening the file it points to.


#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-follow (path)
  "Open the project at PATH."
  (interactive (list (org-element-property :path (org-element-context))))
  (destructuring-bind (project fpath link-target) (nb-parse-path path)
    (let* ((projects (remove nil (append (projectile-relevant-known-projects)
					 (list
					  (when (projectile-project-p)
					    (projectile-project-root))))))
	   ;; These are projects that match the project spec
	   (project-candidates (-filter (lambda (p)
					  (string-match (concat project "/\\'") p))
					projects))
	   ;; These are projects that match the spec, and that have the file we want.
	   (candidates (-filter (lambda (p)
				  (file-exists-p (expand-file-name fpath p)))
				project-candidates)))
      (cond
       ((null project-candidates)
	(error "%s is not a known project" project))
       ((null candidates)
	(error "%s was not found in %s\nproject-candidates: %S\ncandidates: %s" fpath project project-candidates candidates))
       ;; one project, and the file exists
       ((and (= 1 (length candidates))
	     (file-exists-p (expand-file-name fpath (car candidates))))
	(org-mark-ring-push)
	(find-file (expand-file-name fpath (car candidates))))
       ;; multiple matches, select project interactively
       (t
	(org-mark-ring-push)
	(find-file (expand-file-name fpath (completing-read "Project: " candidates)))))
      ;; If we get here, we have not errored and should have opened a file. Now,
      ;; link-target the end link.
      (cond
       ((eq major-mode 'org-mode)
	(when (not (or (null link-target) (string= "" link-target)))
	  (cond
	   ((string-match "\\<[0-9]+\\>" link-target)
	    (forward-line (- (string-to-number link-target) 1)))
	   ((string-match "\\<c\\([0-9]+\\)\\>" link-target)
	    (goto-char (string-to-number (match-string 1 link-target))))
	   (t
	    (org-open-link-from-string (format "[[%s]]" link-target)))))
	(org-show-entry))
       ;; everything else
       (t
	(cond
	 ;; if it is just a number it is a line number
	 ((string-match "\\<[0-9]*\\>" link-target)
	  (forward-line (- (string-to-number link-target) 1)))
	 ;; a pattern like c23 means go to char 23
	 ((string-match "^c\\([0-9]*\\)" link-target)
	  (goto-char (string-to-number (match-string 1 link-target))))
	 (t
	  (goto-char (point-min))
	  (goto-char (re-search-forward (regexp-quote link-target) nil t)))))))))

(defun nb-follow-other (path &optional new-frame)
  "Open the project at PATH in other window."
  (interactive (list (org-element-property :path (org-element-context))
		     current-prefix-arg))
  (destructuring-bind (project fpath link-target) (nb-parse-path path)
    (let* ((projects (remove nil (append (projectile-relevant-known-projects)
					 (list
					  (when (projectile-project-p)
					    (projectile-project-root))))))
	   ;; These are projects that match the project spec
	   (project-candidates (-filter (lambda (p)
					  (string-match (concat project "/\\'") p))
					projects))
	   ;; These are projects that match the spec, and that have the file we want.
	   (candidates (-filter (lambda (p)
				  (file-exists-p (expand-file-name fpath p)))
				project-candidates)))
      (cond
       ((null project-candidates)
	(error "%s is not a known project" project))
       ((null candidates)
	(error "%s was not found in %s\nproject-candidates: %S\ncandidates: %s" fpath project project-candidates candidates))
       ;; one project, and the file exists
       ((and (= 1 (length candidates))
	     (file-exists-p (expand-file-name fpath (car candidates))))
	(org-mark-ring-push)
	(if new-frame
	    (find-file-other-frame (expand-file-name fpath (car candidates)))
	  (find-file-other-window (expand-file-name fpath (car candidates)))))
       ;; multiple matches, select project interactively
       (t
	(org-mark-ring-push)
	(if new-frame
	    (find-file-other-frame (expand-file-name fpath (completing-read "Project: " candidates)))
	  (find-file-other-window (expand-file-name fpath (completing-read "Project: " candidates))))))
      ;; If we get here, we have not errored and should have opened a file. Now,
      ;; link-target the end link.
      (cond
       ((eq major-mode 'org-mode)
	(when (not (or (null link-target) (string= "" link-target)))
	  (cond
	   ((string-match "\\<[0-9]+\\>" link-target)
	    (forward-line (- (string-to-number link-target) 1)))
	   ((string-match "\\<c\\([0-9]+\\)\\>" link-target)
	    (goto-char (string-to-number (match-string 1 link-target))))
	   (t
	    (org-open-link-from-string (format "[[%s]]" link-target)))))
	(org-show-entry))
       ;; everything else
       (t
	(cond
	 ;; if it is just a number it is a line number
	 ((string-match "\\<[0-9]*\\>" link-target)
	  (forward-line (- (string-to-number link-target) 1)))
	 ;; a pattern like c23 means go to char 23
	 ((string-match "c\\([0-9]*\\)" link-target)
	  (goto-char (string-to-number (match-string 1 link-target))))
	 ;; Everything else means search for it. I don't know why I have to
	 ;; use goto-char here. I thought it should just go.
	 (t
	  (goto-char (re-search-forward link-target nil 'mv)))))))))


(defun nb-follow-other-frame (path)
  "Follow path in other frame."
  (interactive (list (org-element-property :path (org-element-context))))
  (nb-follow-other path t))

#+END_SRC


We may want to open this link with a system program, e.g. if it is an ipynb or something.

#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-follow-sys (path)
  "Open the project at PATH with a system program."
  (interactive (list (org-element-property :path (org-element-context))))
  (destructuring-bind (project fpath link-target) (nb-parse-path path)
    (let* ((projects (remove nil (append (projectile-relevant-known-projects)
					 (list
					  (when (projectile-project-p)
					    (projectile-project-root))))))
	   ;; These are projects that match the project spec
	   (project-candidates (-filter (lambda (p)
					  (string-match (concat project "/\\'") p))
					projects))
	   ;; These are projects that match the spec, and that have the file we want.
	   (candidates (-filter (lambda (p)
				  (file-exists-p (expand-file-name fpath p)))
				project-candidates)))
      (cond
       ((null project-candidates)
	(error "%s is not a known project" project))
       ((null candidates)
	(error "%s was not found in %s\nproject-candidates: %S\ncandidates: %s" fpath project project-candidates candidates))
       ;; one project, and the file exists
       ((and (= 1 (length candidates))
	     (file-exists-p (expand-file-name fpath (car candidates))))
	(org-mark-ring-push)
	(org-open-file-with-system (expand-file-name fpath (car candidates))))
       ;; multiple matches, select project interactively
       (t
	(error "no match found"))))))
#+END_SRC

***** Store a project link
:PROPERTIES:
:ID:       A199F5C6-456E-4C79-928F-6800D563ABC6
:END:

This adds a capability for using C-c l to store a link in org-mode. It creates a link that should go the position of the cursor at the time the link was stored.

#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-store-link ()
  "Store a project link to a file in a project."
  (if (or (null (buffer-file-name)) (not (projectile-project-p)))
      nil
    (let* ((root (projectile-project-root))
	   (current-file (buffer-file-name))
	   (project (car (last (f-split (projectile-project-root)))))
	   (relpath (file-relative-name current-file root))
	   (link-target (format "c%s" (point))))

      (org-store-link-props
       :type "nb"
       ;; Note I use the concat here just to avoid fontifying errors in the link
       ;; in the org file.
       :link (format (concat "nb:" "%s::%s::%s") project relpath link-target)
       :description "")
      (format (concat "nb:" "%s::%s::%s") project relpath link-target))))


#+END_SRC

***** Link completion
:PROPERTIES:
:ID:       E58F341D-C42D-48E0-9A4F-52311B1FFAFC
:END:

This makes it easy to type C-c C-l then type nb <enter> and then get to choose a project and file with completion to insert a link.

#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-complete-link ()
  "Create a link with completion."
  ;; Pick a project
  (let* ((project-root  (projectile-completing-read
			 "Project: "
			 (projectile-relevant-known-projects)
			 :initial-input (projectile-project-root (projectile-project-name))))
	 (project (projectile-project-name project-root))
	 (file (completing-read "File: " (projectile-project-files project-root))))
    (format "nb:%s::%s" project file)))


(defun nb-insert-link ()
  "Insert a link with completion."
  (insert (nb-complete-link)))


#+END_SRC

***** Link face
:PROPERTIES:
:ID:       B0FE7314-280B-4AE3-96C4-6BAD41C205E4
:END:

We use a face to show if a link is valid. Valid means there is one match, red means there is no match, and orange means there is more than one project that matches. That can happen if you have multiple clones of a git repo for example.

#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-link-face (path)
  "Compute a face for the link.
If everything is in order it is an 'org-link.
If there are multiple projects it will be orange.
If we can't find a project or file, it will be red."
  ;; Something in here modifies the match-data which will mess up fontification.
  ;; We save it to avoid that.
  (save-match-data
    (let* ((parts (nb-parse-path path))
	   (project (nth 0 parts))
	   (fpath (nth 1 parts))
	   (follow (nth 2 parts))
	   (projects (append (projectile-relevant-known-projects)
			     (list (projectile-project-root))))
	   (project-candidates (-filter (lambda (p)
					  (string-match project (or p "")))
					projects))
	   ;; These are projects that match the spec, and that have the file we want.
	   (candidates (-filter (lambda (p)
				  (file-exists-p (expand-file-name fpath (or p ""))))
				project-candidates)))
      (cond
       ;; No project
       ((null candidates)
        '(:foreground "red"))
       ;; one project, and the file exists
       ((= 1 (length candidates))
	'(:foreground "darkviolet"))
       ;; Multiple projects seem to match.
       ((> (length candidates) 1)
        '(:foreground "orange"))))))


#+END_SRC

***** Tooltips for the link
:PROPERTIES:
:ID:       ABAB4E52-161A-455B-92FD-9E6EE62C3016
:END:

The links have a tooltip that tells you the path that will be opened, or helpful information about issues with the link (not found, or multiple repos).

#+BEGIN_SRC emacs-lisp   :results silent
(defun nb-link-tooltip (_win _obj position)
  "A tooltip for the nb links."
  (save-match-data
    (save-excursion
      (goto-char position)
      (let ((path (org-element-property :path (org-element-context))))
  	(destructuring-bind (project fpath follow) (nb-parse-path path)
  	  (let* ((projects (append (projectile-relevant-known-projects)
				   (list (projectile-project-root))))
  		 (project-candidates (-filter (lambda (p)
  						(string-match project p))
  					      projects))
  		 ;; These are projects that match the spec, and that have the file we want.
  		 (candidates (-filter (lambda (p)
  					(file-exists-p (expand-file-name fpath p)))
  				      project-candidates)))
  	    (cond
  	     ((null project-candidates)
  	      (format "%s is not a known project." project))

  	     ((null candidates)
  	      (format "%s not found in %s." fpath project))

  	     ;; There is one project, and the file is in it.
  	     ((= 1 (length candidates))
  	      ;; Show the path
  	      (expand-file-name fpath (car candidates)))

  	     ;; Multiple projects. We don't check for file existence
  	     ((> (length candidates) 1)
  	      (format "Multiple projects have %s: %S" fpath candidates))

  	     (t
  	      "Not sure what is going on with this one."))))))))


#+END_SRC

***** Activating the link
:PROPERTIES:
:ID:       04FF49A9-2BB5-4A8C-92A9-F8F0EB752FE8
:END:

I am a big fan of image overlays on links that are images. We make that happen for notebook links here.

#+BEGIN_SRC emacs-lisp  :results silent
(defun nb-activate-link (start end path bracketp)
  "Activate a project link.
This is used to put image overlays on links.
START and END are the positions of the link.
PATH is the link PATH.
BRACKETP is non-nil for bracketed links."
  (destructuring-bind (project fpath link-target) (nb-parse-path path)
    (if (and (string-match (org-image-file-name-regexp) fpath)
  	     (not (ov-at start)))
  	;; Find the image
  	(let* ((projects (remove nil (append (projectile-relevant-known-projects)
  					     (list
  					      (when (projectile-project-p)
  						(projectile-project-root))))))
  	       ;; These are projects that match the project spec
  	       (project-candidates (-filter (lambda (p)
  					      (string-match (concat project "/\\'") p))
  					    projects))
  	       ;; These are projects that match the spec, and that have the file we want.
  	       (candidates (-filter (lambda (p)
  				      (file-exists-p (expand-file-name fpath p)))
  				    project-candidates))
  	       (img-file (when (and (= 1 (length candidates))
  				    (file-exists-p (expand-file-name fpath (car candidates))))
  			   (expand-file-name fpath (car candidates)))))
  	  (when img-file
  	    (let* ((ov (make-overlay start end))
  		   (lnk (org-element-context))
  		   (parent (org-element-property :parent lnk))
  		   (ao (when parent (org-element-property :attr_org parent)))
  		   (width (when ao
  		   	    (plist-get
  		   	     (org-export-read-attribute :attr_org  parent) :width)))
  		   (img-file (if width
  		   		 (funcall  org-inline-image-resize-function img-file width)
  		   	       img-file))
  		   (img (create-image (or img-file )
  		   		      nil
  		   		      nil
  		   		      :width width)))

  	      (overlay-put ov 'display img)
  	      (overlay-put ov 'help-echo (expand-file-name fpath (car candidates)))
  	      (overlay-put ov 'face 'default)
  	      (overlay-put ov 'org-image-overlay t)
  	      (overlay-put ov 'modification-hooks
  	      		   (list 'org-display-inline-remove-overlay))
  	      (push ov org-inline-image-overlays)))))))


#+END_SRC

#+RESULTS:
: nb-activate-link

***** A keymap
:PROPERTIES:
:ID:       1FB5C9EE-D345-4FBA-893D-6368570042A9
:END:

I often want to open a link in the Finder/Explorer or bash. We make a keymap to make that easy here.

We have to get the link path and then open it.

#+BEGIN_SRC emacs-lisp  :results silent
(defun nb-link-bash ()
  "Open the nb link at point in bash."
  (interactive)
  (let* ((link (org-element-context))
	 (path (org-element-property :path link)))
    (when (and (eq 'link (car link))
	       (string= "nb" (org-element-property :type link)))
      (destructuring-bind (project fpath link-target) (nb-parse-path path)
	(let* ((projects (remove nil (append (projectile-relevant-known-projects)
					     (list
					      (when (projectile-project-p)
						(projectile-project-root))))))
	       ;; These are projects that match the project spec
	       (project-candidates (-filter (lambda (p)
					      (string-match (concat project "/\\'") p))
					    projects))
	       ;; These are projects that match the spec, and that have the file we want.
	       (candidates (-filter (lambda (p)
				      (file-exists-p (expand-file-name fpath p)))
				    project-candidates)))
	  (if (= 1 (length candidates))
	      (bash (expand-file-name (car candidates)))
	    (bash (read-string "Project: " candidates))))))))

#+END_SRC

Here is a function to open the link in explorer.

#+BEGIN_SRC emacs-lisp  :results silent
(defun nb-link-explorer ()
  "Open the nb link at point in explorer/finder."
  (interactive)
  (let* ((link (org-element-context))
	 (path (org-element-property :path link)))
    (when (and (eq 'link (car link))
	       (string= "nb" (org-element-property :type link)))
      (destructuring-bind (project fpath link-target) (nb-parse-path path)
	(let* ((projects (remove nil (append (projectile-relevant-known-projects)
					     (list
					      (when (projectile-project-p)
						(projectile-project-root))))))
	       ;; These are projects that match the project spec
	       (project-candidates (-filter (lambda (p)
					      (string-match (concat project "/\\'") p))
					    projects))
	       ;; These are projects that match the spec, and that have the file we want.
	       (candidates (-filter (lambda (p)
				      (file-exists-p (expand-file-name fpath p)))
				    project-candidates)))
	  (if (= 1 (length candidates))
	      (explorer (expand-file-name (car candidates)))
	    (explorer (read-string "Project: " candidates))))))))


#+END_SRC

This function lets you get to the file or another one using projectile.

#+BEGIN_SRC emacs-lisp  :results silent
(defun nb-link-projectile-find-file ()
  "Open the nb link at point with projectile."
  (interactive)
  (let* ((link (org-element-context))
	 (path (org-element-property :path link)))
    (when (and (eq 'link (car link))
	       (string= "nb" (org-element-property :type link)))
      (destructuring-bind (project fpath link-target) (nb-parse-path path)
	(let* ((projects (remove nil (append (projectile-relevant-known-projects)
					     (list
					      (when (projectile-project-p)
						(projectile-project-root))))))
	       ;; These are projects that match the project spec
	       (project-candidates (-filter (lambda (p)
					      (string-match (concat project "/\\'") p))
					    projects))
	       ;; These are projects that match the spec, and that have the file we want.
	       (candidates (-filter (lambda (p)
				      (file-exists-p (expand-file-name fpath p)))
				    project-candidates)))
	  (if (= 1 (length candidates))
	      (let ((default-directory (expand-file-name (car candidates))))
		(projectile-completing-read "Find file: "
                                            (projectile-project-files
					     (projectile-project-root))
					    :initial-input fpath))))))))


#+END_SRC


It seems like we might want a hydra for various actions on a link. This would be useful if you don't remember the keymap.

#+BEGIN_SRC emacs-lisp  :results silent


(defun nb-event (event)
  "EVENT is from a mouse click.
We use this with C-mouse-1 on a link."
  (interactive "e")
  (with-selected-window (nth 0 (cadr event))
    (goto-char (nth 1 (cadr event)))
    (nb-hydra/body)))


#+END_SRC

Here is our keymap.

#+BEGIN_SRC emacs-lisp  :results silent
(defvar nb-link-map (let ((map (copy-keymap org-mouse-map)))
		      (define-key map (kbd "M-o") 'nb-follow-other)
		      (define-key map (kbd "M-O") 'nb-follow-other-frame)
		      (define-key map (kbd "M-s") 'nb-follow-sys)
		      (define-key map (kbd "M-b") 'nb-link-bash)
		      (define-key map (kbd "M-e") 'nb-link-explorer)
		      (define-key map (kbd "M-f") 'nb-link-projectile-find-file)
		      (define-key map (kbd "M-h") 'nb-hydra/body)
		      (define-key map (kbd "<C-mouse-1>") 'nb-event)
		      map)
  "Key bindings for notebook links")
#+END_SRC


***** Defining the link
:PROPERTIES:
:ID:       DB35E05E-FCAF-49B6-9B09-73C42A4FB54F
:END:

This is just the link definition.

#+BEGIN_SRC emacs-lisp   :results silent
(org-link-set-parameters
 "nb"
 :follow #'nb-follow
 :store #'nb-store-link
 :complete #'nb-complete-link
 :help-echo #'nb-link-tooltip
 :activate-func #'nb-activate-link
 :face #'nb-link-face
 :keymap nb-link-map)

#+END_SRC

****** Example links

 nb:eeg-pitt::README.org
 nb:eeg-pitt::README.org::10
 nb:eeg-pitt::README.org::c453
 nb:eeg-pitt::README.org::id:C3BC7825-F094-43F1-B2D4-52559FAC0BB2


 Here is one with multiple matches:
 nb:students::README.org

 nb:bad-project::bad-file
 nb:eeg-pitt::bad-file

#+attr_org: :width 50%
nb:eeg-pitt::./obipy-resources/6d9672694ff9a17f61f22a2b1be01575-10220Ctf.png


 [[prj:students::README.org]]  bracketed

prj:students::README.org

**** A notebook hydra
:PROPERTIES:
:ID:       6B26E4FC-C32C-4459-8FD5-9234A52C913A
:END:
- Note taken on [2020-03-18 Wed 08:14] \\
  Adding a shortcut to the function to clone a git repo and create a notebook.

#+BEGIN_SRC emacs-lisp 
(defhydra nb-hydra (:hint nil :color blue)
  "
navigation      search              utilities                link
--------------------------------------------------------------------------------
_f_: file       _sa_: search all   _b_: Open in bash         _o_: open other window
_d_: dir        _ss_: search some  _e_: Open in explorer     _O_: open other frame
_D_: open root  _sb_: search bufs  _n_: new notebook         _y_: open with sys
                                  _g_: clone to new notebook
"
  ("b" bash "bash")
  ("e" explorer "explorer")
  ("f" projectile-find-file-dwim "find-file")
  ("d" projectile-find-dir "find dir")
  ("D" projectile-dired "open root in dired")
  ("n" nb-new "new notebook")
  ("g"  nb-git-clone "clone to new nb")

  ("sa" nb-search-all "search all files")
  ("ss" nb-search "search some files")
  ("sb" projectile-multi-occur "search nb buffers")
  ("st" nb-search-title "Search by title/date")
  ("o" nb-follow-other "open other window")
  ("O" nb-follow-other-frame "Open other frame")
  ("y" nb-follow-sys "Open with system program"))

#+END_SRC

#+RESULTS:
: nb-hydra/body

**** Customs settings for scimax notebooks
:PROPERTIES:
:ID:       D3A39991-54F0-4809-9036-A5D8E55B3BB7
:END:

#+BEGIN_SRC emacs-lisp
(setq nb-notebook-directory "~/my_projects/")
(global-set-key (kbd "M-s n") 'nb-hydra/body)
#+END_SRC

*** To use John's old ob-ipython fork

#+BEGIN_SRC emacs-lisp
;;;* For reference : to use John's old ob-ipython fork. The require may not be necessary here
(use-package ob-ipython
  :straight (ob-ipython :host github :repo "jkitchin/ob-ipython")
  :config
  (require 'ob-ipython))

;;; * The customisations pertaining to the old ob-ipython fork are: 
(use-package scimax-org-babel-ipython
  :straight (scimax-org-babel-ipython :host github :repo "jkitchin/scimax"))

#+END_SRC



